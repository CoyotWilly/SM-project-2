
clean.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08008af0  08008af0  00018af0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ffc  08008ffc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008ffc  08008ffc  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ffc  08008ffc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ffc  08008ffc  00018ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009000  08009000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200001e8  080091ec  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  080091ec  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebd5  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ae  00000000  00000000  0002ede6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00030f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00031f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019246  00000000  00000000  00032e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d1c  00000000  00000000  0004c04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000900ca  00000000  00000000  0005cd6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c9  00000000  00000000  000ece34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005808  00000000  00000000  000ecf00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000064  00000000  00000000  000f2708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008ad4 	.word	0x08008ad4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008ad4 	.word	0x08008ad4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__gesf2>:
 8000eec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ef0:	e006      	b.n	8000f00 <__cmpsf2+0x4>
 8000ef2:	bf00      	nop

08000ef4 <__lesf2>:
 8000ef4:	f04f 0c01 	mov.w	ip, #1
 8000ef8:	e002      	b.n	8000f00 <__cmpsf2+0x4>
 8000efa:	bf00      	nop

08000efc <__cmpsf2>:
 8000efc:	f04f 0c01 	mov.w	ip, #1
 8000f00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f10:	bf18      	it	ne
 8000f12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f16:	d011      	beq.n	8000f3c <__cmpsf2+0x40>
 8000f18:	b001      	add	sp, #4
 8000f1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f1e:	bf18      	it	ne
 8000f20:	ea90 0f01 	teqne	r0, r1
 8000f24:	bf58      	it	pl
 8000f26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f2a:	bf88      	it	hi
 8000f2c:	17c8      	asrhi	r0, r1, #31
 8000f2e:	bf38      	it	cc
 8000f30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f34:	bf18      	it	ne
 8000f36:	f040 0001 	orrne.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__cmpsf2+0x4c>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d105      	bne.n	8000f54 <__cmpsf2+0x58>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d1e4      	bne.n	8000f18 <__cmpsf2+0x1c>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d0e1      	beq.n	8000f18 <__cmpsf2+0x1c>
 8000f54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__aeabi_cfrcmple>:
 8000f5c:	4684      	mov	ip, r0
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4661      	mov	r1, ip
 8000f62:	e7ff      	b.n	8000f64 <__aeabi_cfcmpeq>

08000f64 <__aeabi_cfcmpeq>:
 8000f64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f66:	f7ff ffc9 	bl	8000efc <__cmpsf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	bf48      	it	mi
 8000f6e:	f110 0f00 	cmnmi.w	r0, #0
 8000f72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f74 <__aeabi_fcmpeq>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff fff4 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f7c:	bf0c      	ite	eq
 8000f7e:	2001      	moveq	r0, #1
 8000f80:	2000      	movne	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmplt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffea 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmple>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffe0 	bl	8000f64 <__aeabi_cfcmpeq>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpge>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffd2 	bl	8000f5c <__aeabi_cfrcmple>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpgt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffc8 	bl	8000f5c <__aeabi_cfrcmple>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_f2uiz>:
 8000fd8:	0042      	lsls	r2, r0, #1
 8000fda:	d20e      	bcs.n	8000ffa <__aeabi_f2uiz+0x22>
 8000fdc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe0:	d30b      	bcc.n	8000ffa <__aeabi_f2uiz+0x22>
 8000fe2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fea:	d409      	bmi.n	8001000 <__aeabi_f2uiz+0x28>
 8000fec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	4770      	bx	lr
 8000ffa:	f04f 0000 	mov.w	r0, #0
 8000ffe:	4770      	bx	lr
 8001000:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001004:	d101      	bne.n	800100a <__aeabi_f2uiz+0x32>
 8001006:	0242      	lsls	r2, r0, #9
 8001008:	d102      	bne.n	8001010 <__aeabi_f2uiz+0x38>
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
 800100e:	4770      	bx	lr
 8001010:	f04f 0000 	mov.w	r0, #0
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_d2lz>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	4605      	mov	r5, r0
 800101c:	460c      	mov	r4, r1
 800101e:	2200      	movs	r2, #0
 8001020:	2300      	movs	r3, #0
 8001022:	4628      	mov	r0, r5
 8001024:	4621      	mov	r1, r4
 8001026:	f7ff fd7d 	bl	8000b24 <__aeabi_dcmplt>
 800102a:	b928      	cbnz	r0, 8001038 <__aeabi_d2lz+0x20>
 800102c:	4628      	mov	r0, r5
 800102e:	4621      	mov	r1, r4
 8001030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001034:	f000 b80a 	b.w	800104c <__aeabi_d2ulz>
 8001038:	4628      	mov	r0, r5
 800103a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800103e:	f000 f805 	bl	800104c <__aeabi_d2ulz>
 8001042:	4240      	negs	r0, r0
 8001044:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001048:	bd38      	pop	{r3, r4, r5, pc}
 800104a:	bf00      	nop

0800104c <__aeabi_d2ulz>:
 800104c:	b5d0      	push	{r4, r6, r7, lr}
 800104e:	2200      	movs	r2, #0
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <__aeabi_d2ulz+0x34>)
 8001052:	4606      	mov	r6, r0
 8001054:	460f      	mov	r7, r1
 8001056:	f7ff faf3 	bl	8000640 <__aeabi_dmul>
 800105a:	f7ff fdc9 	bl	8000bf0 <__aeabi_d2uiz>
 800105e:	4604      	mov	r4, r0
 8001060:	f7ff fa74 	bl	800054c <__aeabi_ui2d>
 8001064:	2200      	movs	r2, #0
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <__aeabi_d2ulz+0x38>)
 8001068:	f7ff faea 	bl	8000640 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4630      	mov	r0, r6
 8001072:	4639      	mov	r1, r7
 8001074:	f7ff f92c 	bl	80002d0 <__aeabi_dsub>
 8001078:	f7ff fdba 	bl	8000bf0 <__aeabi_d2uiz>
 800107c:	4621      	mov	r1, r4
 800107e:	bdd0      	pop	{r4, r6, r7, pc}
 8001080:	3df00000 	.word	0x3df00000
 8001084:	41f00000 	.word	0x41f00000

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PID_controller.Kp = PID_KP;
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <main+0x54>)
 800108e:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <main+0x58>)
 8001090:	619a      	str	r2, [r3, #24]
	PID_controller.Ki = PID_KI;
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <main+0x54>)
 8001094:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <main+0x5c>)
 8001096:	61da      	str	r2, [r3, #28]
	PID_controller.Kd = PID_KD;
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <main+0x54>)
 800109a:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <main+0x60>)
 800109c:	621a      	str	r2, [r3, #32]

	arm_pid_init_f32(&PID_controller, 1);
 800109e:	2101      	movs	r1, #1
 80010a0:	480e      	ldr	r0, [pc, #56]	; (80010dc <main+0x54>)
 80010a2:	f003 fb07 	bl	80046b4 <arm_pid_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a6:	f000 fd33 	bl	8001b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010aa:	f000 f827 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ae:	f000 f981 	bl	80013b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010b2:	f000 f955 	bl	8001360 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010b6:	f000 f863 	bl	8001180 <MX_I2C1_Init>
  MX_TIM2_Init();
 80010ba:	f000 f88d 	bl	80011d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010be:	f000 f8d9 	bl	8001274 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
  HAL_UART_Receive_IT(&huart2, (uint8_t*)input, 4);
 80010c2:	2204      	movs	r2, #4
 80010c4:	4909      	ldr	r1, [pc, #36]	; (80010ec <main+0x64>)
 80010c6:	480a      	ldr	r0, [pc, #40]	; (80010f0 <main+0x68>)
 80010c8:	f002 fe9b 	bl	8003e02 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80010cc:	4809      	ldr	r0, [pc, #36]	; (80010f4 <main+0x6c>)
 80010ce:	f001 feab 	bl	8002e28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010d2:	2100      	movs	r1, #0
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <main+0x70>)
 80010d6:	f001 ff51 	bl	8002f7c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010da:	e7fe      	b.n	80010da <main+0x52>
 80010dc:	2000039c 	.word	0x2000039c
 80010e0:	3f74c72a 	.word	0x3f74c72a
 80010e4:	3b144ed7 	.word	0x3b144ed7
 80010e8:	c152c8b4 	.word	0xc152c8b4
 80010ec:	20000398 	.word	0x20000398
 80010f0:	200002e8 	.word	0x200002e8
 80010f4:	20000258 	.word	0x20000258
 80010f8:	200002a0 	.word	0x200002a0

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b090      	sub	sp, #64	; 0x40
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	2228      	movs	r2, #40	; 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fb20 	bl	8004750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001122:	2301      	movs	r3, #1
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001126:	2310      	movs	r3, #16
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112a:	2302      	movs	r3, #2
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800112e:	2300      	movs	r3, #0
 8001130:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001132:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fa09 	bl	8002554 <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001148:	f000 fa8c 	bl	8001664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114c:	230f      	movs	r3, #15
 800114e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001150:	2302      	movs	r3, #2
 8001152:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2102      	movs	r1, #2
 8001166:	4618      	mov	r0, r3
 8001168:	f001 fc76 	bl	8002a58 <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001172:	f000 fa77 	bl	8001664 <Error_Handler>
  }
}
 8001176:	bf00      	nop
 8001178:	3740      	adds	r7, #64	; 0x40
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_I2C1_Init+0x50>)
 8001186:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <MX_I2C1_Init+0x54>)
 8001188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100;
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_I2C1_Init+0x50>)
 800118c:	2264      	movs	r2, #100	; 0x64
 800118e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_I2C1_Init+0x50>)
 800119e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_I2C1_Init+0x50>)
 80011be:	f001 f885 	bl	80022cc <HAL_I2C_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c8:	f000 fa4c 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000204 	.word	0x20000204
 80011d4:	40005400 	.word	0x40005400

080011d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <MX_TIM2_Init+0x98>)
 80011f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6300;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_TIM2_Init+0x98>)
 80011fe:	f641 029c 	movw	r2, #6300	; 0x189c
 8001202:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_TIM2_Init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_TIM2_Init+0x98>)
 800120c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001210:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_TIM2_Init+0x98>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_TIM2_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800121e:	4814      	ldr	r0, [pc, #80]	; (8001270 <MX_TIM2_Init+0x98>)
 8001220:	f001 fdb2 	bl	8002d88 <HAL_TIM_Base_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800122a:	f000 fa1b 	bl	8001664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001232:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	4619      	mov	r1, r3
 800123a:	480d      	ldr	r0, [pc, #52]	; (8001270 <MX_TIM2_Init+0x98>)
 800123c:	f002 f906 	bl	800344c <HAL_TIM_ConfigClockSource>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001246:	f000 fa0d 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001252:	463b      	mov	r3, r7
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <MX_TIM2_Init+0x98>)
 8001258:	f002 fc84 	bl	8003b64 <HAL_TIMEx_MasterConfigSynchronization>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001262:	f000 f9ff 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000258 	.word	0x20000258

08001274 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08e      	sub	sp, #56	; 0x38
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	f107 0320 	add.w	r3, r7, #32
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
 80012a0:	615a      	str	r2, [r3, #20]
 80012a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012a4:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <MX_TIM3_Init+0xe4>)
 80012a6:	4a2d      	ldr	r2, [pc, #180]	; (800135c <MX_TIM3_Init+0xe8>)
 80012a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <MX_TIM3_Init+0xe4>)
 80012ac:	223f      	movs	r2, #63	; 0x3f
 80012ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b29      	ldr	r3, [pc, #164]	; (8001358 <MX_TIM3_Init+0xe4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <MX_TIM3_Init+0xe4>)
 80012b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <MX_TIM3_Init+0xe4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <MX_TIM3_Init+0xe4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012ca:	4823      	ldr	r0, [pc, #140]	; (8001358 <MX_TIM3_Init+0xe4>)
 80012cc:	f001 fd5c 	bl	8002d88 <HAL_TIM_Base_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012d6:	f000 f9c5 	bl	8001664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e4:	4619      	mov	r1, r3
 80012e6:	481c      	ldr	r0, [pc, #112]	; (8001358 <MX_TIM3_Init+0xe4>)
 80012e8:	f002 f8b0 	bl	800344c <HAL_TIM_ConfigClockSource>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012f2:	f000 f9b7 	bl	8001664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012f6:	4818      	ldr	r0, [pc, #96]	; (8001358 <MX_TIM3_Init+0xe4>)
 80012f8:	f001 fde8 	bl	8002ecc <HAL_TIM_PWM_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001302:	f000 f9af 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800130e:	f107 0320 	add.w	r3, r7, #32
 8001312:	4619      	mov	r1, r3
 8001314:	4810      	ldr	r0, [pc, #64]	; (8001358 <MX_TIM3_Init+0xe4>)
 8001316:	f002 fc25 	bl	8003b64 <HAL_TIMEx_MasterConfigSynchronization>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001320:	f000 f9a0 	bl	8001664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001324:	2360      	movs	r3, #96	; 0x60
 8001326:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2200      	movs	r2, #0
 8001338:	4619      	mov	r1, r3
 800133a:	4807      	ldr	r0, [pc, #28]	; (8001358 <MX_TIM3_Init+0xe4>)
 800133c:	f001 ffc8 	bl	80032d0 <HAL_TIM_PWM_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001346:	f000 f98d 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800134a:	4803      	ldr	r0, [pc, #12]	; (8001358 <MX_TIM3_Init+0xe4>)
 800134c:	f000 fa38 	bl	80017c0 <HAL_TIM_MspPostInit>

}
 8001350:	bf00      	nop
 8001352:	3738      	adds	r7, #56	; 0x38
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200002a0 	.word	0x200002a0
 800135c:	40000400 	.word	0x40000400

08001360 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <MX_USART2_UART_Init+0x50>)
 8001368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001398:	f002 fc54 	bl	8003c44 <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013a2:	f000 f95f 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200002e8 	.word	0x200002e8
 80013b0:	40004400 	.word	0x40004400

080013b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <MX_GPIO_Init+0xcc>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a2c      	ldr	r2, [pc, #176]	; (8001480 <MX_GPIO_Init+0xcc>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <MX_GPIO_Init+0xcc>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_GPIO_Init+0xcc>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a26      	ldr	r2, [pc, #152]	; (8001480 <MX_GPIO_Init+0xcc>)
 80013e6:	f043 0320 	orr.w	r3, r3, #32
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_GPIO_Init+0xcc>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_GPIO_Init+0xcc>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a20      	ldr	r2, [pc, #128]	; (8001480 <MX_GPIO_Init+0xcc>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_GPIO_Init+0xcc>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_GPIO_Init+0xcc>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a1a      	ldr	r2, [pc, #104]	; (8001480 <MX_GPIO_Init+0xcc>)
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_GPIO_Init+0xcc>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	2120      	movs	r1, #32
 800142c:	4815      	ldr	r0, [pc, #84]	; (8001484 <MX_GPIO_Init+0xd0>)
 800142e:	f000 ff13 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_GPIO_Init+0xd4>)
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4619      	mov	r1, r3
 8001446:	4811      	ldr	r0, [pc, #68]	; (800148c <MX_GPIO_Init+0xd8>)
 8001448:	f000 fd82 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800144c:	2320      	movs	r3, #32
 800144e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2302      	movs	r3, #2
 800145a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	4619      	mov	r1, r3
 8001462:	4808      	ldr	r0, [pc, #32]	; (8001484 <MX_GPIO_Init+0xd0>)
 8001464:	f000 fd74 	bl	8001f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	2028      	movs	r0, #40	; 0x28
 800146e:	f000 fc88 	bl	8001d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001472:	2028      	movs	r0, #40	; 0x28
 8001474:	f000 fca1 	bl	8001dba <HAL_NVIC_EnableIRQ>

}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	40010800 	.word	0x40010800
 8001488:	10110000 	.word	0x10110000
 800148c:	40011000 	.word	0x40011000

08001490 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// CONST measurement and data sending every 1s
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001494:	b08f      	sub	sp, #60	; 0x3c
 8001496:	af08      	add	r7, sp, #32
 8001498:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a2:	f040 8093 	bne.w	80015cc <HAL_TIM_PeriodElapsedCallback+0x13c>
//		BMP280_ReadTemperatureAndPressure(&temperature, &pressure);

		error = temp_requested - temperature;
 80014a6:	4b4c      	ldr	r3, [pc, #304]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a4c      	ldr	r2, [pc, #304]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fc11 	bl	8000cd8 <__aeabi_fsub>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80014bc:	601a      	str	r2, [r3, #0]
		duty = 1000 * (uint32_t) arm_pid_f32(&PID_controller, error);
 80014be:	4b48      	ldr	r3, [pc, #288]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a48      	ldr	r2, [pc, #288]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80014c4:	617a      	str	r2, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6939      	ldr	r1, [r7, #16]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe fe46 	bl	8000160 <__aeabi_fmul>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4610      	mov	r0, r2
 80014e4:	f7fe fe3c 	bl	8000160 <__aeabi_fmul>
 80014e8:	4603      	mov	r3, r0
    out = (S->A0 * in) +
 80014ea:	4619      	mov	r1, r3
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7ff fbf5 	bl	8000cdc <__addsf3>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	4619      	mov	r1, r3
 8001500:	4610      	mov	r0, r2
 8001502:	f7fe fe2d 	bl	8000160 <__aeabi_fmul>
 8001506:	4603      	mov	r3, r0
 8001508:	4619      	mov	r1, r3
 800150a:	4620      	mov	r0, r4
 800150c:	f7ff fbe6 	bl	8000cdc <__addsf3>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	695b      	ldr	r3, [r3, #20]
    out = (S->A0 * in) +
 8001518:	4619      	mov	r1, r3
 800151a:	4610      	mov	r0, r2
 800151c:	f7ff fbde 	bl	8000cdc <__addsf3>
 8001520:	4603      	mov	r3, r0
 8001522:	60fb      	str	r3, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fd4c 	bl	8000fd8 <__aeabi_f2uiz>
 8001540:	4603      	mov	r3, r0
 8001542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800154c:	6013      	str	r3, [r2, #0]

		if (duty > WINDUP_UB) {
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001556:	d903      	bls.n	8001560 <HAL_TIM_PeriodElapsedCallback+0xd0>
			duty = 1000;
 8001558:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800155a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800155e:	601a      	str	r2, [r3, #0]
		if (duty < WINDUP_LB){
			duty = 0;
		}

//		snprintf(text, sizeof(text), "{\"temperature\":\"%.2f\"}\n\r ", temperature);
		snprintf(text, sizeof(text), "{\"temperature\":\"%.2f\"}\n{\"ref\":\"%.2f\"}\n{\"u\:\"%.d\"}\n{\"error\":\"%.4f\"}\n", temperature, temp_requested, duty, error);
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f813 	bl	8000590 <__aeabi_f2d>
 800156a:	4604      	mov	r4, r0
 800156c:	460d      	mov	r5, r1
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f80c 	bl	8000590 <__aeabi_f2d>
 8001578:	4680      	mov	r8, r0
 800157a:	4689      	mov	r9, r1
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800157e:	681e      	ldr	r6, [r3, #0]
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff f803 	bl	8000590 <__aeabi_f2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001592:	9604      	str	r6, [sp, #16]
 8001594:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001598:	e9cd 4500 	strd	r4, r5, [sp]
 800159c:	4a13      	ldr	r2, [pc, #76]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800159e:	2164      	movs	r1, #100	; 0x64
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80015a2:	f003 fd3d 	bl	8005020 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)text, strlen(text), 1000);
 80015a6:	4812      	ldr	r0, [pc, #72]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80015a8:	f7fe fdd2 	bl	8000150 <strlen>
 80015ac:	4603      	mov	r3, r0
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	490e      	ldr	r1, [pc, #56]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80015b6:	480f      	ldr	r0, [pc, #60]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80015b8:	f002 fb91 	bl	8003cde <HAL_UART_Transmit>
		text[0] = 0;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty);
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80015cc:	bf00      	nop
 80015ce:	371c      	adds	r7, #28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015d6:	bf00      	nop
 80015d8:	20000000 	.word	0x20000000
 80015dc:	2000032c 	.word	0x2000032c
 80015e0:	20000330 	.word	0x20000330
 80015e4:	2000039c 	.word	0x2000039c
 80015e8:	20000004 	.word	0x20000004
 80015ec:	08008af0 	.word	0x08008af0
 80015f0:	20000334 	.word	0x20000334
 80015f4:	200002e8 	.word	0x200002e8
 80015f8:	200002a0 	.word	0x200002a0
 80015fc:	00000000 	.word	0x00000000

08001600 <HAL_UART_RxCpltCallback>:

// set temperature via UART implementation
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ){
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	float given = 0.01 * atof(input);
 8001608:	4813      	ldr	r0, [pc, #76]	; (8001658 <HAL_UART_RxCpltCallback+0x58>)
 800160a:	f003 f873 	bl	80046f4 <atof>
 800160e:	a310      	add	r3, pc, #64	; (adr r3, 8001650 <HAL_UART_RxCpltCallback+0x50>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7ff f814 	bl	8000640 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f7ff fb06 	bl	8000c30 <__aeabi_d2f>
 8001624:	4603      	mov	r3, r0
 8001626:	60fb      	str	r3, [r7, #12]

	if (given > 0.0){
 8001628:	f04f 0100 	mov.w	r1, #0
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7ff fcc9 	bl	8000fc4 <__aeabi_fcmpgt>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <HAL_UART_RxCpltCallback+0x3e>
		temp_requested = given;
 8001638:	4a08      	ldr	r2, [pc, #32]	; (800165c <HAL_UART_RxCpltCallback+0x5c>)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*)input, 4);
 800163e:	2204      	movs	r2, #4
 8001640:	4905      	ldr	r1, [pc, #20]	; (8001658 <HAL_UART_RxCpltCallback+0x58>)
 8001642:	4807      	ldr	r0, [pc, #28]	; (8001660 <HAL_UART_RxCpltCallback+0x60>)
 8001644:	f002 fbdd 	bl	8003e02 <HAL_UART_Receive_IT>
//	snprintf(input, sizeof(input), "%.2f ", given);
//	HAL_UART_Transmit(&huart2, (uint8_t*)input, 4, 1000);
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	47ae147b 	.word	0x47ae147b
 8001654:	3f847ae1 	.word	0x3f847ae1
 8001658:	20000398 	.word	0x20000398
 800165c:	20000000 	.word	0x20000000
 8001660:	200002e8 	.word	0x200002e8

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
}
 800166a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166c:	e7fe      	b.n	800166c <Error_Handler+0x8>
	...

08001670 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_MspInit+0x5c>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	4a14      	ldr	r2, [pc, #80]	; (80016cc <HAL_MspInit+0x5c>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6193      	str	r3, [r2, #24]
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_MspInit+0x5c>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_MspInit+0x5c>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_MspInit+0x5c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	61d3      	str	r3, [r2, #28]
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_MspInit+0x5c>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_MspInit+0x60>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_MspInit+0x60>)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010000 	.word	0x40010000

080016d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a15      	ldr	r2, [pc, #84]	; (8001744 <HAL_I2C_MspInit+0x70>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d123      	bne.n	800173c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_I2C_MspInit+0x74>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a13      	ldr	r2, [pc, #76]	; (8001748 <HAL_I2C_MspInit+0x74>)
 80016fa:	f043 0308 	orr.w	r3, r3, #8
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_I2C_MspInit+0x74>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800170c:	23c0      	movs	r3, #192	; 0xc0
 800170e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001710:	2312      	movs	r3, #18
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	480b      	ldr	r0, [pc, #44]	; (800174c <HAL_I2C_MspInit+0x78>)
 8001720:	f000 fc16 	bl	8001f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_I2C_MspInit+0x74>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_I2C_MspInit+0x74>)
 800172a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800172e:	61d3      	str	r3, [r2, #28]
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_I2C_MspInit+0x74>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40005400 	.word	0x40005400
 8001748:	40021000 	.word	0x40021000
 800174c:	40010c00 	.word	0x40010c00

08001750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001760:	d114      	bne.n	800178c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_TIM_Base_MspInit+0x68>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <HAL_TIM_Base_MspInit+0x68>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	61d3      	str	r3, [r2, #28]
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_TIM_Base_MspInit+0x68>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	201c      	movs	r0, #28
 8001780:	f000 faff 	bl	8001d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001784:	201c      	movs	r0, #28
 8001786:	f000 fb18 	bl	8001dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800178a:	e010      	b.n	80017ae <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_TIM_Base_MspInit+0x6c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d10b      	bne.n	80017ae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_TIM_Base_MspInit+0x68>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_TIM_Base_MspInit+0x68>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	61d3      	str	r3, [r2, #28]
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_TIM_Base_MspInit+0x68>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40000400 	.word	0x40000400

080017c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HAL_TIM_MspPostInit+0x58>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d117      	bne.n	8001810 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_TIM_MspPostInit+0x5c>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a0d      	ldr	r2, [pc, #52]	; (800181c <HAL_TIM_MspPostInit+0x5c>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_TIM_MspPostInit+0x5c>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017f8:	2340      	movs	r3, #64	; 0x40
 80017fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2302      	movs	r3, #2
 8001802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	4619      	mov	r1, r3
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <HAL_TIM_MspPostInit+0x60>)
 800180c:	f000 fba0 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001810:	bf00      	nop
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40000400 	.word	0x40000400
 800181c:	40021000 	.word	0x40021000
 8001820:	40010800 	.word	0x40010800

08001824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <HAL_UART_MspInit+0x80>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d12b      	bne.n	800189c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001844:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_UART_MspInit+0x84>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <HAL_UART_MspInit+0x84>)
 800184a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184e:	61d3      	str	r3, [r2, #28]
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_UART_MspInit+0x84>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_UART_MspInit+0x84>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a11      	ldr	r2, [pc, #68]	; (80018a8 <HAL_UART_MspInit+0x84>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_UART_MspInit+0x84>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001874:	230c      	movs	r3, #12
 8001876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2302      	movs	r3, #2
 800187e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	4619      	mov	r1, r3
 8001886:	4809      	ldr	r0, [pc, #36]	; (80018ac <HAL_UART_MspInit+0x88>)
 8001888:	f000 fb62 	bl	8001f50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	2026      	movs	r0, #38	; 0x26
 8001892:	f000 fa76 	bl	8001d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001896:	2026      	movs	r0, #38	; 0x26
 8001898:	f000 fa8f 	bl	8001dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800189c:	bf00      	nop
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40004400 	.word	0x40004400
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010800 	.word	0x40010800

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f6:	f000 f951 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <TIM2_IRQHandler+0x10>)
 8001906:	f001 fbdb 	bl	80030c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000258 	.word	0x20000258

08001914 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <USART2_IRQHandler+0x10>)
 800191a:	f002 faa3 	bl	8003e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200002e8 	.word	0x200002e8

08001928 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800192c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001930:	f000 fcaa 	bl	8002288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return 1;
 800193c:	2301      	movs	r3, #1
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <_kill>:

int _kill(int pid, int sig)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001950:	f002 fed4 	bl	80046fc <__errno>
 8001954:	4603      	mov	r3, r0
 8001956:	2216      	movs	r2, #22
 8001958:	601a      	str	r2, [r3, #0]
  return -1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_exit>:

void _exit (int status)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800196e:	f04f 31ff 	mov.w	r1, #4294967295
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffe7 	bl	8001946 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001978:	e7fe      	b.n	8001978 <_exit+0x12>

0800197a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e00a      	b.n	80019a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800198c:	f3af 8000 	nop.w
 8001990:	4601      	mov	r1, r0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	60ba      	str	r2, [r7, #8]
 8001998:	b2ca      	uxtb	r2, r1
 800199a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	dbf0      	blt.n	800198c <_read+0x12>
  }

  return len;
 80019aa:	687b      	ldr	r3, [r7, #4]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	e009      	b.n	80019da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	60ba      	str	r2, [r7, #8]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	429a      	cmp	r2, r3
 80019e0:	dbf1      	blt.n	80019c6 <_write+0x12>
  }
  return len;
 80019e2:	687b      	ldr	r3, [r7, #4]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_close>:

int _close(int file)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a12:	605a      	str	r2, [r3, #4]
  return 0;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <_isatty>:

int _isatty(int file)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a28:	2301      	movs	r3, #1
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <_sbrk+0x5c>)
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <_sbrk+0x60>)
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <_sbrk+0x64>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <_sbrk+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d207      	bcs.n	8001a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a7c:	f002 fe3e 	bl	80046fc <__errno>
 8001a80:	4603      	mov	r3, r0
 8001a82:	220c      	movs	r2, #12
 8001a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	e009      	b.n	8001aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <_sbrk+0x64>)
 8001a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20005000 	.word	0x20005000
 8001aac:	00000400 	.word	0x00000400
 8001ab0:	200003c0 	.word	0x200003c0
 8001ab4:	200003d8 	.word	0x200003d8

08001ab8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ac6:	490d      	ldr	r1, [pc, #52]	; (8001afc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001adc:	4c0a      	ldr	r4, [pc, #40]	; (8001b08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aea:	f7ff ffe5 	bl	8001ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aee:	f002 fe0b 	bl	8004708 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001af2:	f7ff fac9 	bl	8001088 <main>
  bx lr
 8001af6:	4770      	bx	lr
  ldr r0, =_sdata
 8001af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001afc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001b00:	08009004 	.word	0x08009004
  ldr r2, =_sbss
 8001b04:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001b08:	200003d8 	.word	0x200003d8

08001b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b0c:	e7fe      	b.n	8001b0c <ADC1_2_IRQHandler>
	...

08001b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_Init+0x28>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_Init+0x28>)
 8001b1a:	f043 0310 	orr.w	r3, r3, #16
 8001b1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 f923 	bl	8001d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b26:	2000      	movs	r0, #0
 8001b28:	f000 f808 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2c:	f7ff fda0 	bl	8001670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40022000 	.word	0x40022000

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f93b 	bl	8001dd6 <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 f903 	bl	8001d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000010 	.word	0x20000010
 8001b98:	2000000c 	.word	0x2000000c

08001b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_IncTick+0x1c>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a03      	ldr	r2, [pc, #12]	; (8001bbc <HAL_IncTick+0x20>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000010 	.word	0x20000010
 8001bbc:	200003c4 	.word	0x200003c4

08001bc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b02      	ldr	r3, [pc, #8]	; (8001bd0 <HAL_GetTick+0x10>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	200003c4 	.word	0x200003c4

08001bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60d3      	str	r3, [r2, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <__NVIC_GetPriorityGrouping+0x18>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	f003 0307 	and.w	r3, r3, #7
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db0b      	blt.n	8001c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	4906      	ldr	r1, [pc, #24]	; (8001c6c <__NVIC_EnableIRQ+0x34>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	2001      	movs	r0, #1
 8001c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	; (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d38:	d301      	bcc.n	8001d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00f      	b.n	8001d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <SysTick_Config+0x40>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d46:	210f      	movs	r1, #15
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	f7ff ff90 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <SysTick_Config+0x40>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <SysTick_Config+0x40>)
 8001d58:	2207      	movs	r2, #7
 8001d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	e000e010 	.word	0xe000e010

08001d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff2d 	bl	8001bd4 <__NVIC_SetPriorityGrouping>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d94:	f7ff ff42 	bl	8001c1c <__NVIC_GetPriorityGrouping>
 8001d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	6978      	ldr	r0, [r7, #20]
 8001da0:	f7ff ff90 	bl	8001cc4 <NVIC_EncodePriority>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff5f 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff35 	bl	8001c38 <__NVIC_EnableIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffa2 	bl	8001d28 <SysTick_Config>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d008      	beq.n	8001e16 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2204      	movs	r2, #4
 8001e08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e020      	b.n	8001e58 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 020e 	bic.w	r2, r2, #14
 8001e24:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3e:	2101      	movs	r1, #1
 8001e40:	fa01 f202 	lsl.w	r2, r1, r2
 8001e44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d005      	beq.n	8001e86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e051      	b.n	8001f2a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 020e 	bic.w	r2, r2, #14
 8001e94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a22      	ldr	r2, [pc, #136]	; (8001f34 <HAL_DMA_Abort_IT+0xd0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d029      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xa0>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a20      	ldr	r2, [pc, #128]	; (8001f38 <HAL_DMA_Abort_IT+0xd4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d022      	beq.n	8001f00 <HAL_DMA_Abort_IT+0x9c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1f      	ldr	r2, [pc, #124]	; (8001f3c <HAL_DMA_Abort_IT+0xd8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d01a      	beq.n	8001efa <HAL_DMA_Abort_IT+0x96>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_DMA_Abort_IT+0xdc>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d012      	beq.n	8001ef4 <HAL_DMA_Abort_IT+0x90>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a1c      	ldr	r2, [pc, #112]	; (8001f44 <HAL_DMA_Abort_IT+0xe0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d00a      	beq.n	8001eee <HAL_DMA_Abort_IT+0x8a>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <HAL_DMA_Abort_IT+0xe4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d102      	bne.n	8001ee8 <HAL_DMA_Abort_IT+0x84>
 8001ee2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ee6:	e00e      	b.n	8001f06 <HAL_DMA_Abort_IT+0xa2>
 8001ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eec:	e00b      	b.n	8001f06 <HAL_DMA_Abort_IT+0xa2>
 8001eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef2:	e008      	b.n	8001f06 <HAL_DMA_Abort_IT+0xa2>
 8001ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef8:	e005      	b.n	8001f06 <HAL_DMA_Abort_IT+0xa2>
 8001efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efe:	e002      	b.n	8001f06 <HAL_DMA_Abort_IT+0xa2>
 8001f00:	2310      	movs	r3, #16
 8001f02:	e000      	b.n	8001f06 <HAL_DMA_Abort_IT+0xa2>
 8001f04:	2301      	movs	r3, #1
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_DMA_Abort_IT+0xe8>)
 8001f08:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	4798      	blx	r3
    } 
  }
  return status;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40020008 	.word	0x40020008
 8001f38:	4002001c 	.word	0x4002001c
 8001f3c:	40020030 	.word	0x40020030
 8001f40:	40020044 	.word	0x40020044
 8001f44:	40020058 	.word	0x40020058
 8001f48:	4002006c 	.word	0x4002006c
 8001f4c:	40020000 	.word	0x40020000

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b08b      	sub	sp, #44	; 0x2c
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f62:	e169      	b.n	8002238 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f64:	2201      	movs	r2, #1
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f040 8158 	bne.w	8002232 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4a9a      	ldr	r2, [pc, #616]	; (80021f0 <HAL_GPIO_Init+0x2a0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d05e      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001f8c:	4a98      	ldr	r2, [pc, #608]	; (80021f0 <HAL_GPIO_Init+0x2a0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d875      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001f92:	4a98      	ldr	r2, [pc, #608]	; (80021f4 <HAL_GPIO_Init+0x2a4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d058      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001f98:	4a96      	ldr	r2, [pc, #600]	; (80021f4 <HAL_GPIO_Init+0x2a4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d86f      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001f9e:	4a96      	ldr	r2, [pc, #600]	; (80021f8 <HAL_GPIO_Init+0x2a8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d052      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001fa4:	4a94      	ldr	r2, [pc, #592]	; (80021f8 <HAL_GPIO_Init+0x2a8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d869      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001faa:	4a94      	ldr	r2, [pc, #592]	; (80021fc <HAL_GPIO_Init+0x2ac>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d04c      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001fb0:	4a92      	ldr	r2, [pc, #584]	; (80021fc <HAL_GPIO_Init+0x2ac>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d863      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001fb6:	4a92      	ldr	r2, [pc, #584]	; (8002200 <HAL_GPIO_Init+0x2b0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d046      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001fbc:	4a90      	ldr	r2, [pc, #576]	; (8002200 <HAL_GPIO_Init+0x2b0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d85d      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001fc2:	2b12      	cmp	r3, #18
 8001fc4:	d82a      	bhi.n	800201c <HAL_GPIO_Init+0xcc>
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d859      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001fca:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <HAL_GPIO_Init+0x80>)
 8001fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd0:	0800204b 	.word	0x0800204b
 8001fd4:	08002025 	.word	0x08002025
 8001fd8:	08002037 	.word	0x08002037
 8001fdc:	08002079 	.word	0x08002079
 8001fe0:	0800207f 	.word	0x0800207f
 8001fe4:	0800207f 	.word	0x0800207f
 8001fe8:	0800207f 	.word	0x0800207f
 8001fec:	0800207f 	.word	0x0800207f
 8001ff0:	0800207f 	.word	0x0800207f
 8001ff4:	0800207f 	.word	0x0800207f
 8001ff8:	0800207f 	.word	0x0800207f
 8001ffc:	0800207f 	.word	0x0800207f
 8002000:	0800207f 	.word	0x0800207f
 8002004:	0800207f 	.word	0x0800207f
 8002008:	0800207f 	.word	0x0800207f
 800200c:	0800207f 	.word	0x0800207f
 8002010:	0800207f 	.word	0x0800207f
 8002014:	0800202d 	.word	0x0800202d
 8002018:	08002041 	.word	0x08002041
 800201c:	4a79      	ldr	r2, [pc, #484]	; (8002204 <HAL_GPIO_Init+0x2b4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002022:	e02c      	b.n	800207e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	623b      	str	r3, [r7, #32]
          break;
 800202a:	e029      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	3304      	adds	r3, #4
 8002032:	623b      	str	r3, [r7, #32]
          break;
 8002034:	e024      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	3308      	adds	r3, #8
 800203c:	623b      	str	r3, [r7, #32]
          break;
 800203e:	e01f      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	330c      	adds	r3, #12
 8002046:	623b      	str	r3, [r7, #32]
          break;
 8002048:	e01a      	b.n	8002080 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002052:	2304      	movs	r3, #4
 8002054:	623b      	str	r3, [r7, #32]
          break;
 8002056:	e013      	b.n	8002080 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002060:	2308      	movs	r3, #8
 8002062:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	611a      	str	r2, [r3, #16]
          break;
 800206a:	e009      	b.n	8002080 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800206c:	2308      	movs	r3, #8
 800206e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	615a      	str	r2, [r3, #20]
          break;
 8002076:	e003      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
          break;
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x130>
          break;
 800207e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2bff      	cmp	r3, #255	; 0xff
 8002084:	d801      	bhi.n	800208a <HAL_GPIO_Init+0x13a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	e001      	b.n	800208e <HAL_GPIO_Init+0x13e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3304      	adds	r3, #4
 800208e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2bff      	cmp	r3, #255	; 0xff
 8002094:	d802      	bhi.n	800209c <HAL_GPIO_Init+0x14c>
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	e002      	b.n	80020a2 <HAL_GPIO_Init+0x152>
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	3b08      	subs	r3, #8
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	210f      	movs	r1, #15
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	401a      	ands	r2, r3
 80020b4:	6a39      	ldr	r1, [r7, #32]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	431a      	orrs	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80b1 	beq.w	8002232 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020d0:	4b4d      	ldr	r3, [pc, #308]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a4c      	ldr	r2, [pc, #304]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b4a      	ldr	r3, [pc, #296]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020e8:	4a48      	ldr	r2, [pc, #288]	; (800220c <HAL_GPIO_Init+0x2bc>)
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a40      	ldr	r2, [pc, #256]	; (8002210 <HAL_GPIO_Init+0x2c0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d013      	beq.n	800213c <HAL_GPIO_Init+0x1ec>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3f      	ldr	r2, [pc, #252]	; (8002214 <HAL_GPIO_Init+0x2c4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00d      	beq.n	8002138 <HAL_GPIO_Init+0x1e8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3e      	ldr	r2, [pc, #248]	; (8002218 <HAL_GPIO_Init+0x2c8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d007      	beq.n	8002134 <HAL_GPIO_Init+0x1e4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3d      	ldr	r2, [pc, #244]	; (800221c <HAL_GPIO_Init+0x2cc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_GPIO_Init+0x1e0>
 800212c:	2303      	movs	r3, #3
 800212e:	e006      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 8002130:	2304      	movs	r3, #4
 8002132:	e004      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 8002134:	2302      	movs	r3, #2
 8002136:	e002      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 800213c:	2300      	movs	r3, #0
 800213e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002140:	f002 0203 	and.w	r2, r2, #3
 8002144:	0092      	lsls	r2, r2, #2
 8002146:	4093      	lsls	r3, r2
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800214e:	492f      	ldr	r1, [pc, #188]	; (800220c <HAL_GPIO_Init+0x2bc>)
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002168:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	492c      	ldr	r1, [pc, #176]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
 8002174:	e006      	b.n	8002184 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	43db      	mvns	r3, r3
 800217e:	4928      	ldr	r1, [pc, #160]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002180:	4013      	ands	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002190:	4b23      	ldr	r3, [pc, #140]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4922      	ldr	r1, [pc, #136]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	491e      	ldr	r1, [pc, #120]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d006      	beq.n	80021c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	4918      	ldr	r1, [pc, #96]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	4914      	ldr	r1, [pc, #80]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d021      	beq.n	8002224 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	490e      	ldr	r1, [pc, #56]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60cb      	str	r3, [r1, #12]
 80021ec:	e021      	b.n	8002232 <HAL_GPIO_Init+0x2e2>
 80021ee:	bf00      	nop
 80021f0:	10320000 	.word	0x10320000
 80021f4:	10310000 	.word	0x10310000
 80021f8:	10220000 	.word	0x10220000
 80021fc:	10210000 	.word	0x10210000
 8002200:	10120000 	.word	0x10120000
 8002204:	10110000 	.word	0x10110000
 8002208:	40021000 	.word	0x40021000
 800220c:	40010000 	.word	0x40010000
 8002210:	40010800 	.word	0x40010800
 8002214:	40010c00 	.word	0x40010c00
 8002218:	40011000 	.word	0x40011000
 800221c:	40011400 	.word	0x40011400
 8002220:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_GPIO_Init+0x304>)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	43db      	mvns	r3, r3
 800222c:	4909      	ldr	r1, [pc, #36]	; (8002254 <HAL_GPIO_Init+0x304>)
 800222e:	4013      	ands	r3, r2
 8002230:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	3301      	adds	r3, #1
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	fa22 f303 	lsr.w	r3, r2, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	f47f ae8e 	bne.w	8001f64 <HAL_GPIO_Init+0x14>
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	372c      	adds	r7, #44	; 0x2c
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
 8002264:	4613      	mov	r3, r2
 8002266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002268:	787b      	ldrb	r3, [r7, #1]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002274:	e003      	b.n	800227e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002276:	887b      	ldrh	r3, [r7, #2]
 8002278:	041a      	lsls	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	611a      	str	r2, [r3, #16]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f806 	bl	80022b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40010400 	.word	0x40010400

080022b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e12b      	b.n	8002536 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff f9ee 	bl	80016d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2224      	movs	r2, #36	; 0x24
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800231e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800232e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002330:	f000 fce4 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8002334:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4a81      	ldr	r2, [pc, #516]	; (8002540 <HAL_I2C_Init+0x274>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d807      	bhi.n	8002350 <HAL_I2C_Init+0x84>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4a80      	ldr	r2, [pc, #512]	; (8002544 <HAL_I2C_Init+0x278>)
 8002344:	4293      	cmp	r3, r2
 8002346:	bf94      	ite	ls
 8002348:	2301      	movls	r3, #1
 800234a:	2300      	movhi	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	e006      	b.n	800235e <HAL_I2C_Init+0x92>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4a7d      	ldr	r2, [pc, #500]	; (8002548 <HAL_I2C_Init+0x27c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	bf94      	ite	ls
 8002358:	2301      	movls	r3, #1
 800235a:	2300      	movhi	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0e7      	b.n	8002536 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4a78      	ldr	r2, [pc, #480]	; (800254c <HAL_I2C_Init+0x280>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	0c9b      	lsrs	r3, r3, #18
 8002370:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	430a      	orrs	r2, r1
 8002384:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a6a      	ldr	r2, [pc, #424]	; (8002540 <HAL_I2C_Init+0x274>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d802      	bhi.n	80023a0 <HAL_I2C_Init+0xd4>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	3301      	adds	r3, #1
 800239e:	e009      	b.n	80023b4 <HAL_I2C_Init+0xe8>
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	4a69      	ldr	r2, [pc, #420]	; (8002550 <HAL_I2C_Init+0x284>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	099b      	lsrs	r3, r3, #6
 80023b2:	3301      	adds	r3, #1
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	430b      	orrs	r3, r1
 80023ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	495c      	ldr	r1, [pc, #368]	; (8002540 <HAL_I2C_Init+0x274>)
 80023d0:	428b      	cmp	r3, r1
 80023d2:	d819      	bhi.n	8002408 <HAL_I2C_Init+0x13c>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1e59      	subs	r1, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fbb1 f3f3 	udiv	r3, r1, r3
 80023e2:	1c59      	adds	r1, r3, #1
 80023e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023e8:	400b      	ands	r3, r1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_I2C_Init+0x138>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1e59      	subs	r1, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023fc:	3301      	adds	r3, #1
 80023fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002402:	e051      	b.n	80024a8 <HAL_I2C_Init+0x1dc>
 8002404:	2304      	movs	r3, #4
 8002406:	e04f      	b.n	80024a8 <HAL_I2C_Init+0x1dc>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d111      	bne.n	8002434 <HAL_I2C_Init+0x168>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1e58      	subs	r0, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	440b      	add	r3, r1
 800241e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002422:	3301      	adds	r3, #1
 8002424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e012      	b.n	800245a <HAL_I2C_Init+0x18e>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1e58      	subs	r0, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	0099      	lsls	r1, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	fbb0 f3f3 	udiv	r3, r0, r3
 800244a:	3301      	adds	r3, #1
 800244c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Init+0x196>
 800245e:	2301      	movs	r3, #1
 8002460:	e022      	b.n	80024a8 <HAL_I2C_Init+0x1dc>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10e      	bne.n	8002488 <HAL_I2C_Init+0x1bc>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1e58      	subs	r0, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6859      	ldr	r1, [r3, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	440b      	add	r3, r1
 8002478:	fbb0 f3f3 	udiv	r3, r0, r3
 800247c:	3301      	adds	r3, #1
 800247e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002486:	e00f      	b.n	80024a8 <HAL_I2C_Init+0x1dc>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	1e58      	subs	r0, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	0099      	lsls	r1, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	fbb0 f3f3 	udiv	r3, r0, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	6809      	ldr	r1, [r1, #0]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6911      	ldr	r1, [r2, #16]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68d2      	ldr	r2, [r2, #12]
 80024e2:	4311      	orrs	r1, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	430b      	orrs	r3, r1
 80024ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	000186a0 	.word	0x000186a0
 8002544:	001e847f 	.word	0x001e847f
 8002548:	003d08ff 	.word	0x003d08ff
 800254c:	431bde83 	.word	0x431bde83
 8002550:	10624dd3 	.word	0x10624dd3

08002554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e272      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8087 	beq.w	8002682 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002574:	4b92      	ldr	r3, [pc, #584]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b04      	cmp	r3, #4
 800257e:	d00c      	beq.n	800259a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002580:	4b8f      	ldr	r3, [pc, #572]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d112      	bne.n	80025b2 <HAL_RCC_OscConfig+0x5e>
 800258c:	4b8c      	ldr	r3, [pc, #560]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002598:	d10b      	bne.n	80025b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259a:	4b89      	ldr	r3, [pc, #548]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d06c      	beq.n	8002680 <HAL_RCC_OscConfig+0x12c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d168      	bne.n	8002680 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e24c      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ba:	d106      	bne.n	80025ca <HAL_RCC_OscConfig+0x76>
 80025bc:	4b80      	ldr	r3, [pc, #512]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a7f      	ldr	r2, [pc, #508]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	e02e      	b.n	8002628 <HAL_RCC_OscConfig+0xd4>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x98>
 80025d2:	4b7b      	ldr	r3, [pc, #492]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7a      	ldr	r2, [pc, #488]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b78      	ldr	r3, [pc, #480]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a77      	ldr	r2, [pc, #476]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e01d      	b.n	8002628 <HAL_RCC_OscConfig+0xd4>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0xbc>
 80025f6:	4b72      	ldr	r3, [pc, #456]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a71      	ldr	r2, [pc, #452]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b6f      	ldr	r3, [pc, #444]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a6e      	ldr	r2, [pc, #440]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e00b      	b.n	8002628 <HAL_RCC_OscConfig+0xd4>
 8002610:	4b6b      	ldr	r3, [pc, #428]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a6a      	ldr	r2, [pc, #424]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b68      	ldr	r3, [pc, #416]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a67      	ldr	r2, [pc, #412]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002626:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7ff fac6 	bl	8001bc0 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002638:	f7ff fac2 	bl	8001bc0 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e200      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b5d      	ldr	r3, [pc, #372]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0xe4>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7ff fab2 	bl	8001bc0 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002660:	f7ff faae 	bl	8001bc0 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e1ec      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x10c>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d063      	beq.n	8002756 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800268e:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800269a:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d11c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x18c>
 80026a6:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d116      	bne.n	80026e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x176>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e1c0      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4939      	ldr	r1, [pc, #228]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	e03a      	b.n	8002756 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d020      	beq.n	800272a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e8:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7ff fa67 	bl	8001bc0 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f6:	f7ff fa63 	bl	8001bc0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e1a1      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002714:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4927      	ldr	r1, [pc, #156]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
 8002728:	e015      	b.n	8002756 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272a:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7ff fa46 	bl	8001bc0 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002738:	f7ff fa42 	bl	8001bc0 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e180      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d03a      	beq.n	80027d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d019      	beq.n	800279e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_RCC_OscConfig+0x274>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002770:	f7ff fa26 	bl	8001bc0 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002778:	f7ff fa22 	bl	8001bc0 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e160      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <HAL_RCC_OscConfig+0x26c>)
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002796:	2001      	movs	r0, #1
 8002798:	f000 fad8 	bl	8002d4c <RCC_Delay>
 800279c:	e01c      	b.n	80027d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_RCC_OscConfig+0x274>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a4:	f7ff fa0c 	bl	8001bc0 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027aa:	e00f      	b.n	80027cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ac:	f7ff fa08 	bl	8001bc0 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d908      	bls.n	80027cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e146      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	42420000 	.word	0x42420000
 80027c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027cc:	4b92      	ldr	r3, [pc, #584]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1e9      	bne.n	80027ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80a6 	beq.w	8002932 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ea:	4b8b      	ldr	r3, [pc, #556]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10d      	bne.n	8002812 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	4b88      	ldr	r3, [pc, #544]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4a87      	ldr	r2, [pc, #540]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002800:	61d3      	str	r3, [r2, #28]
 8002802:	4b85      	ldr	r3, [pc, #532]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280e:	2301      	movs	r3, #1
 8002810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002812:	4b82      	ldr	r3, [pc, #520]	; (8002a1c <HAL_RCC_OscConfig+0x4c8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d118      	bne.n	8002850 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800281e:	4b7f      	ldr	r3, [pc, #508]	; (8002a1c <HAL_RCC_OscConfig+0x4c8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7e      	ldr	r2, [pc, #504]	; (8002a1c <HAL_RCC_OscConfig+0x4c8>)
 8002824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282a:	f7ff f9c9 	bl	8001bc0 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002832:	f7ff f9c5 	bl	8001bc0 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b64      	cmp	r3, #100	; 0x64
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e103      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	4b75      	ldr	r3, [pc, #468]	; (8002a1c <HAL_RCC_OscConfig+0x4c8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x312>
 8002858:	4b6f      	ldr	r3, [pc, #444]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	4a6e      	ldr	r2, [pc, #440]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6213      	str	r3, [r2, #32]
 8002864:	e02d      	b.n	80028c2 <HAL_RCC_OscConfig+0x36e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x334>
 800286e:	4b6a      	ldr	r3, [pc, #424]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a69      	ldr	r2, [pc, #420]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	6213      	str	r3, [r2, #32]
 800287a:	4b67      	ldr	r3, [pc, #412]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4a66      	ldr	r2, [pc, #408]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	f023 0304 	bic.w	r3, r3, #4
 8002884:	6213      	str	r3, [r2, #32]
 8002886:	e01c      	b.n	80028c2 <HAL_RCC_OscConfig+0x36e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b05      	cmp	r3, #5
 800288e:	d10c      	bne.n	80028aa <HAL_RCC_OscConfig+0x356>
 8002890:	4b61      	ldr	r3, [pc, #388]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4a60      	ldr	r2, [pc, #384]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002896:	f043 0304 	orr.w	r3, r3, #4
 800289a:	6213      	str	r3, [r2, #32]
 800289c:	4b5e      	ldr	r3, [pc, #376]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4a5d      	ldr	r2, [pc, #372]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6213      	str	r3, [r2, #32]
 80028a8:	e00b      	b.n	80028c2 <HAL_RCC_OscConfig+0x36e>
 80028aa:	4b5b      	ldr	r3, [pc, #364]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4a5a      	ldr	r2, [pc, #360]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	6213      	str	r3, [r2, #32]
 80028b6:	4b58      	ldr	r3, [pc, #352]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4a57      	ldr	r2, [pc, #348]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	f023 0304 	bic.w	r3, r3, #4
 80028c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d015      	beq.n	80028f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ca:	f7ff f979 	bl	8001bc0 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d2:	f7ff f975 	bl	8001bc0 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e0b1      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e8:	4b4b      	ldr	r3, [pc, #300]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0ee      	beq.n	80028d2 <HAL_RCC_OscConfig+0x37e>
 80028f4:	e014      	b.n	8002920 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f6:	f7ff f963 	bl	8001bc0 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7ff f95f 	bl	8001bc0 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e09b      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002914:	4b40      	ldr	r3, [pc, #256]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ee      	bne.n	80028fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002920:	7dfb      	ldrb	r3, [r7, #23]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d105      	bne.n	8002932 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002926:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4a3b      	ldr	r2, [pc, #236]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002930:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8087 	beq.w	8002a4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800293c:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b08      	cmp	r3, #8
 8002946:	d061      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d146      	bne.n	80029de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002950:	4b33      	ldr	r3, [pc, #204]	; (8002a20 <HAL_RCC_OscConfig+0x4cc>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7ff f933 	bl	8001bc0 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295e:	f7ff f92f 	bl	8001bc0 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e06d      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002970:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002984:	d108      	bne.n	8002998 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002986:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	4921      	ldr	r1, [pc, #132]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002998:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a19      	ldr	r1, [r3, #32]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	430b      	orrs	r3, r1
 80029aa:	491b      	ldr	r1, [pc, #108]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <HAL_RCC_OscConfig+0x4cc>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7ff f903 	bl	8001bc0 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029be:	f7ff f8ff 	bl	8001bc0 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e03d      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x46a>
 80029dc:	e035      	b.n	8002a4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <HAL_RCC_OscConfig+0x4cc>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7ff f8ec 	bl	8001bc0 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ec:	f7ff f8e8 	bl	8001bc0 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e026      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x498>
 8002a0a:	e01e      	b.n	8002a4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d107      	bne.n	8002a24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e019      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_OscConfig+0x500>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000

08002a58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0d0      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b6a      	ldr	r3, [pc, #424]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d910      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b67      	ldr	r3, [pc, #412]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 0207 	bic.w	r2, r3, #7
 8002a82:	4965      	ldr	r1, [pc, #404]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b63      	ldr	r3, [pc, #396]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0b8      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d020      	beq.n	8002aea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab4:	4b59      	ldr	r3, [pc, #356]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a58      	ldr	r2, [pc, #352]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002abe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002acc:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a52      	ldr	r2, [pc, #328]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ad6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad8:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	494d      	ldr	r1, [pc, #308]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d040      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d115      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e07f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b16:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e073      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b26:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e06b      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4936      	ldr	r1, [pc, #216]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b48:	f7ff f83a 	bl	8001bc0 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7ff f836 	bl	8001bc0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e053      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 020c 	and.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1eb      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b78:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d210      	bcs.n	8002ba8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 0207 	bic.w	r2, r3, #7
 8002b8e:	4922      	ldr	r1, [pc, #136]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e032      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4916      	ldr	r1, [pc, #88]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	490e      	ldr	r1, [pc, #56]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002be6:	f000 f821 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002bea:	4602      	mov	r2, r0
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	490a      	ldr	r1, [pc, #40]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf8:	5ccb      	ldrb	r3, [r1, r3]
 8002bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfe:	4a09      	ldr	r2, [pc, #36]	; (8002c24 <HAL_RCC_ClockConfig+0x1cc>)
 8002c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x1d0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe ff98 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	08008b44 	.word	0x08008b44
 8002c24:	20000008 	.word	0x20000008
 8002c28:	2000000c 	.word	0x2000000c

08002c2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	b490      	push	{r4, r7}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c34:	1d3c      	adds	r4, r7, #4
 8002c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c3c:	f240 2301 	movw	r3, #513	; 0x201
 8002c40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c56:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d002      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x40>
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_GetSysClockFreq+0x46>
 8002c6a:	e02b      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c6e:	623b      	str	r3, [r7, #32]
      break;
 8002c70:	e02b      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	0c9b      	lsrs	r3, r3, #18
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	3328      	adds	r3, #40	; 0x28
 8002c7c:	443b      	add	r3, r7
 8002c7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c82:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d012      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c8e:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	0c5b      	lsrs	r3, r3, #17
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	3328      	adds	r3, #40	; 0x28
 8002c9a:	443b      	add	r3, r7
 8002c9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ca0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	4a0e      	ldr	r2, [pc, #56]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ca6:	fb03 f202 	mul.w	r2, r3, r2
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb2:	e004      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	4a0b      	ldr	r2, [pc, #44]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cb8:	fb02 f303 	mul.w	r3, r2, r3
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	623b      	str	r3, [r7, #32]
      break;
 8002cc2:	e002      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cc6:	623b      	str	r3, [r7, #32]
      break;
 8002cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cca:	6a3b      	ldr	r3, [r7, #32]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3728      	adds	r7, #40	; 0x28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc90      	pop	{r4, r7}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	08008b34 	.word	0x08008b34
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	007a1200 	.word	0x007a1200
 8002ce4:	003d0900 	.word	0x003d0900

08002ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cec:	4b02      	ldr	r3, [pc, #8]	; (8002cf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	20000008 	.word	0x20000008

08002cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d00:	f7ff fff2 	bl	8002ce8 <HAL_RCC_GetHCLKFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	4903      	ldr	r1, [pc, #12]	; (8002d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	08008b54 	.word	0x08008b54

08002d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d28:	f7ff ffde 	bl	8002ce8 <HAL_RCC_GetHCLKFreq>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	0adb      	lsrs	r3, r3, #11
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	4903      	ldr	r1, [pc, #12]	; (8002d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d3a:	5ccb      	ldrb	r3, [r1, r3]
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000
 8002d48:	08008b54 	.word	0x08008b54

08002d4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <RCC_Delay+0x34>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <RCC_Delay+0x38>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	0a5b      	lsrs	r3, r3, #9
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
 8002d66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d68:	bf00      	nop
  }
  while (Delay --);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1e5a      	subs	r2, r3, #1
 8002d6e:	60fa      	str	r2, [r7, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f9      	bne.n	8002d68 <RCC_Delay+0x1c>
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	20000008 	.word	0x20000008
 8002d84:	10624dd3 	.word	0x10624dd3

08002d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e041      	b.n	8002e1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe fcce 	bl	8001750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f000 fc28 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d001      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e03a      	b.n	8002eb6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <HAL_TIM_Base_Start_IT+0x98>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00e      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x58>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6a:	d009      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x58>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x58>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d111      	bne.n	8002ea4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d010      	beq.n	8002eb4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea2:	e007      	b.n	8002eb4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40000800 	.word	0x40000800

08002ecc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e041      	b.n	8002f62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f839 	bl	8002f6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f000 fb86 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_TIM_PWM_Start+0x24>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e022      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x6a>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d109      	bne.n	8002fba <HAL_TIM_PWM_Start+0x3e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e015      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x6a>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d109      	bne.n	8002fd4 <HAL_TIM_PWM_Start+0x58>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e008      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x6a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e05e      	b.n	80030ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_PWM_Start+0x82>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ffc:	e013      	b.n	8003026 <HAL_TIM_PWM_Start+0xaa>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d104      	bne.n	800300e <HAL_TIM_PWM_Start+0x92>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800300c:	e00b      	b.n	8003026 <HAL_TIM_PWM_Start+0xaa>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d104      	bne.n	800301e <HAL_TIM_PWM_Start+0xa2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800301c:	e003      	b.n	8003026 <HAL_TIM_PWM_Start+0xaa>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2201      	movs	r2, #1
 800302c:	6839      	ldr	r1, [r7, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fd74 	bl	8003b1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <HAL_TIM_PWM_Start+0x138>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d107      	bne.n	800304e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <HAL_TIM_PWM_Start+0x138>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_TIM_PWM_Start+0xfa>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003060:	d009      	beq.n	8003076 <HAL_TIM_PWM_Start+0xfa>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <HAL_TIM_PWM_Start+0x13c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_TIM_PWM_Start+0xfa>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a12      	ldr	r2, [pc, #72]	; (80030bc <HAL_TIM_PWM_Start+0x140>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d111      	bne.n	800309a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b06      	cmp	r3, #6
 8003086:	d010      	beq.n	80030aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003098:	e007      	b.n	80030aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40000800 	.word	0x40000800

080030c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d122      	bne.n	800311c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d11b      	bne.n	800311c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0202 	mvn.w	r2, #2
 80030ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fa6f 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 8003108:	e005      	b.n	8003116 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fa62 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fa71 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b04      	cmp	r3, #4
 8003128:	d122      	bne.n	8003170 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b04      	cmp	r3, #4
 8003136:	d11b      	bne.n	8003170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0204 	mvn.w	r2, #4
 8003140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2202      	movs	r2, #2
 8003146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fa45 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 800315c:	e005      	b.n	800316a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fa38 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fa47 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b08      	cmp	r3, #8
 800317c:	d122      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b08      	cmp	r3, #8
 800318a:	d11b      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0208 	mvn.w	r2, #8
 8003194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2204      	movs	r2, #4
 800319a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fa1b 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 80031b0:	e005      	b.n	80031be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fa0e 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fa1d 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b10      	cmp	r3, #16
 80031d0:	d122      	bne.n	8003218 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d11b      	bne.n	8003218 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0210 	mvn.w	r2, #16
 80031e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2208      	movs	r2, #8
 80031ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f9f1 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 8003204:	e005      	b.n	8003212 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f9e4 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f9f3 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d10e      	bne.n	8003244 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b01      	cmp	r3, #1
 8003232:	d107      	bne.n	8003244 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0201 	mvn.w	r2, #1
 800323c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fe f926 	bl	8001490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324e:	2b80      	cmp	r3, #128	; 0x80
 8003250:	d10e      	bne.n	8003270 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325c:	2b80      	cmp	r3, #128	; 0x80
 800325e:	d107      	bne.n	8003270 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fce1 	bl	8003c32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b40      	cmp	r3, #64	; 0x40
 800327c:	d10e      	bne.n	800329c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d107      	bne.n	800329c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f9b7 	bl	800360a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d10e      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d107      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0220 	mvn.w	r2, #32
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fcac 	bl	8003c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e0ac      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x174>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	f200 809f 	bhi.w	8003438 <HAL_TIM_PWM_ConfigChannel+0x168>
 80032fa:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	08003335 	.word	0x08003335
 8003304:	08003439 	.word	0x08003439
 8003308:	08003439 	.word	0x08003439
 800330c:	08003439 	.word	0x08003439
 8003310:	08003375 	.word	0x08003375
 8003314:	08003439 	.word	0x08003439
 8003318:	08003439 	.word	0x08003439
 800331c:	08003439 	.word	0x08003439
 8003320:	080033b7 	.word	0x080033b7
 8003324:	08003439 	.word	0x08003439
 8003328:	08003439 	.word	0x08003439
 800332c:	08003439 	.word	0x08003439
 8003330:	080033f7 	.word	0x080033f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f9d0 	bl	80036e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0208 	orr.w	r2, r2, #8
 800334e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0204 	bic.w	r2, r2, #4
 800335e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6999      	ldr	r1, [r3, #24]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	619a      	str	r2, [r3, #24]
      break;
 8003372:	e062      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fa16 	bl	80037ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800338e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6999      	ldr	r1, [r3, #24]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	021a      	lsls	r2, r3, #8
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	619a      	str	r2, [r3, #24]
      break;
 80033b4:	e041      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fa5f 	bl	8003880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0208 	orr.w	r2, r2, #8
 80033d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0204 	bic.w	r2, r2, #4
 80033e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69d9      	ldr	r1, [r3, #28]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	61da      	str	r2, [r3, #28]
      break;
 80033f4:	e021      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 faa9 	bl	8003954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69d9      	ldr	r1, [r3, #28]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	021a      	lsls	r2, r3, #8
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	61da      	str	r2, [r3, #28]
      break;
 8003436:	e000      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003438:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_TIM_ConfigClockSource+0x18>
 8003460:	2302      	movs	r3, #2
 8003462:	e0b3      	b.n	80035cc <HAL_TIM_ConfigClockSource+0x180>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003482:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800348a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349c:	d03e      	beq.n	800351c <HAL_TIM_ConfigClockSource+0xd0>
 800349e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a2:	f200 8087 	bhi.w	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034aa:	f000 8085 	beq.w	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b2:	d87f      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034b4:	2b70      	cmp	r3, #112	; 0x70
 80034b6:	d01a      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0xa2>
 80034b8:	2b70      	cmp	r3, #112	; 0x70
 80034ba:	d87b      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034bc:	2b60      	cmp	r3, #96	; 0x60
 80034be:	d050      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x116>
 80034c0:	2b60      	cmp	r3, #96	; 0x60
 80034c2:	d877      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034c4:	2b50      	cmp	r3, #80	; 0x50
 80034c6:	d03c      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0xf6>
 80034c8:	2b50      	cmp	r3, #80	; 0x50
 80034ca:	d873      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	d058      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x136>
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d86f      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034d4:	2b30      	cmp	r3, #48	; 0x30
 80034d6:	d064      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x156>
 80034d8:	2b30      	cmp	r3, #48	; 0x30
 80034da:	d86b      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d060      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x156>
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d867      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d05c      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x156>
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d05a      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034ec:	e062      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6899      	ldr	r1, [r3, #8]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f000 faee 	bl	8003ade <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003510:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	609a      	str	r2, [r3, #8]
      break;
 800351a:	e04e      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f000 fad7 	bl	8003ade <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800353e:	609a      	str	r2, [r3, #8]
      break;
 8003540:	e03b      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6859      	ldr	r1, [r3, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	461a      	mov	r2, r3
 8003550:	f000 fa4e 	bl	80039f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2150      	movs	r1, #80	; 0x50
 800355a:	4618      	mov	r0, r3
 800355c:	f000 faa5 	bl	8003aaa <TIM_ITRx_SetConfig>
      break;
 8003560:	e02b      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6859      	ldr	r1, [r3, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	461a      	mov	r2, r3
 8003570:	f000 fa6c 	bl	8003a4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2160      	movs	r1, #96	; 0x60
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fa95 	bl	8003aaa <TIM_ITRx_SetConfig>
      break;
 8003580:	e01b      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	461a      	mov	r2, r3
 8003590:	f000 fa2e 	bl	80039f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2140      	movs	r1, #64	; 0x40
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fa85 	bl	8003aaa <TIM_ITRx_SetConfig>
      break;
 80035a0:	e00b      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f000 fa7c 	bl	8003aaa <TIM_ITRx_SetConfig>
        break;
 80035b2:	e002      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035b4:	bf00      	nop
 80035b6:	e000      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a29      	ldr	r2, [pc, #164]	; (80036d4 <TIM_Base_SetConfig+0xb8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00b      	beq.n	800364c <TIM_Base_SetConfig+0x30>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d007      	beq.n	800364c <TIM_Base_SetConfig+0x30>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a26      	ldr	r2, [pc, #152]	; (80036d8 <TIM_Base_SetConfig+0xbc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_Base_SetConfig+0x30>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a25      	ldr	r2, [pc, #148]	; (80036dc <TIM_Base_SetConfig+0xc0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d108      	bne.n	800365e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a1c      	ldr	r2, [pc, #112]	; (80036d4 <TIM_Base_SetConfig+0xb8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00b      	beq.n	800367e <TIM_Base_SetConfig+0x62>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d007      	beq.n	800367e <TIM_Base_SetConfig+0x62>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a19      	ldr	r2, [pc, #100]	; (80036d8 <TIM_Base_SetConfig+0xbc>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_Base_SetConfig+0x62>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a18      	ldr	r2, [pc, #96]	; (80036dc <TIM_Base_SetConfig+0xc0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d108      	bne.n	8003690 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a07      	ldr	r2, [pc, #28]	; (80036d4 <TIM_Base_SetConfig+0xb8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d103      	bne.n	80036c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	615a      	str	r2, [r3, #20]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	40012c00 	.word	0x40012c00
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000800 	.word	0x40000800

080036e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	f023 0201 	bic.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f023 0302 	bic.w	r3, r3, #2
 8003728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <TIM_OC1_SetConfig+0xc8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d10c      	bne.n	8003756 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f023 0308 	bic.w	r3, r3, #8
 8003742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f023 0304 	bic.w	r3, r3, #4
 8003754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a13      	ldr	r2, [pc, #76]	; (80037a8 <TIM_OC1_SetConfig+0xc8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d111      	bne.n	8003782 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800376c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	621a      	str	r2, [r3, #32]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40012c00 	.word	0x40012c00

080037ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 0210 	bic.w	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0320 	bic.w	r3, r3, #32
 80037f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a1d      	ldr	r2, [pc, #116]	; (800387c <TIM_OC2_SetConfig+0xd0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d10d      	bne.n	8003828 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a14      	ldr	r2, [pc, #80]	; (800387c <TIM_OC2_SetConfig+0xd0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d113      	bne.n	8003858 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800383e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00

08003880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <TIM_OC3_SetConfig+0xd0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10d      	bne.n	80038fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a14      	ldr	r2, [pc, #80]	; (8003950 <TIM_OC3_SetConfig+0xd0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d113      	bne.n	800392a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	621a      	str	r2, [r3, #32]
}
 8003944:	bf00      	nop
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40012c00 	.word	0x40012c00

08003954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800399e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	031b      	lsls	r3, r3, #12
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a0f      	ldr	r2, [pc, #60]	; (80039ec <TIM_OC4_SetConfig+0x98>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d109      	bne.n	80039c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	019b      	lsls	r3, r3, #6
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr
 80039ec:	40012c00 	.word	0x40012c00

080039f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f023 0201 	bic.w	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 030a 	bic.w	r3, r3, #10
 8003a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	621a      	str	r2, [r3, #32]
}
 8003a42:	bf00      	nop
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f023 0210 	bic.w	r2, r3, #16
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	031b      	lsls	r3, r3, #12
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	621a      	str	r2, [r3, #32]
}
 8003aa0:	bf00      	nop
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f043 0307 	orr.w	r3, r3, #7
 8003acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	609a      	str	r2, [r3, #8]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr

08003ade <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b087      	sub	sp, #28
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003af8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	021a      	lsls	r2, r3, #8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	609a      	str	r2, [r3, #8]
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr

08003b1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2201      	movs	r2, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1a      	ldr	r2, [r3, #32]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	401a      	ands	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	fa01 f303 	lsl.w	r3, r1, r3
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e046      	b.n	8003c0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00e      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc8:	d009      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a10      	ldr	r2, [pc, #64]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40000800 	.word	0x40000800

08003c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e03f      	b.n	8003cd6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fd fdda 	bl	8001824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2224      	movs	r2, #36	; 0x24
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fc85 	bl	8004598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b08a      	sub	sp, #40	; 0x28
 8003ce2:	af02      	add	r7, sp, #8
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d17c      	bne.n	8003df8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_UART_Transmit+0x2c>
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e075      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_UART_Transmit+0x3e>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e06e      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2221      	movs	r2, #33	; 0x21
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d32:	f7fd ff45 	bl	8001bc0 <HAL_GetTick>
 8003d36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	88fa      	ldrh	r2, [r7, #6]
 8003d3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d108      	bne.n	8003d60 <HAL_UART_Transmit+0x82>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	e003      	b.n	8003d68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d70:	e02a      	b.n	8003dc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fa38 	bl	80041f2 <UART_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e036      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	3302      	adds	r3, #2
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	e007      	b.n	8003dba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	781a      	ldrb	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	3301      	adds	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1cf      	bne.n	8003d72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2140      	movs	r1, #64	; 0x40
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fa08 	bl	80041f2 <UART_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e006      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e000      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
  }
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d11d      	bne.n	8003e58 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_UART_Receive_IT+0x26>
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e016      	b.n	8003e5a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_UART_Receive_IT+0x38>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e00f      	b.n	8003e5a <HAL_UART_Receive_IT+0x58>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fa19 	bl	8004286 <UART_Start_Receive_IT>
 8003e54:	4603      	mov	r3, r0
 8003e56:	e000      	b.n	8003e5a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10d      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x52>
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fac9 	bl	8004446 <UART_Receive_IT>
      return;
 8003eb4:	e17b      	b.n	80041ae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80b1 	beq.w	8004020 <HAL_UART_IRQHandler+0x1bc>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x70>
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 80a6 	beq.w	8004020 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x90>
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	f043 0201 	orr.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_UART_IRQHandler+0xb0>
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	f043 0202 	orr.w	r2, r3, #2
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_UART_IRQHandler+0xd0>
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f043 0204 	orr.w	r2, r3, #4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00f      	beq.n	8003f5e <HAL_UART_IRQHandler+0xfa>
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d104      	bne.n	8003f52 <HAL_UART_IRQHandler+0xee>
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f043 0208 	orr.w	r2, r3, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 811e 	beq.w	80041a4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <HAL_UART_IRQHandler+0x11e>
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fa62 	bl	8004446 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf14      	ite	ne
 8003f90:	2301      	movne	r3, #1
 8003f92:	2300      	moveq	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <HAL_UART_IRQHandler+0x146>
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d031      	beq.n	800400e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f9a4 	bl	80042f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d023      	beq.n	8004006 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fcc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d013      	beq.n	8003ffe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	4a76      	ldr	r2, [pc, #472]	; (80041b4 <HAL_UART_IRQHandler+0x350>)
 8003fdc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd ff3e 	bl	8001e64 <HAL_DMA_Abort_IT>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d016      	beq.n	800401c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	e00e      	b.n	800401c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8e3 	bl	80041ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004004:	e00a      	b.n	800401c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8df 	bl	80041ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400c:	e006      	b.n	800401c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f8db 	bl	80041ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800401a:	e0c3      	b.n	80041a4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401c:	bf00      	nop
    return;
 800401e:	e0c1      	b.n	80041a4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	2b01      	cmp	r3, #1
 8004026:	f040 80a1 	bne.w	800416c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 809b 	beq.w	800416c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8095 	beq.w	800416c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d04e      	beq.n	8004104 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004070:	8a3b      	ldrh	r3, [r7, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8098 	beq.w	80041a8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800407c:	8a3a      	ldrh	r2, [r7, #16]
 800407e:	429a      	cmp	r2, r3
 8004080:	f080 8092 	bcs.w	80041a8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8a3a      	ldrh	r2, [r7, #16]
 8004088:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	2b20      	cmp	r3, #32
 8004092:	d02b      	beq.n	80040ec <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040a2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0201 	bic.w	r2, r2, #1
 80040b2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0210 	bic.w	r2, r2, #16
 80040e0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fd fe81 	bl	8001dee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f86d 	bl	80041dc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004102:	e051      	b.n	80041a8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800410c:	b29b      	uxth	r3, r3
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d047      	beq.n	80041ac <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800411c:	8a7b      	ldrh	r3, [r7, #18]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d044      	beq.n	80041ac <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004130:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0201 	bic.w	r2, r2, #1
 8004140:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0210 	bic.w	r2, r2, #16
 800415e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004160:	8a7b      	ldrh	r3, [r7, #18]
 8004162:	4619      	mov	r1, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f839 	bl	80041dc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800416a:	e01f      	b.n	80041ac <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_UART_IRQHandler+0x324>
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f8f9 	bl	8004378 <UART_Transmit_IT>
    return;
 8004186:	e012      	b.n	80041ae <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00d      	beq.n	80041ae <HAL_UART_IRQHandler+0x34a>
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f93a 	bl	8004416 <UART_EndTransmit_IT>
    return;
 80041a2:	e004      	b.n	80041ae <HAL_UART_IRQHandler+0x34a>
    return;
 80041a4:	bf00      	nop
 80041a6:	e002      	b.n	80041ae <HAL_UART_IRQHandler+0x34a>
      return;
 80041a8:	bf00      	nop
 80041aa:	e000      	b.n	80041ae <HAL_UART_IRQHandler+0x34a>
      return;
 80041ac:	bf00      	nop
  }
}
 80041ae:	3728      	adds	r7, #40	; 0x28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	08004351 	.word	0x08004351

080041b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr

080041ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr

080041f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004202:	e02c      	b.n	800425e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d028      	beq.n	800425e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <UART_WaitOnFlagUntilTimeout+0x30>
 8004212:	f7fd fcd5 	bl	8001bc0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	429a      	cmp	r2, r3
 8004220:	d21d      	bcs.n	800425e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004230:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e00f      	b.n	800427e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4013      	ands	r3, r2
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	429a      	cmp	r2, r3
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	429a      	cmp	r2, r3
 800427a:	d0c3      	beq.n	8004204 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	4613      	mov	r3, r2
 8004292:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	88fa      	ldrh	r2, [r7, #6]
 800429e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2222      	movs	r2, #34	; 0x22
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ca:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0220 	orr.w	r2, r2, #32
 80042ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800430e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	2b01      	cmp	r3, #1
 8004326:	d107      	bne.n	8004338 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0210 	bic.w	r2, r2, #16
 8004336:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff ff2d 	bl	80041ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b21      	cmp	r3, #33	; 0x21
 800438a:	d13e      	bne.n	800440a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004394:	d114      	bne.n	80043c0 <UART_Transmit_IT+0x48>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d110      	bne.n	80043c0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	1c9a      	adds	r2, r3, #2
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]
 80043be:	e008      	b.n	80043d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	1c59      	adds	r1, r3, #1
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6211      	str	r1, [r2, #32]
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29b      	uxth	r3, r3
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	4619      	mov	r1, r3
 80043e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10f      	bne.n	8004406 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004404:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
  }
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff febe 	bl	80041b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b086      	sub	sp, #24
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b22      	cmp	r3, #34	; 0x22
 8004458:	f040 8099 	bne.w	800458e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004464:	d117      	bne.n	8004496 <UART_Receive_IT+0x50>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d113      	bne.n	8004496 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	b29b      	uxth	r3, r3
 8004480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004484:	b29a      	uxth	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	1c9a      	adds	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	629a      	str	r2, [r3, #40]	; 0x28
 8004494:	e026      	b.n	80044e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800449c:	2300      	movs	r3, #0
 800449e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a8:	d007      	beq.n	80044ba <UART_Receive_IT+0x74>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <UART_Receive_IT+0x82>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	e008      	b.n	80044da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	4619      	mov	r1, r3
 80044f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d148      	bne.n	800458a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0220 	bic.w	r2, r2, #32
 8004506:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004516:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	2b01      	cmp	r3, #1
 8004536:	d123      	bne.n	8004580 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0210 	bic.w	r2, r2, #16
 800454c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d10a      	bne.n	8004572 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fe2f 	bl	80041dc <HAL_UARTEx_RxEventCallback>
 800457e:	e002      	b.n	8004586 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fd f83d 	bl	8001600 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e002      	b.n	8004590 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045d2:	f023 030c 	bic.w	r3, r3, #12
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	430b      	orrs	r3, r1
 80045de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a2c      	ldr	r2, [pc, #176]	; (80046ac <UART_SetConfig+0x114>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d103      	bne.n	8004608 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004600:	f7fe fb90 	bl	8002d24 <HAL_RCC_GetPCLK2Freq>
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	e002      	b.n	800460e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004608:	f7fe fb78 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 800460c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009a      	lsls	r2, r3, #2
 8004618:	441a      	add	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	4a22      	ldr	r2, [pc, #136]	; (80046b0 <UART_SetConfig+0x118>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	0119      	lsls	r1, r3, #4
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009a      	lsls	r2, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	fbb2 f2f3 	udiv	r2, r2, r3
 8004644:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <UART_SetConfig+0x118>)
 8004646:	fba3 0302 	umull	r0, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	2064      	movs	r0, #100	; 0x64
 800464e:	fb00 f303 	mul.w	r3, r0, r3
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	3332      	adds	r3, #50	; 0x32
 8004658:	4a15      	ldr	r2, [pc, #84]	; (80046b0 <UART_SetConfig+0x118>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004664:	4419      	add	r1, r3
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	009a      	lsls	r2, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	fbb2 f2f3 	udiv	r2, r2, r3
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <UART_SetConfig+0x118>)
 800467e:	fba3 0302 	umull	r0, r3, r3, r2
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2064      	movs	r0, #100	; 0x64
 8004686:	fb00 f303 	mul.w	r3, r0, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	3332      	adds	r3, #50	; 0x32
 8004690:	4a07      	ldr	r2, [pc, #28]	; (80046b0 <UART_SetConfig+0x118>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	f003 020f 	and.w	r2, r3, #15
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	440a      	add	r2, r1
 80046a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40013800 	.word	0x40013800
 80046b0:	51eb851f 	.word	0x51eb851f

080046b4 <arm_pid_init_f32>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	4604      	mov	r4, r0
 80046b8:	6986      	ldr	r6, [r0, #24]
 80046ba:	6a05      	ldr	r5, [r0, #32]
 80046bc:	460f      	mov	r7, r1
 80046be:	4630      	mov	r0, r6
 80046c0:	69e1      	ldr	r1, [r4, #28]
 80046c2:	f7fc fb0b 	bl	8000cdc <__addsf3>
 80046c6:	4629      	mov	r1, r5
 80046c8:	f7fc fb08 	bl	8000cdc <__addsf3>
 80046cc:	4629      	mov	r1, r5
 80046ce:	6020      	str	r0, [r4, #0]
 80046d0:	4628      	mov	r0, r5
 80046d2:	f7fc fb03 	bl	8000cdc <__addsf3>
 80046d6:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80046da:	4601      	mov	r1, r0
 80046dc:	4630      	mov	r0, r6
 80046de:	f7fc fafb 	bl	8000cd8 <__aeabi_fsub>
 80046e2:	60a5      	str	r5, [r4, #8]
 80046e4:	6060      	str	r0, [r4, #4]
 80046e6:	b907      	cbnz	r7, 80046ea <arm_pid_init_f32+0x36>
 80046e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ea:	2300      	movs	r3, #0
 80046ec:	60e3      	str	r3, [r4, #12]
 80046ee:	6123      	str	r3, [r4, #16]
 80046f0:	6163      	str	r3, [r4, #20]
 80046f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080046f4 <atof>:
 80046f4:	2100      	movs	r1, #0
 80046f6:	f001 bad3 	b.w	8005ca0 <strtod>
	...

080046fc <__errno>:
 80046fc:	4b01      	ldr	r3, [pc, #4]	; (8004704 <__errno+0x8>)
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	20000014 	.word	0x20000014

08004708 <__libc_init_array>:
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	2600      	movs	r6, #0
 800470c:	4d0c      	ldr	r5, [pc, #48]	; (8004740 <__libc_init_array+0x38>)
 800470e:	4c0d      	ldr	r4, [pc, #52]	; (8004744 <__libc_init_array+0x3c>)
 8004710:	1b64      	subs	r4, r4, r5
 8004712:	10a4      	asrs	r4, r4, #2
 8004714:	42a6      	cmp	r6, r4
 8004716:	d109      	bne.n	800472c <__libc_init_array+0x24>
 8004718:	f004 f9dc 	bl	8008ad4 <_init>
 800471c:	2600      	movs	r6, #0
 800471e:	4d0a      	ldr	r5, [pc, #40]	; (8004748 <__libc_init_array+0x40>)
 8004720:	4c0a      	ldr	r4, [pc, #40]	; (800474c <__libc_init_array+0x44>)
 8004722:	1b64      	subs	r4, r4, r5
 8004724:	10a4      	asrs	r4, r4, #2
 8004726:	42a6      	cmp	r6, r4
 8004728:	d105      	bne.n	8004736 <__libc_init_array+0x2e>
 800472a:	bd70      	pop	{r4, r5, r6, pc}
 800472c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004730:	4798      	blx	r3
 8004732:	3601      	adds	r6, #1
 8004734:	e7ee      	b.n	8004714 <__libc_init_array+0xc>
 8004736:	f855 3b04 	ldr.w	r3, [r5], #4
 800473a:	4798      	blx	r3
 800473c:	3601      	adds	r6, #1
 800473e:	e7f2      	b.n	8004726 <__libc_init_array+0x1e>
 8004740:	08008ffc 	.word	0x08008ffc
 8004744:	08008ffc 	.word	0x08008ffc
 8004748:	08008ffc 	.word	0x08008ffc
 800474c:	08009000 	.word	0x08009000

08004750 <memset>:
 8004750:	4603      	mov	r3, r0
 8004752:	4402      	add	r2, r0
 8004754:	4293      	cmp	r3, r2
 8004756:	d100      	bne.n	800475a <memset+0xa>
 8004758:	4770      	bx	lr
 800475a:	f803 1b01 	strb.w	r1, [r3], #1
 800475e:	e7f9      	b.n	8004754 <memset+0x4>

08004760 <__cvt>:
 8004760:	2b00      	cmp	r3, #0
 8004762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004766:	461f      	mov	r7, r3
 8004768:	bfbb      	ittet	lt
 800476a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800476e:	461f      	movlt	r7, r3
 8004770:	2300      	movge	r3, #0
 8004772:	232d      	movlt	r3, #45	; 0x2d
 8004774:	b088      	sub	sp, #32
 8004776:	4614      	mov	r4, r2
 8004778:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800477a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800477c:	7013      	strb	r3, [r2, #0]
 800477e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004780:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004784:	f023 0820 	bic.w	r8, r3, #32
 8004788:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800478c:	d005      	beq.n	800479a <__cvt+0x3a>
 800478e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004792:	d100      	bne.n	8004796 <__cvt+0x36>
 8004794:	3501      	adds	r5, #1
 8004796:	2302      	movs	r3, #2
 8004798:	e000      	b.n	800479c <__cvt+0x3c>
 800479a:	2303      	movs	r3, #3
 800479c:	aa07      	add	r2, sp, #28
 800479e:	9204      	str	r2, [sp, #16]
 80047a0:	aa06      	add	r2, sp, #24
 80047a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80047a6:	e9cd 3500 	strd	r3, r5, [sp]
 80047aa:	4622      	mov	r2, r4
 80047ac:	463b      	mov	r3, r7
 80047ae:	f001 fb0f 	bl	8005dd0 <_dtoa_r>
 80047b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047b6:	4606      	mov	r6, r0
 80047b8:	d102      	bne.n	80047c0 <__cvt+0x60>
 80047ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047bc:	07db      	lsls	r3, r3, #31
 80047be:	d522      	bpl.n	8004806 <__cvt+0xa6>
 80047c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047c4:	eb06 0905 	add.w	r9, r6, r5
 80047c8:	d110      	bne.n	80047ec <__cvt+0x8c>
 80047ca:	7833      	ldrb	r3, [r6, #0]
 80047cc:	2b30      	cmp	r3, #48	; 0x30
 80047ce:	d10a      	bne.n	80047e6 <__cvt+0x86>
 80047d0:	2200      	movs	r2, #0
 80047d2:	2300      	movs	r3, #0
 80047d4:	4620      	mov	r0, r4
 80047d6:	4639      	mov	r1, r7
 80047d8:	f7fc f99a 	bl	8000b10 <__aeabi_dcmpeq>
 80047dc:	b918      	cbnz	r0, 80047e6 <__cvt+0x86>
 80047de:	f1c5 0501 	rsb	r5, r5, #1
 80047e2:	f8ca 5000 	str.w	r5, [sl]
 80047e6:	f8da 3000 	ldr.w	r3, [sl]
 80047ea:	4499      	add	r9, r3
 80047ec:	2200      	movs	r2, #0
 80047ee:	2300      	movs	r3, #0
 80047f0:	4620      	mov	r0, r4
 80047f2:	4639      	mov	r1, r7
 80047f4:	f7fc f98c 	bl	8000b10 <__aeabi_dcmpeq>
 80047f8:	b108      	cbz	r0, 80047fe <__cvt+0x9e>
 80047fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80047fe:	2230      	movs	r2, #48	; 0x30
 8004800:	9b07      	ldr	r3, [sp, #28]
 8004802:	454b      	cmp	r3, r9
 8004804:	d307      	bcc.n	8004816 <__cvt+0xb6>
 8004806:	4630      	mov	r0, r6
 8004808:	9b07      	ldr	r3, [sp, #28]
 800480a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800480c:	1b9b      	subs	r3, r3, r6
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	b008      	add	sp, #32
 8004812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004816:	1c59      	adds	r1, r3, #1
 8004818:	9107      	str	r1, [sp, #28]
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e7f0      	b.n	8004800 <__cvt+0xa0>

0800481e <__exponent>:
 800481e:	4603      	mov	r3, r0
 8004820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004822:	2900      	cmp	r1, #0
 8004824:	f803 2b02 	strb.w	r2, [r3], #2
 8004828:	bfb6      	itet	lt
 800482a:	222d      	movlt	r2, #45	; 0x2d
 800482c:	222b      	movge	r2, #43	; 0x2b
 800482e:	4249      	neglt	r1, r1
 8004830:	2909      	cmp	r1, #9
 8004832:	7042      	strb	r2, [r0, #1]
 8004834:	dd2b      	ble.n	800488e <__exponent+0x70>
 8004836:	f10d 0407 	add.w	r4, sp, #7
 800483a:	46a4      	mov	ip, r4
 800483c:	270a      	movs	r7, #10
 800483e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004842:	460a      	mov	r2, r1
 8004844:	46a6      	mov	lr, r4
 8004846:	fb07 1516 	mls	r5, r7, r6, r1
 800484a:	2a63      	cmp	r2, #99	; 0x63
 800484c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004850:	4631      	mov	r1, r6
 8004852:	f104 34ff 	add.w	r4, r4, #4294967295
 8004856:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800485a:	dcf0      	bgt.n	800483e <__exponent+0x20>
 800485c:	3130      	adds	r1, #48	; 0x30
 800485e:	f1ae 0502 	sub.w	r5, lr, #2
 8004862:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004866:	4629      	mov	r1, r5
 8004868:	1c44      	adds	r4, r0, #1
 800486a:	4561      	cmp	r1, ip
 800486c:	d30a      	bcc.n	8004884 <__exponent+0x66>
 800486e:	f10d 0209 	add.w	r2, sp, #9
 8004872:	eba2 020e 	sub.w	r2, r2, lr
 8004876:	4565      	cmp	r5, ip
 8004878:	bf88      	it	hi
 800487a:	2200      	movhi	r2, #0
 800487c:	4413      	add	r3, r2
 800487e:	1a18      	subs	r0, r3, r0
 8004880:	b003      	add	sp, #12
 8004882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004884:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004888:	f804 2f01 	strb.w	r2, [r4, #1]!
 800488c:	e7ed      	b.n	800486a <__exponent+0x4c>
 800488e:	2330      	movs	r3, #48	; 0x30
 8004890:	3130      	adds	r1, #48	; 0x30
 8004892:	7083      	strb	r3, [r0, #2]
 8004894:	70c1      	strb	r1, [r0, #3]
 8004896:	1d03      	adds	r3, r0, #4
 8004898:	e7f1      	b.n	800487e <__exponent+0x60>
	...

0800489c <_printf_float>:
 800489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a0:	b091      	sub	sp, #68	; 0x44
 80048a2:	460c      	mov	r4, r1
 80048a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80048a8:	4616      	mov	r6, r2
 80048aa:	461f      	mov	r7, r3
 80048ac:	4605      	mov	r5, r0
 80048ae:	f002 fbe3 	bl	8007078 <_localeconv_r>
 80048b2:	6803      	ldr	r3, [r0, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	9309      	str	r3, [sp, #36]	; 0x24
 80048b8:	f7fb fc4a 	bl	8000150 <strlen>
 80048bc:	2300      	movs	r3, #0
 80048be:	930e      	str	r3, [sp, #56]	; 0x38
 80048c0:	f8d8 3000 	ldr.w	r3, [r8]
 80048c4:	900a      	str	r0, [sp, #40]	; 0x28
 80048c6:	3307      	adds	r3, #7
 80048c8:	f023 0307 	bic.w	r3, r3, #7
 80048cc:	f103 0208 	add.w	r2, r3, #8
 80048d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80048d4:	f8d4 b000 	ldr.w	fp, [r4]
 80048d8:	f8c8 2000 	str.w	r2, [r8]
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80048e4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80048e8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80048ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80048ee:	f04f 32ff 	mov.w	r2, #4294967295
 80048f2:	4640      	mov	r0, r8
 80048f4:	4b9c      	ldr	r3, [pc, #624]	; (8004b68 <_printf_float+0x2cc>)
 80048f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048f8:	f7fc f93c 	bl	8000b74 <__aeabi_dcmpun>
 80048fc:	bb70      	cbnz	r0, 800495c <_printf_float+0xc0>
 80048fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004902:	4640      	mov	r0, r8
 8004904:	4b98      	ldr	r3, [pc, #608]	; (8004b68 <_printf_float+0x2cc>)
 8004906:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004908:	f7fc f916 	bl	8000b38 <__aeabi_dcmple>
 800490c:	bb30      	cbnz	r0, 800495c <_printf_float+0xc0>
 800490e:	2200      	movs	r2, #0
 8004910:	2300      	movs	r3, #0
 8004912:	4640      	mov	r0, r8
 8004914:	4651      	mov	r1, sl
 8004916:	f7fc f905 	bl	8000b24 <__aeabi_dcmplt>
 800491a:	b110      	cbz	r0, 8004922 <_printf_float+0x86>
 800491c:	232d      	movs	r3, #45	; 0x2d
 800491e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004922:	4b92      	ldr	r3, [pc, #584]	; (8004b6c <_printf_float+0x2d0>)
 8004924:	4892      	ldr	r0, [pc, #584]	; (8004b70 <_printf_float+0x2d4>)
 8004926:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800492a:	bf94      	ite	ls
 800492c:	4698      	movls	r8, r3
 800492e:	4680      	movhi	r8, r0
 8004930:	2303      	movs	r3, #3
 8004932:	f04f 0a00 	mov.w	sl, #0
 8004936:	6123      	str	r3, [r4, #16]
 8004938:	f02b 0304 	bic.w	r3, fp, #4
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	4633      	mov	r3, r6
 8004940:	4621      	mov	r1, r4
 8004942:	4628      	mov	r0, r5
 8004944:	9700      	str	r7, [sp, #0]
 8004946:	aa0f      	add	r2, sp, #60	; 0x3c
 8004948:	f000 f9d4 	bl	8004cf4 <_printf_common>
 800494c:	3001      	adds	r0, #1
 800494e:	f040 8090 	bne.w	8004a72 <_printf_float+0x1d6>
 8004952:	f04f 30ff 	mov.w	r0, #4294967295
 8004956:	b011      	add	sp, #68	; 0x44
 8004958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800495c:	4642      	mov	r2, r8
 800495e:	4653      	mov	r3, sl
 8004960:	4640      	mov	r0, r8
 8004962:	4651      	mov	r1, sl
 8004964:	f7fc f906 	bl	8000b74 <__aeabi_dcmpun>
 8004968:	b148      	cbz	r0, 800497e <_printf_float+0xe2>
 800496a:	f1ba 0f00 	cmp.w	sl, #0
 800496e:	bfb8      	it	lt
 8004970:	232d      	movlt	r3, #45	; 0x2d
 8004972:	4880      	ldr	r0, [pc, #512]	; (8004b74 <_printf_float+0x2d8>)
 8004974:	bfb8      	it	lt
 8004976:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800497a:	4b7f      	ldr	r3, [pc, #508]	; (8004b78 <_printf_float+0x2dc>)
 800497c:	e7d3      	b.n	8004926 <_printf_float+0x8a>
 800497e:	6863      	ldr	r3, [r4, #4]
 8004980:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	d142      	bne.n	8004a0e <_printf_float+0x172>
 8004988:	2306      	movs	r3, #6
 800498a:	6063      	str	r3, [r4, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	9206      	str	r2, [sp, #24]
 8004990:	aa0e      	add	r2, sp, #56	; 0x38
 8004992:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004996:	aa0d      	add	r2, sp, #52	; 0x34
 8004998:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800499c:	9203      	str	r2, [sp, #12]
 800499e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80049a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80049a6:	6023      	str	r3, [r4, #0]
 80049a8:	6863      	ldr	r3, [r4, #4]
 80049aa:	4642      	mov	r2, r8
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	4628      	mov	r0, r5
 80049b0:	4653      	mov	r3, sl
 80049b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80049b4:	f7ff fed4 	bl	8004760 <__cvt>
 80049b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049ba:	4680      	mov	r8, r0
 80049bc:	2947      	cmp	r1, #71	; 0x47
 80049be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80049c0:	d108      	bne.n	80049d4 <_printf_float+0x138>
 80049c2:	1cc8      	adds	r0, r1, #3
 80049c4:	db02      	blt.n	80049cc <_printf_float+0x130>
 80049c6:	6863      	ldr	r3, [r4, #4]
 80049c8:	4299      	cmp	r1, r3
 80049ca:	dd40      	ble.n	8004a4e <_printf_float+0x1b2>
 80049cc:	f1a9 0902 	sub.w	r9, r9, #2
 80049d0:	fa5f f989 	uxtb.w	r9, r9
 80049d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80049d8:	d81f      	bhi.n	8004a1a <_printf_float+0x17e>
 80049da:	464a      	mov	r2, r9
 80049dc:	3901      	subs	r1, #1
 80049de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049e2:	910d      	str	r1, [sp, #52]	; 0x34
 80049e4:	f7ff ff1b 	bl	800481e <__exponent>
 80049e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049ea:	4682      	mov	sl, r0
 80049ec:	1813      	adds	r3, r2, r0
 80049ee:	2a01      	cmp	r2, #1
 80049f0:	6123      	str	r3, [r4, #16]
 80049f2:	dc02      	bgt.n	80049fa <_printf_float+0x15e>
 80049f4:	6822      	ldr	r2, [r4, #0]
 80049f6:	07d2      	lsls	r2, r2, #31
 80049f8:	d501      	bpl.n	80049fe <_printf_float+0x162>
 80049fa:	3301      	adds	r3, #1
 80049fc:	6123      	str	r3, [r4, #16]
 80049fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d09b      	beq.n	800493e <_printf_float+0xa2>
 8004a06:	232d      	movs	r3, #45	; 0x2d
 8004a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a0c:	e797      	b.n	800493e <_printf_float+0xa2>
 8004a0e:	2947      	cmp	r1, #71	; 0x47
 8004a10:	d1bc      	bne.n	800498c <_printf_float+0xf0>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1ba      	bne.n	800498c <_printf_float+0xf0>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e7b7      	b.n	800498a <_printf_float+0xee>
 8004a1a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004a1e:	d118      	bne.n	8004a52 <_printf_float+0x1b6>
 8004a20:	2900      	cmp	r1, #0
 8004a22:	6863      	ldr	r3, [r4, #4]
 8004a24:	dd0b      	ble.n	8004a3e <_printf_float+0x1a2>
 8004a26:	6121      	str	r1, [r4, #16]
 8004a28:	b913      	cbnz	r3, 8004a30 <_printf_float+0x194>
 8004a2a:	6822      	ldr	r2, [r4, #0]
 8004a2c:	07d0      	lsls	r0, r2, #31
 8004a2e:	d502      	bpl.n	8004a36 <_printf_float+0x19a>
 8004a30:	3301      	adds	r3, #1
 8004a32:	440b      	add	r3, r1
 8004a34:	6123      	str	r3, [r4, #16]
 8004a36:	f04f 0a00 	mov.w	sl, #0
 8004a3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a3c:	e7df      	b.n	80049fe <_printf_float+0x162>
 8004a3e:	b913      	cbnz	r3, 8004a46 <_printf_float+0x1aa>
 8004a40:	6822      	ldr	r2, [r4, #0]
 8004a42:	07d2      	lsls	r2, r2, #31
 8004a44:	d501      	bpl.n	8004a4a <_printf_float+0x1ae>
 8004a46:	3302      	adds	r3, #2
 8004a48:	e7f4      	b.n	8004a34 <_printf_float+0x198>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e7f2      	b.n	8004a34 <_printf_float+0x198>
 8004a4e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a54:	4299      	cmp	r1, r3
 8004a56:	db05      	blt.n	8004a64 <_printf_float+0x1c8>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	6121      	str	r1, [r4, #16]
 8004a5c:	07d8      	lsls	r0, r3, #31
 8004a5e:	d5ea      	bpl.n	8004a36 <_printf_float+0x19a>
 8004a60:	1c4b      	adds	r3, r1, #1
 8004a62:	e7e7      	b.n	8004a34 <_printf_float+0x198>
 8004a64:	2900      	cmp	r1, #0
 8004a66:	bfcc      	ite	gt
 8004a68:	2201      	movgt	r2, #1
 8004a6a:	f1c1 0202 	rsble	r2, r1, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	e7e0      	b.n	8004a34 <_printf_float+0x198>
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	055a      	lsls	r2, r3, #21
 8004a76:	d407      	bmi.n	8004a88 <_printf_float+0x1ec>
 8004a78:	6923      	ldr	r3, [r4, #16]
 8004a7a:	4642      	mov	r2, r8
 8004a7c:	4631      	mov	r1, r6
 8004a7e:	4628      	mov	r0, r5
 8004a80:	47b8      	blx	r7
 8004a82:	3001      	adds	r0, #1
 8004a84:	d12b      	bne.n	8004ade <_printf_float+0x242>
 8004a86:	e764      	b.n	8004952 <_printf_float+0xb6>
 8004a88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a8c:	f240 80dd 	bls.w	8004c4a <_printf_float+0x3ae>
 8004a90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a94:	2200      	movs	r2, #0
 8004a96:	2300      	movs	r3, #0
 8004a98:	f7fc f83a 	bl	8000b10 <__aeabi_dcmpeq>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d033      	beq.n	8004b08 <_printf_float+0x26c>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	4a35      	ldr	r2, [pc, #212]	; (8004b7c <_printf_float+0x2e0>)
 8004aa8:	47b8      	blx	r7
 8004aaa:	3001      	adds	r0, #1
 8004aac:	f43f af51 	beq.w	8004952 <_printf_float+0xb6>
 8004ab0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	db02      	blt.n	8004abe <_printf_float+0x222>
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	07d8      	lsls	r0, r3, #31
 8004abc:	d50f      	bpl.n	8004ade <_printf_float+0x242>
 8004abe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	47b8      	blx	r7
 8004ac8:	3001      	adds	r0, #1
 8004aca:	f43f af42 	beq.w	8004952 <_printf_float+0xb6>
 8004ace:	f04f 0800 	mov.w	r8, #0
 8004ad2:	f104 091a 	add.w	r9, r4, #26
 8004ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	4543      	cmp	r3, r8
 8004adc:	dc09      	bgt.n	8004af2 <_printf_float+0x256>
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	079b      	lsls	r3, r3, #30
 8004ae2:	f100 8102 	bmi.w	8004cea <_printf_float+0x44e>
 8004ae6:	68e0      	ldr	r0, [r4, #12]
 8004ae8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004aea:	4298      	cmp	r0, r3
 8004aec:	bfb8      	it	lt
 8004aee:	4618      	movlt	r0, r3
 8004af0:	e731      	b.n	8004956 <_printf_float+0xba>
 8004af2:	2301      	movs	r3, #1
 8004af4:	464a      	mov	r2, r9
 8004af6:	4631      	mov	r1, r6
 8004af8:	4628      	mov	r0, r5
 8004afa:	47b8      	blx	r7
 8004afc:	3001      	adds	r0, #1
 8004afe:	f43f af28 	beq.w	8004952 <_printf_float+0xb6>
 8004b02:	f108 0801 	add.w	r8, r8, #1
 8004b06:	e7e6      	b.n	8004ad6 <_printf_float+0x23a>
 8004b08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	dc38      	bgt.n	8004b80 <_printf_float+0x2e4>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	4631      	mov	r1, r6
 8004b12:	4628      	mov	r0, r5
 8004b14:	4a19      	ldr	r2, [pc, #100]	; (8004b7c <_printf_float+0x2e0>)
 8004b16:	47b8      	blx	r7
 8004b18:	3001      	adds	r0, #1
 8004b1a:	f43f af1a 	beq.w	8004952 <_printf_float+0xb6>
 8004b1e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b22:	4313      	orrs	r3, r2
 8004b24:	d102      	bne.n	8004b2c <_printf_float+0x290>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	07d9      	lsls	r1, r3, #31
 8004b2a:	d5d8      	bpl.n	8004ade <_printf_float+0x242>
 8004b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b30:	4631      	mov	r1, r6
 8004b32:	4628      	mov	r0, r5
 8004b34:	47b8      	blx	r7
 8004b36:	3001      	adds	r0, #1
 8004b38:	f43f af0b 	beq.w	8004952 <_printf_float+0xb6>
 8004b3c:	f04f 0900 	mov.w	r9, #0
 8004b40:	f104 0a1a 	add.w	sl, r4, #26
 8004b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b46:	425b      	negs	r3, r3
 8004b48:	454b      	cmp	r3, r9
 8004b4a:	dc01      	bgt.n	8004b50 <_printf_float+0x2b4>
 8004b4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b4e:	e794      	b.n	8004a7a <_printf_float+0x1de>
 8004b50:	2301      	movs	r3, #1
 8004b52:	4652      	mov	r2, sl
 8004b54:	4631      	mov	r1, r6
 8004b56:	4628      	mov	r0, r5
 8004b58:	47b8      	blx	r7
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	f43f aef9 	beq.w	8004952 <_printf_float+0xb6>
 8004b60:	f109 0901 	add.w	r9, r9, #1
 8004b64:	e7ee      	b.n	8004b44 <_printf_float+0x2a8>
 8004b66:	bf00      	nop
 8004b68:	7fefffff 	.word	0x7fefffff
 8004b6c:	08008b60 	.word	0x08008b60
 8004b70:	08008b64 	.word	0x08008b64
 8004b74:	08008b6c 	.word	0x08008b6c
 8004b78:	08008b68 	.word	0x08008b68
 8004b7c:	08008b70 	.word	0x08008b70
 8004b80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b84:	429a      	cmp	r2, r3
 8004b86:	bfa8      	it	ge
 8004b88:	461a      	movge	r2, r3
 8004b8a:	2a00      	cmp	r2, #0
 8004b8c:	4691      	mov	r9, r2
 8004b8e:	dc37      	bgt.n	8004c00 <_printf_float+0x364>
 8004b90:	f04f 0b00 	mov.w	fp, #0
 8004b94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b98:	f104 021a 	add.w	r2, r4, #26
 8004b9c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ba0:	ebaa 0309 	sub.w	r3, sl, r9
 8004ba4:	455b      	cmp	r3, fp
 8004ba6:	dc33      	bgt.n	8004c10 <_printf_float+0x374>
 8004ba8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bac:	429a      	cmp	r2, r3
 8004bae:	db3b      	blt.n	8004c28 <_printf_float+0x38c>
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	07da      	lsls	r2, r3, #31
 8004bb4:	d438      	bmi.n	8004c28 <_printf_float+0x38c>
 8004bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bb8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004bba:	eba3 020a 	sub.w	r2, r3, sl
 8004bbe:	eba3 0901 	sub.w	r9, r3, r1
 8004bc2:	4591      	cmp	r9, r2
 8004bc4:	bfa8      	it	ge
 8004bc6:	4691      	movge	r9, r2
 8004bc8:	f1b9 0f00 	cmp.w	r9, #0
 8004bcc:	dc34      	bgt.n	8004c38 <_printf_float+0x39c>
 8004bce:	f04f 0800 	mov.w	r8, #0
 8004bd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bd6:	f104 0a1a 	add.w	sl, r4, #26
 8004bda:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	eba3 0309 	sub.w	r3, r3, r9
 8004be4:	4543      	cmp	r3, r8
 8004be6:	f77f af7a 	ble.w	8004ade <_printf_float+0x242>
 8004bea:	2301      	movs	r3, #1
 8004bec:	4652      	mov	r2, sl
 8004bee:	4631      	mov	r1, r6
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b8      	blx	r7
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	f43f aeac 	beq.w	8004952 <_printf_float+0xb6>
 8004bfa:	f108 0801 	add.w	r8, r8, #1
 8004bfe:	e7ec      	b.n	8004bda <_printf_float+0x33e>
 8004c00:	4613      	mov	r3, r2
 8004c02:	4631      	mov	r1, r6
 8004c04:	4642      	mov	r2, r8
 8004c06:	4628      	mov	r0, r5
 8004c08:	47b8      	blx	r7
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	d1c0      	bne.n	8004b90 <_printf_float+0x2f4>
 8004c0e:	e6a0      	b.n	8004952 <_printf_float+0xb6>
 8004c10:	2301      	movs	r3, #1
 8004c12:	4631      	mov	r1, r6
 8004c14:	4628      	mov	r0, r5
 8004c16:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c18:	47b8      	blx	r7
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	f43f ae99 	beq.w	8004952 <_printf_float+0xb6>
 8004c20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c22:	f10b 0b01 	add.w	fp, fp, #1
 8004c26:	e7b9      	b.n	8004b9c <_printf_float+0x300>
 8004c28:	4631      	mov	r1, r6
 8004c2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c2e:	4628      	mov	r0, r5
 8004c30:	47b8      	blx	r7
 8004c32:	3001      	adds	r0, #1
 8004c34:	d1bf      	bne.n	8004bb6 <_printf_float+0x31a>
 8004c36:	e68c      	b.n	8004952 <_printf_float+0xb6>
 8004c38:	464b      	mov	r3, r9
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	eb08 020a 	add.w	r2, r8, sl
 8004c42:	47b8      	blx	r7
 8004c44:	3001      	adds	r0, #1
 8004c46:	d1c2      	bne.n	8004bce <_printf_float+0x332>
 8004c48:	e683      	b.n	8004952 <_printf_float+0xb6>
 8004c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c4c:	2a01      	cmp	r2, #1
 8004c4e:	dc01      	bgt.n	8004c54 <_printf_float+0x3b8>
 8004c50:	07db      	lsls	r3, r3, #31
 8004c52:	d537      	bpl.n	8004cc4 <_printf_float+0x428>
 8004c54:	2301      	movs	r3, #1
 8004c56:	4642      	mov	r2, r8
 8004c58:	4631      	mov	r1, r6
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	47b8      	blx	r7
 8004c5e:	3001      	adds	r0, #1
 8004c60:	f43f ae77 	beq.w	8004952 <_printf_float+0xb6>
 8004c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c68:	4631      	mov	r1, r6
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	47b8      	blx	r7
 8004c6e:	3001      	adds	r0, #1
 8004c70:	f43f ae6f 	beq.w	8004952 <_printf_float+0xb6>
 8004c74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f7fb ff48 	bl	8000b10 <__aeabi_dcmpeq>
 8004c80:	b9d8      	cbnz	r0, 8004cba <_printf_float+0x41e>
 8004c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c84:	f108 0201 	add.w	r2, r8, #1
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	d10e      	bne.n	8004cb2 <_printf_float+0x416>
 8004c94:	e65d      	b.n	8004952 <_printf_float+0xb6>
 8004c96:	2301      	movs	r3, #1
 8004c98:	464a      	mov	r2, r9
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b8      	blx	r7
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	f43f ae56 	beq.w	8004952 <_printf_float+0xb6>
 8004ca6:	f108 0801 	add.w	r8, r8, #1
 8004caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cac:	3b01      	subs	r3, #1
 8004cae:	4543      	cmp	r3, r8
 8004cb0:	dcf1      	bgt.n	8004c96 <_printf_float+0x3fa>
 8004cb2:	4653      	mov	r3, sl
 8004cb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004cb8:	e6e0      	b.n	8004a7c <_printf_float+0x1e0>
 8004cba:	f04f 0800 	mov.w	r8, #0
 8004cbe:	f104 091a 	add.w	r9, r4, #26
 8004cc2:	e7f2      	b.n	8004caa <_printf_float+0x40e>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4642      	mov	r2, r8
 8004cc8:	e7df      	b.n	8004c8a <_printf_float+0x3ee>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	464a      	mov	r2, r9
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b8      	blx	r7
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	f43f ae3c 	beq.w	8004952 <_printf_float+0xb6>
 8004cda:	f108 0801 	add.w	r8, r8, #1
 8004cde:	68e3      	ldr	r3, [r4, #12]
 8004ce0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ce2:	1a5b      	subs	r3, r3, r1
 8004ce4:	4543      	cmp	r3, r8
 8004ce6:	dcf0      	bgt.n	8004cca <_printf_float+0x42e>
 8004ce8:	e6fd      	b.n	8004ae6 <_printf_float+0x24a>
 8004cea:	f04f 0800 	mov.w	r8, #0
 8004cee:	f104 0919 	add.w	r9, r4, #25
 8004cf2:	e7f4      	b.n	8004cde <_printf_float+0x442>

08004cf4 <_printf_common>:
 8004cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf8:	4616      	mov	r6, r2
 8004cfa:	4699      	mov	r9, r3
 8004cfc:	688a      	ldr	r2, [r1, #8]
 8004cfe:	690b      	ldr	r3, [r1, #16]
 8004d00:	4607      	mov	r7, r0
 8004d02:	4293      	cmp	r3, r2
 8004d04:	bfb8      	it	lt
 8004d06:	4613      	movlt	r3, r2
 8004d08:	6033      	str	r3, [r6, #0]
 8004d0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d0e:	460c      	mov	r4, r1
 8004d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d14:	b10a      	cbz	r2, 8004d1a <_printf_common+0x26>
 8004d16:	3301      	adds	r3, #1
 8004d18:	6033      	str	r3, [r6, #0]
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	0699      	lsls	r1, r3, #26
 8004d1e:	bf42      	ittt	mi
 8004d20:	6833      	ldrmi	r3, [r6, #0]
 8004d22:	3302      	addmi	r3, #2
 8004d24:	6033      	strmi	r3, [r6, #0]
 8004d26:	6825      	ldr	r5, [r4, #0]
 8004d28:	f015 0506 	ands.w	r5, r5, #6
 8004d2c:	d106      	bne.n	8004d3c <_printf_common+0x48>
 8004d2e:	f104 0a19 	add.w	sl, r4, #25
 8004d32:	68e3      	ldr	r3, [r4, #12]
 8004d34:	6832      	ldr	r2, [r6, #0]
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	42ab      	cmp	r3, r5
 8004d3a:	dc28      	bgt.n	8004d8e <_printf_common+0x9a>
 8004d3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d40:	1e13      	subs	r3, r2, #0
 8004d42:	6822      	ldr	r2, [r4, #0]
 8004d44:	bf18      	it	ne
 8004d46:	2301      	movne	r3, #1
 8004d48:	0692      	lsls	r2, r2, #26
 8004d4a:	d42d      	bmi.n	8004da8 <_printf_common+0xb4>
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	4638      	mov	r0, r7
 8004d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d54:	47c0      	blx	r8
 8004d56:	3001      	adds	r0, #1
 8004d58:	d020      	beq.n	8004d9c <_printf_common+0xa8>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	68e5      	ldr	r5, [r4, #12]
 8004d5e:	f003 0306 	and.w	r3, r3, #6
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	bf18      	it	ne
 8004d66:	2500      	movne	r5, #0
 8004d68:	6832      	ldr	r2, [r6, #0]
 8004d6a:	f04f 0600 	mov.w	r6, #0
 8004d6e:	68a3      	ldr	r3, [r4, #8]
 8004d70:	bf08      	it	eq
 8004d72:	1aad      	subeq	r5, r5, r2
 8004d74:	6922      	ldr	r2, [r4, #16]
 8004d76:	bf08      	it	eq
 8004d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	bfc4      	itt	gt
 8004d80:	1a9b      	subgt	r3, r3, r2
 8004d82:	18ed      	addgt	r5, r5, r3
 8004d84:	341a      	adds	r4, #26
 8004d86:	42b5      	cmp	r5, r6
 8004d88:	d11a      	bne.n	8004dc0 <_printf_common+0xcc>
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	e008      	b.n	8004da0 <_printf_common+0xac>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	4652      	mov	r2, sl
 8004d92:	4649      	mov	r1, r9
 8004d94:	4638      	mov	r0, r7
 8004d96:	47c0      	blx	r8
 8004d98:	3001      	adds	r0, #1
 8004d9a:	d103      	bne.n	8004da4 <_printf_common+0xb0>
 8004d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da4:	3501      	adds	r5, #1
 8004da6:	e7c4      	b.n	8004d32 <_printf_common+0x3e>
 8004da8:	2030      	movs	r0, #48	; 0x30
 8004daa:	18e1      	adds	r1, r4, r3
 8004dac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004db6:	4422      	add	r2, r4
 8004db8:	3302      	adds	r3, #2
 8004dba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dbe:	e7c5      	b.n	8004d4c <_printf_common+0x58>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	4622      	mov	r2, r4
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	47c0      	blx	r8
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d0e6      	beq.n	8004d9c <_printf_common+0xa8>
 8004dce:	3601      	adds	r6, #1
 8004dd0:	e7d9      	b.n	8004d86 <_printf_common+0x92>
	...

08004dd4 <_printf_i>:
 8004dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd8:	7e0f      	ldrb	r7, [r1, #24]
 8004dda:	4691      	mov	r9, r2
 8004ddc:	2f78      	cmp	r7, #120	; 0x78
 8004dde:	4680      	mov	r8, r0
 8004de0:	460c      	mov	r4, r1
 8004de2:	469a      	mov	sl, r3
 8004de4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004de6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dea:	d807      	bhi.n	8004dfc <_printf_i+0x28>
 8004dec:	2f62      	cmp	r7, #98	; 0x62
 8004dee:	d80a      	bhi.n	8004e06 <_printf_i+0x32>
 8004df0:	2f00      	cmp	r7, #0
 8004df2:	f000 80d9 	beq.w	8004fa8 <_printf_i+0x1d4>
 8004df6:	2f58      	cmp	r7, #88	; 0x58
 8004df8:	f000 80a4 	beq.w	8004f44 <_printf_i+0x170>
 8004dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e04:	e03a      	b.n	8004e7c <_printf_i+0xa8>
 8004e06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e0a:	2b15      	cmp	r3, #21
 8004e0c:	d8f6      	bhi.n	8004dfc <_printf_i+0x28>
 8004e0e:	a101      	add	r1, pc, #4	; (adr r1, 8004e14 <_printf_i+0x40>)
 8004e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e14:	08004e6d 	.word	0x08004e6d
 8004e18:	08004e81 	.word	0x08004e81
 8004e1c:	08004dfd 	.word	0x08004dfd
 8004e20:	08004dfd 	.word	0x08004dfd
 8004e24:	08004dfd 	.word	0x08004dfd
 8004e28:	08004dfd 	.word	0x08004dfd
 8004e2c:	08004e81 	.word	0x08004e81
 8004e30:	08004dfd 	.word	0x08004dfd
 8004e34:	08004dfd 	.word	0x08004dfd
 8004e38:	08004dfd 	.word	0x08004dfd
 8004e3c:	08004dfd 	.word	0x08004dfd
 8004e40:	08004f8f 	.word	0x08004f8f
 8004e44:	08004eb1 	.word	0x08004eb1
 8004e48:	08004f71 	.word	0x08004f71
 8004e4c:	08004dfd 	.word	0x08004dfd
 8004e50:	08004dfd 	.word	0x08004dfd
 8004e54:	08004fb1 	.word	0x08004fb1
 8004e58:	08004dfd 	.word	0x08004dfd
 8004e5c:	08004eb1 	.word	0x08004eb1
 8004e60:	08004dfd 	.word	0x08004dfd
 8004e64:	08004dfd 	.word	0x08004dfd
 8004e68:	08004f79 	.word	0x08004f79
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	1d1a      	adds	r2, r3, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	602a      	str	r2, [r5, #0]
 8004e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e0a4      	b.n	8004fca <_printf_i+0x1f6>
 8004e80:	6820      	ldr	r0, [r4, #0]
 8004e82:	6829      	ldr	r1, [r5, #0]
 8004e84:	0606      	lsls	r6, r0, #24
 8004e86:	f101 0304 	add.w	r3, r1, #4
 8004e8a:	d50a      	bpl.n	8004ea2 <_printf_i+0xce>
 8004e8c:	680e      	ldr	r6, [r1, #0]
 8004e8e:	602b      	str	r3, [r5, #0]
 8004e90:	2e00      	cmp	r6, #0
 8004e92:	da03      	bge.n	8004e9c <_printf_i+0xc8>
 8004e94:	232d      	movs	r3, #45	; 0x2d
 8004e96:	4276      	negs	r6, r6
 8004e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e9c:	230a      	movs	r3, #10
 8004e9e:	485e      	ldr	r0, [pc, #376]	; (8005018 <_printf_i+0x244>)
 8004ea0:	e019      	b.n	8004ed6 <_printf_i+0x102>
 8004ea2:	680e      	ldr	r6, [r1, #0]
 8004ea4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ea8:	602b      	str	r3, [r5, #0]
 8004eaa:	bf18      	it	ne
 8004eac:	b236      	sxthne	r6, r6
 8004eae:	e7ef      	b.n	8004e90 <_printf_i+0xbc>
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	6820      	ldr	r0, [r4, #0]
 8004eb4:	1d19      	adds	r1, r3, #4
 8004eb6:	6029      	str	r1, [r5, #0]
 8004eb8:	0601      	lsls	r1, r0, #24
 8004eba:	d501      	bpl.n	8004ec0 <_printf_i+0xec>
 8004ebc:	681e      	ldr	r6, [r3, #0]
 8004ebe:	e002      	b.n	8004ec6 <_printf_i+0xf2>
 8004ec0:	0646      	lsls	r6, r0, #25
 8004ec2:	d5fb      	bpl.n	8004ebc <_printf_i+0xe8>
 8004ec4:	881e      	ldrh	r6, [r3, #0]
 8004ec6:	2f6f      	cmp	r7, #111	; 0x6f
 8004ec8:	bf0c      	ite	eq
 8004eca:	2308      	moveq	r3, #8
 8004ecc:	230a      	movne	r3, #10
 8004ece:	4852      	ldr	r0, [pc, #328]	; (8005018 <_printf_i+0x244>)
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ed6:	6865      	ldr	r5, [r4, #4]
 8004ed8:	2d00      	cmp	r5, #0
 8004eda:	bfa8      	it	ge
 8004edc:	6821      	ldrge	r1, [r4, #0]
 8004ede:	60a5      	str	r5, [r4, #8]
 8004ee0:	bfa4      	itt	ge
 8004ee2:	f021 0104 	bicge.w	r1, r1, #4
 8004ee6:	6021      	strge	r1, [r4, #0]
 8004ee8:	b90e      	cbnz	r6, 8004eee <_printf_i+0x11a>
 8004eea:	2d00      	cmp	r5, #0
 8004eec:	d04d      	beq.n	8004f8a <_printf_i+0x1b6>
 8004eee:	4615      	mov	r5, r2
 8004ef0:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ef4:	fb03 6711 	mls	r7, r3, r1, r6
 8004ef8:	5dc7      	ldrb	r7, [r0, r7]
 8004efa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004efe:	4637      	mov	r7, r6
 8004f00:	42bb      	cmp	r3, r7
 8004f02:	460e      	mov	r6, r1
 8004f04:	d9f4      	bls.n	8004ef0 <_printf_i+0x11c>
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d10b      	bne.n	8004f22 <_printf_i+0x14e>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	07de      	lsls	r6, r3, #31
 8004f0e:	d508      	bpl.n	8004f22 <_printf_i+0x14e>
 8004f10:	6923      	ldr	r3, [r4, #16]
 8004f12:	6861      	ldr	r1, [r4, #4]
 8004f14:	4299      	cmp	r1, r3
 8004f16:	bfde      	ittt	le
 8004f18:	2330      	movle	r3, #48	; 0x30
 8004f1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f22:	1b52      	subs	r2, r2, r5
 8004f24:	6122      	str	r2, [r4, #16]
 8004f26:	464b      	mov	r3, r9
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	f8cd a000 	str.w	sl, [sp]
 8004f30:	aa03      	add	r2, sp, #12
 8004f32:	f7ff fedf 	bl	8004cf4 <_printf_common>
 8004f36:	3001      	adds	r0, #1
 8004f38:	d14c      	bne.n	8004fd4 <_printf_i+0x200>
 8004f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3e:	b004      	add	sp, #16
 8004f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f44:	4834      	ldr	r0, [pc, #208]	; (8005018 <_printf_i+0x244>)
 8004f46:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f4a:	6829      	ldr	r1, [r5, #0]
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f52:	6029      	str	r1, [r5, #0]
 8004f54:	061d      	lsls	r5, r3, #24
 8004f56:	d514      	bpl.n	8004f82 <_printf_i+0x1ae>
 8004f58:	07df      	lsls	r7, r3, #31
 8004f5a:	bf44      	itt	mi
 8004f5c:	f043 0320 	orrmi.w	r3, r3, #32
 8004f60:	6023      	strmi	r3, [r4, #0]
 8004f62:	b91e      	cbnz	r6, 8004f6c <_printf_i+0x198>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	f023 0320 	bic.w	r3, r3, #32
 8004f6a:	6023      	str	r3, [r4, #0]
 8004f6c:	2310      	movs	r3, #16
 8004f6e:	e7af      	b.n	8004ed0 <_printf_i+0xfc>
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	f043 0320 	orr.w	r3, r3, #32
 8004f76:	6023      	str	r3, [r4, #0]
 8004f78:	2378      	movs	r3, #120	; 0x78
 8004f7a:	4828      	ldr	r0, [pc, #160]	; (800501c <_printf_i+0x248>)
 8004f7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f80:	e7e3      	b.n	8004f4a <_printf_i+0x176>
 8004f82:	0659      	lsls	r1, r3, #25
 8004f84:	bf48      	it	mi
 8004f86:	b2b6      	uxthmi	r6, r6
 8004f88:	e7e6      	b.n	8004f58 <_printf_i+0x184>
 8004f8a:	4615      	mov	r5, r2
 8004f8c:	e7bb      	b.n	8004f06 <_printf_i+0x132>
 8004f8e:	682b      	ldr	r3, [r5, #0]
 8004f90:	6826      	ldr	r6, [r4, #0]
 8004f92:	1d18      	adds	r0, r3, #4
 8004f94:	6961      	ldr	r1, [r4, #20]
 8004f96:	6028      	str	r0, [r5, #0]
 8004f98:	0635      	lsls	r5, r6, #24
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	d501      	bpl.n	8004fa2 <_printf_i+0x1ce>
 8004f9e:	6019      	str	r1, [r3, #0]
 8004fa0:	e002      	b.n	8004fa8 <_printf_i+0x1d4>
 8004fa2:	0670      	lsls	r0, r6, #25
 8004fa4:	d5fb      	bpl.n	8004f9e <_printf_i+0x1ca>
 8004fa6:	8019      	strh	r1, [r3, #0]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	4615      	mov	r5, r2
 8004fac:	6123      	str	r3, [r4, #16]
 8004fae:	e7ba      	b.n	8004f26 <_printf_i+0x152>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	1d1a      	adds	r2, r3, #4
 8004fb6:	602a      	str	r2, [r5, #0]
 8004fb8:	681d      	ldr	r5, [r3, #0]
 8004fba:	6862      	ldr	r2, [r4, #4]
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f002 f879 	bl	80070b4 <memchr>
 8004fc2:	b108      	cbz	r0, 8004fc8 <_printf_i+0x1f4>
 8004fc4:	1b40      	subs	r0, r0, r5
 8004fc6:	6060      	str	r0, [r4, #4]
 8004fc8:	6863      	ldr	r3, [r4, #4]
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fd2:	e7a8      	b.n	8004f26 <_printf_i+0x152>
 8004fd4:	462a      	mov	r2, r5
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	4640      	mov	r0, r8
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	47d0      	blx	sl
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d0ab      	beq.n	8004f3a <_printf_i+0x166>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	079b      	lsls	r3, r3, #30
 8004fe6:	d413      	bmi.n	8005010 <_printf_i+0x23c>
 8004fe8:	68e0      	ldr	r0, [r4, #12]
 8004fea:	9b03      	ldr	r3, [sp, #12]
 8004fec:	4298      	cmp	r0, r3
 8004fee:	bfb8      	it	lt
 8004ff0:	4618      	movlt	r0, r3
 8004ff2:	e7a4      	b.n	8004f3e <_printf_i+0x16a>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	4632      	mov	r2, r6
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	47d0      	blx	sl
 8004ffe:	3001      	adds	r0, #1
 8005000:	d09b      	beq.n	8004f3a <_printf_i+0x166>
 8005002:	3501      	adds	r5, #1
 8005004:	68e3      	ldr	r3, [r4, #12]
 8005006:	9903      	ldr	r1, [sp, #12]
 8005008:	1a5b      	subs	r3, r3, r1
 800500a:	42ab      	cmp	r3, r5
 800500c:	dcf2      	bgt.n	8004ff4 <_printf_i+0x220>
 800500e:	e7eb      	b.n	8004fe8 <_printf_i+0x214>
 8005010:	2500      	movs	r5, #0
 8005012:	f104 0619 	add.w	r6, r4, #25
 8005016:	e7f5      	b.n	8005004 <_printf_i+0x230>
 8005018:	08008b72 	.word	0x08008b72
 800501c:	08008b83 	.word	0x08008b83

08005020 <sniprintf>:
 8005020:	b40c      	push	{r2, r3}
 8005022:	b530      	push	{r4, r5, lr}
 8005024:	4b17      	ldr	r3, [pc, #92]	; (8005084 <sniprintf+0x64>)
 8005026:	1e0c      	subs	r4, r1, #0
 8005028:	681d      	ldr	r5, [r3, #0]
 800502a:	b09d      	sub	sp, #116	; 0x74
 800502c:	da08      	bge.n	8005040 <sniprintf+0x20>
 800502e:	238b      	movs	r3, #139	; 0x8b
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	602b      	str	r3, [r5, #0]
 8005036:	b01d      	add	sp, #116	; 0x74
 8005038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800503c:	b002      	add	sp, #8
 800503e:	4770      	bx	lr
 8005040:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005044:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005048:	bf0c      	ite	eq
 800504a:	4623      	moveq	r3, r4
 800504c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005050:	9304      	str	r3, [sp, #16]
 8005052:	9307      	str	r3, [sp, #28]
 8005054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005058:	9002      	str	r0, [sp, #8]
 800505a:	9006      	str	r0, [sp, #24]
 800505c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005060:	4628      	mov	r0, r5
 8005062:	ab21      	add	r3, sp, #132	; 0x84
 8005064:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005066:	a902      	add	r1, sp, #8
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	f002 fe43 	bl	8007cf4 <_svfiprintf_r>
 800506e:	1c43      	adds	r3, r0, #1
 8005070:	bfbc      	itt	lt
 8005072:	238b      	movlt	r3, #139	; 0x8b
 8005074:	602b      	strlt	r3, [r5, #0]
 8005076:	2c00      	cmp	r4, #0
 8005078:	d0dd      	beq.n	8005036 <sniprintf+0x16>
 800507a:	2200      	movs	r2, #0
 800507c:	9b02      	ldr	r3, [sp, #8]
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	e7d9      	b.n	8005036 <sniprintf+0x16>
 8005082:	bf00      	nop
 8005084:	20000014 	.word	0x20000014

08005088 <sulp>:
 8005088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800508c:	460f      	mov	r7, r1
 800508e:	4690      	mov	r8, r2
 8005090:	f002 fb9c 	bl	80077cc <__ulp>
 8005094:	4604      	mov	r4, r0
 8005096:	460d      	mov	r5, r1
 8005098:	f1b8 0f00 	cmp.w	r8, #0
 800509c:	d011      	beq.n	80050c2 <sulp+0x3a>
 800509e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80050a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	dd0b      	ble.n	80050c2 <sulp+0x3a>
 80050aa:	2400      	movs	r4, #0
 80050ac:	051b      	lsls	r3, r3, #20
 80050ae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80050b2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80050b6:	4622      	mov	r2, r4
 80050b8:	462b      	mov	r3, r5
 80050ba:	f7fb fac1 	bl	8000640 <__aeabi_dmul>
 80050be:	4604      	mov	r4, r0
 80050c0:	460d      	mov	r5, r1
 80050c2:	4620      	mov	r0, r4
 80050c4:	4629      	mov	r1, r5
 80050c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ca:	0000      	movs	r0, r0
 80050cc:	0000      	movs	r0, r0
	...

080050d0 <_strtod_l>:
 80050d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d4:	469b      	mov	fp, r3
 80050d6:	2300      	movs	r3, #0
 80050d8:	b09f      	sub	sp, #124	; 0x7c
 80050da:	931a      	str	r3, [sp, #104]	; 0x68
 80050dc:	4b9e      	ldr	r3, [pc, #632]	; (8005358 <_strtod_l+0x288>)
 80050de:	4682      	mov	sl, r0
 80050e0:	681f      	ldr	r7, [r3, #0]
 80050e2:	460e      	mov	r6, r1
 80050e4:	4638      	mov	r0, r7
 80050e6:	9215      	str	r2, [sp, #84]	; 0x54
 80050e8:	f7fb f832 	bl	8000150 <strlen>
 80050ec:	f04f 0800 	mov.w	r8, #0
 80050f0:	4604      	mov	r4, r0
 80050f2:	f04f 0900 	mov.w	r9, #0
 80050f6:	9619      	str	r6, [sp, #100]	; 0x64
 80050f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050fa:	781a      	ldrb	r2, [r3, #0]
 80050fc:	2a2b      	cmp	r2, #43	; 0x2b
 80050fe:	d04c      	beq.n	800519a <_strtod_l+0xca>
 8005100:	d83a      	bhi.n	8005178 <_strtod_l+0xa8>
 8005102:	2a0d      	cmp	r2, #13
 8005104:	d833      	bhi.n	800516e <_strtod_l+0x9e>
 8005106:	2a08      	cmp	r2, #8
 8005108:	d833      	bhi.n	8005172 <_strtod_l+0xa2>
 800510a:	2a00      	cmp	r2, #0
 800510c:	d03d      	beq.n	800518a <_strtod_l+0xba>
 800510e:	2300      	movs	r3, #0
 8005110:	930a      	str	r3, [sp, #40]	; 0x28
 8005112:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005114:	782b      	ldrb	r3, [r5, #0]
 8005116:	2b30      	cmp	r3, #48	; 0x30
 8005118:	f040 80aa 	bne.w	8005270 <_strtod_l+0x1a0>
 800511c:	786b      	ldrb	r3, [r5, #1]
 800511e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005122:	2b58      	cmp	r3, #88	; 0x58
 8005124:	d166      	bne.n	80051f4 <_strtod_l+0x124>
 8005126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005128:	4650      	mov	r0, sl
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	ab1a      	add	r3, sp, #104	; 0x68
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	4a8a      	ldr	r2, [pc, #552]	; (800535c <_strtod_l+0x28c>)
 8005132:	f8cd b008 	str.w	fp, [sp, #8]
 8005136:	ab1b      	add	r3, sp, #108	; 0x6c
 8005138:	a919      	add	r1, sp, #100	; 0x64
 800513a:	f001 fc9f 	bl	8006a7c <__gethex>
 800513e:	f010 0607 	ands.w	r6, r0, #7
 8005142:	4604      	mov	r4, r0
 8005144:	d005      	beq.n	8005152 <_strtod_l+0x82>
 8005146:	2e06      	cmp	r6, #6
 8005148:	d129      	bne.n	800519e <_strtod_l+0xce>
 800514a:	2300      	movs	r3, #0
 800514c:	3501      	adds	r5, #1
 800514e:	9519      	str	r5, [sp, #100]	; 0x64
 8005150:	930a      	str	r3, [sp, #40]	; 0x28
 8005152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005154:	2b00      	cmp	r3, #0
 8005156:	f040 858a 	bne.w	8005c6e <_strtod_l+0xb9e>
 800515a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800515c:	b1d3      	cbz	r3, 8005194 <_strtod_l+0xc4>
 800515e:	4642      	mov	r2, r8
 8005160:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005164:	4610      	mov	r0, r2
 8005166:	4619      	mov	r1, r3
 8005168:	b01f      	add	sp, #124	; 0x7c
 800516a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800516e:	2a20      	cmp	r2, #32
 8005170:	d1cd      	bne.n	800510e <_strtod_l+0x3e>
 8005172:	3301      	adds	r3, #1
 8005174:	9319      	str	r3, [sp, #100]	; 0x64
 8005176:	e7bf      	b.n	80050f8 <_strtod_l+0x28>
 8005178:	2a2d      	cmp	r2, #45	; 0x2d
 800517a:	d1c8      	bne.n	800510e <_strtod_l+0x3e>
 800517c:	2201      	movs	r2, #1
 800517e:	920a      	str	r2, [sp, #40]	; 0x28
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	9219      	str	r2, [sp, #100]	; 0x64
 8005184:	785b      	ldrb	r3, [r3, #1]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1c3      	bne.n	8005112 <_strtod_l+0x42>
 800518a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800518c:	9619      	str	r6, [sp, #100]	; 0x64
 800518e:	2b00      	cmp	r3, #0
 8005190:	f040 856b 	bne.w	8005c6a <_strtod_l+0xb9a>
 8005194:	4642      	mov	r2, r8
 8005196:	464b      	mov	r3, r9
 8005198:	e7e4      	b.n	8005164 <_strtod_l+0x94>
 800519a:	2200      	movs	r2, #0
 800519c:	e7ef      	b.n	800517e <_strtod_l+0xae>
 800519e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80051a0:	b13a      	cbz	r2, 80051b2 <_strtod_l+0xe2>
 80051a2:	2135      	movs	r1, #53	; 0x35
 80051a4:	a81c      	add	r0, sp, #112	; 0x70
 80051a6:	f002 fc15 	bl	80079d4 <__copybits>
 80051aa:	4650      	mov	r0, sl
 80051ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80051ae:	f001 ffdd 	bl	800716c <_Bfree>
 80051b2:	3e01      	subs	r6, #1
 80051b4:	2e04      	cmp	r6, #4
 80051b6:	d806      	bhi.n	80051c6 <_strtod_l+0xf6>
 80051b8:	e8df f006 	tbb	[pc, r6]
 80051bc:	1714030a 	.word	0x1714030a
 80051c0:	0a          	.byte	0x0a
 80051c1:	00          	.byte	0x00
 80051c2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80051c6:	0721      	lsls	r1, r4, #28
 80051c8:	d5c3      	bpl.n	8005152 <_strtod_l+0x82>
 80051ca:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80051ce:	e7c0      	b.n	8005152 <_strtod_l+0x82>
 80051d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80051d2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80051d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80051da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80051de:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80051e2:	e7f0      	b.n	80051c6 <_strtod_l+0xf6>
 80051e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005360 <_strtod_l+0x290>
 80051e8:	e7ed      	b.n	80051c6 <_strtod_l+0xf6>
 80051ea:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80051ee:	f04f 38ff 	mov.w	r8, #4294967295
 80051f2:	e7e8      	b.n	80051c6 <_strtod_l+0xf6>
 80051f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	9219      	str	r2, [sp, #100]	; 0x64
 80051fa:	785b      	ldrb	r3, [r3, #1]
 80051fc:	2b30      	cmp	r3, #48	; 0x30
 80051fe:	d0f9      	beq.n	80051f4 <_strtod_l+0x124>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0a6      	beq.n	8005152 <_strtod_l+0x82>
 8005204:	2301      	movs	r3, #1
 8005206:	9307      	str	r3, [sp, #28]
 8005208:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800520a:	220a      	movs	r2, #10
 800520c:	9308      	str	r3, [sp, #32]
 800520e:	2300      	movs	r3, #0
 8005210:	469b      	mov	fp, r3
 8005212:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005216:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005218:	7805      	ldrb	r5, [r0, #0]
 800521a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800521e:	b2d9      	uxtb	r1, r3
 8005220:	2909      	cmp	r1, #9
 8005222:	d927      	bls.n	8005274 <_strtod_l+0x1a4>
 8005224:	4622      	mov	r2, r4
 8005226:	4639      	mov	r1, r7
 8005228:	f002 fe7a 	bl	8007f20 <strncmp>
 800522c:	2800      	cmp	r0, #0
 800522e:	d033      	beq.n	8005298 <_strtod_l+0x1c8>
 8005230:	2000      	movs	r0, #0
 8005232:	462a      	mov	r2, r5
 8005234:	465c      	mov	r4, fp
 8005236:	4603      	mov	r3, r0
 8005238:	9004      	str	r0, [sp, #16]
 800523a:	2a65      	cmp	r2, #101	; 0x65
 800523c:	d001      	beq.n	8005242 <_strtod_l+0x172>
 800523e:	2a45      	cmp	r2, #69	; 0x45
 8005240:	d114      	bne.n	800526c <_strtod_l+0x19c>
 8005242:	b91c      	cbnz	r4, 800524c <_strtod_l+0x17c>
 8005244:	9a07      	ldr	r2, [sp, #28]
 8005246:	4302      	orrs	r2, r0
 8005248:	d09f      	beq.n	800518a <_strtod_l+0xba>
 800524a:	2400      	movs	r4, #0
 800524c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800524e:	1c72      	adds	r2, r6, #1
 8005250:	9219      	str	r2, [sp, #100]	; 0x64
 8005252:	7872      	ldrb	r2, [r6, #1]
 8005254:	2a2b      	cmp	r2, #43	; 0x2b
 8005256:	d079      	beq.n	800534c <_strtod_l+0x27c>
 8005258:	2a2d      	cmp	r2, #45	; 0x2d
 800525a:	f000 8083 	beq.w	8005364 <_strtod_l+0x294>
 800525e:	2700      	movs	r7, #0
 8005260:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005264:	2909      	cmp	r1, #9
 8005266:	f240 8083 	bls.w	8005370 <_strtod_l+0x2a0>
 800526a:	9619      	str	r6, [sp, #100]	; 0x64
 800526c:	2500      	movs	r5, #0
 800526e:	e09f      	b.n	80053b0 <_strtod_l+0x2e0>
 8005270:	2300      	movs	r3, #0
 8005272:	e7c8      	b.n	8005206 <_strtod_l+0x136>
 8005274:	f1bb 0f08 	cmp.w	fp, #8
 8005278:	bfd5      	itete	le
 800527a:	9906      	ldrle	r1, [sp, #24]
 800527c:	9905      	ldrgt	r1, [sp, #20]
 800527e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005282:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005286:	f100 0001 	add.w	r0, r0, #1
 800528a:	bfd4      	ite	le
 800528c:	9306      	strle	r3, [sp, #24]
 800528e:	9305      	strgt	r3, [sp, #20]
 8005290:	f10b 0b01 	add.w	fp, fp, #1
 8005294:	9019      	str	r0, [sp, #100]	; 0x64
 8005296:	e7be      	b.n	8005216 <_strtod_l+0x146>
 8005298:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800529a:	191a      	adds	r2, r3, r4
 800529c:	9219      	str	r2, [sp, #100]	; 0x64
 800529e:	5d1a      	ldrb	r2, [r3, r4]
 80052a0:	f1bb 0f00 	cmp.w	fp, #0
 80052a4:	d036      	beq.n	8005314 <_strtod_l+0x244>
 80052a6:	465c      	mov	r4, fp
 80052a8:	9004      	str	r0, [sp, #16]
 80052aa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80052ae:	2b09      	cmp	r3, #9
 80052b0:	d912      	bls.n	80052d8 <_strtod_l+0x208>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e7c1      	b.n	800523a <_strtod_l+0x16a>
 80052b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052b8:	3001      	adds	r0, #1
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	9219      	str	r2, [sp, #100]	; 0x64
 80052be:	785a      	ldrb	r2, [r3, #1]
 80052c0:	2a30      	cmp	r2, #48	; 0x30
 80052c2:	d0f8      	beq.n	80052b6 <_strtod_l+0x1e6>
 80052c4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	f200 84d5 	bhi.w	8005c78 <_strtod_l+0xba8>
 80052ce:	9004      	str	r0, [sp, #16]
 80052d0:	2000      	movs	r0, #0
 80052d2:	4604      	mov	r4, r0
 80052d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052d6:	9308      	str	r3, [sp, #32]
 80052d8:	3a30      	subs	r2, #48	; 0x30
 80052da:	f100 0301 	add.w	r3, r0, #1
 80052de:	d013      	beq.n	8005308 <_strtod_l+0x238>
 80052e0:	9904      	ldr	r1, [sp, #16]
 80052e2:	1905      	adds	r5, r0, r4
 80052e4:	4419      	add	r1, r3
 80052e6:	9104      	str	r1, [sp, #16]
 80052e8:	4623      	mov	r3, r4
 80052ea:	210a      	movs	r1, #10
 80052ec:	42ab      	cmp	r3, r5
 80052ee:	d113      	bne.n	8005318 <_strtod_l+0x248>
 80052f0:	1823      	adds	r3, r4, r0
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	f104 0401 	add.w	r4, r4, #1
 80052f8:	4404      	add	r4, r0
 80052fa:	dc1b      	bgt.n	8005334 <_strtod_l+0x264>
 80052fc:	230a      	movs	r3, #10
 80052fe:	9906      	ldr	r1, [sp, #24]
 8005300:	fb03 2301 	mla	r3, r3, r1, r2
 8005304:	9306      	str	r3, [sp, #24]
 8005306:	2300      	movs	r3, #0
 8005308:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800530a:	4618      	mov	r0, r3
 800530c:	1c51      	adds	r1, r2, #1
 800530e:	9119      	str	r1, [sp, #100]	; 0x64
 8005310:	7852      	ldrb	r2, [r2, #1]
 8005312:	e7ca      	b.n	80052aa <_strtod_l+0x1da>
 8005314:	4658      	mov	r0, fp
 8005316:	e7d3      	b.n	80052c0 <_strtod_l+0x1f0>
 8005318:	2b08      	cmp	r3, #8
 800531a:	dc04      	bgt.n	8005326 <_strtod_l+0x256>
 800531c:	9f06      	ldr	r7, [sp, #24]
 800531e:	434f      	muls	r7, r1
 8005320:	9706      	str	r7, [sp, #24]
 8005322:	3301      	adds	r3, #1
 8005324:	e7e2      	b.n	80052ec <_strtod_l+0x21c>
 8005326:	1c5f      	adds	r7, r3, #1
 8005328:	2f10      	cmp	r7, #16
 800532a:	bfde      	ittt	le
 800532c:	9f05      	ldrle	r7, [sp, #20]
 800532e:	434f      	mulle	r7, r1
 8005330:	9705      	strle	r7, [sp, #20]
 8005332:	e7f6      	b.n	8005322 <_strtod_l+0x252>
 8005334:	2c10      	cmp	r4, #16
 8005336:	bfdf      	itttt	le
 8005338:	230a      	movle	r3, #10
 800533a:	9905      	ldrle	r1, [sp, #20]
 800533c:	fb03 2301 	mlale	r3, r3, r1, r2
 8005340:	9305      	strle	r3, [sp, #20]
 8005342:	e7e0      	b.n	8005306 <_strtod_l+0x236>
 8005344:	2300      	movs	r3, #0
 8005346:	9304      	str	r3, [sp, #16]
 8005348:	2301      	movs	r3, #1
 800534a:	e77b      	b.n	8005244 <_strtod_l+0x174>
 800534c:	2700      	movs	r7, #0
 800534e:	1cb2      	adds	r2, r6, #2
 8005350:	9219      	str	r2, [sp, #100]	; 0x64
 8005352:	78b2      	ldrb	r2, [r6, #2]
 8005354:	e784      	b.n	8005260 <_strtod_l+0x190>
 8005356:	bf00      	nop
 8005358:	08008ce0 	.word	0x08008ce0
 800535c:	08008b94 	.word	0x08008b94
 8005360:	7ff00000 	.word	0x7ff00000
 8005364:	2701      	movs	r7, #1
 8005366:	e7f2      	b.n	800534e <_strtod_l+0x27e>
 8005368:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800536a:	1c51      	adds	r1, r2, #1
 800536c:	9119      	str	r1, [sp, #100]	; 0x64
 800536e:	7852      	ldrb	r2, [r2, #1]
 8005370:	2a30      	cmp	r2, #48	; 0x30
 8005372:	d0f9      	beq.n	8005368 <_strtod_l+0x298>
 8005374:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005378:	2908      	cmp	r1, #8
 800537a:	f63f af77 	bhi.w	800526c <_strtod_l+0x19c>
 800537e:	f04f 0e0a 	mov.w	lr, #10
 8005382:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005386:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005388:	9209      	str	r2, [sp, #36]	; 0x24
 800538a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800538c:	1c51      	adds	r1, r2, #1
 800538e:	9119      	str	r1, [sp, #100]	; 0x64
 8005390:	7852      	ldrb	r2, [r2, #1]
 8005392:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005396:	2d09      	cmp	r5, #9
 8005398:	d935      	bls.n	8005406 <_strtod_l+0x336>
 800539a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800539c:	1b49      	subs	r1, r1, r5
 800539e:	2908      	cmp	r1, #8
 80053a0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80053a4:	dc02      	bgt.n	80053ac <_strtod_l+0x2dc>
 80053a6:	4565      	cmp	r5, ip
 80053a8:	bfa8      	it	ge
 80053aa:	4665      	movge	r5, ip
 80053ac:	b107      	cbz	r7, 80053b0 <_strtod_l+0x2e0>
 80053ae:	426d      	negs	r5, r5
 80053b0:	2c00      	cmp	r4, #0
 80053b2:	d14c      	bne.n	800544e <_strtod_l+0x37e>
 80053b4:	9907      	ldr	r1, [sp, #28]
 80053b6:	4301      	orrs	r1, r0
 80053b8:	f47f aecb 	bne.w	8005152 <_strtod_l+0x82>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f47f aee4 	bne.w	800518a <_strtod_l+0xba>
 80053c2:	2a69      	cmp	r2, #105	; 0x69
 80053c4:	d026      	beq.n	8005414 <_strtod_l+0x344>
 80053c6:	dc23      	bgt.n	8005410 <_strtod_l+0x340>
 80053c8:	2a49      	cmp	r2, #73	; 0x49
 80053ca:	d023      	beq.n	8005414 <_strtod_l+0x344>
 80053cc:	2a4e      	cmp	r2, #78	; 0x4e
 80053ce:	f47f aedc 	bne.w	800518a <_strtod_l+0xba>
 80053d2:	499d      	ldr	r1, [pc, #628]	; (8005648 <_strtod_l+0x578>)
 80053d4:	a819      	add	r0, sp, #100	; 0x64
 80053d6:	f001 fd9f 	bl	8006f18 <__match>
 80053da:	2800      	cmp	r0, #0
 80053dc:	f43f aed5 	beq.w	800518a <_strtod_l+0xba>
 80053e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b28      	cmp	r3, #40	; 0x28
 80053e6:	d12c      	bne.n	8005442 <_strtod_l+0x372>
 80053e8:	4998      	ldr	r1, [pc, #608]	; (800564c <_strtod_l+0x57c>)
 80053ea:	aa1c      	add	r2, sp, #112	; 0x70
 80053ec:	a819      	add	r0, sp, #100	; 0x64
 80053ee:	f001 fda7 	bl	8006f40 <__hexnan>
 80053f2:	2805      	cmp	r0, #5
 80053f4:	d125      	bne.n	8005442 <_strtod_l+0x372>
 80053f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80053f8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80053fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005400:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005404:	e6a5      	b.n	8005152 <_strtod_l+0x82>
 8005406:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800540a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800540e:	e7bc      	b.n	800538a <_strtod_l+0x2ba>
 8005410:	2a6e      	cmp	r2, #110	; 0x6e
 8005412:	e7dc      	b.n	80053ce <_strtod_l+0x2fe>
 8005414:	498e      	ldr	r1, [pc, #568]	; (8005650 <_strtod_l+0x580>)
 8005416:	a819      	add	r0, sp, #100	; 0x64
 8005418:	f001 fd7e 	bl	8006f18 <__match>
 800541c:	2800      	cmp	r0, #0
 800541e:	f43f aeb4 	beq.w	800518a <_strtod_l+0xba>
 8005422:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005424:	498b      	ldr	r1, [pc, #556]	; (8005654 <_strtod_l+0x584>)
 8005426:	3b01      	subs	r3, #1
 8005428:	a819      	add	r0, sp, #100	; 0x64
 800542a:	9319      	str	r3, [sp, #100]	; 0x64
 800542c:	f001 fd74 	bl	8006f18 <__match>
 8005430:	b910      	cbnz	r0, 8005438 <_strtod_l+0x368>
 8005432:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005434:	3301      	adds	r3, #1
 8005436:	9319      	str	r3, [sp, #100]	; 0x64
 8005438:	f04f 0800 	mov.w	r8, #0
 800543c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005658 <_strtod_l+0x588>
 8005440:	e687      	b.n	8005152 <_strtod_l+0x82>
 8005442:	4886      	ldr	r0, [pc, #536]	; (800565c <_strtod_l+0x58c>)
 8005444:	f002 fd56 	bl	8007ef4 <nan>
 8005448:	4680      	mov	r8, r0
 800544a:	4689      	mov	r9, r1
 800544c:	e681      	b.n	8005152 <_strtod_l+0x82>
 800544e:	9b04      	ldr	r3, [sp, #16]
 8005450:	f1bb 0f00 	cmp.w	fp, #0
 8005454:	bf08      	it	eq
 8005456:	46a3      	moveq	fp, r4
 8005458:	1aeb      	subs	r3, r5, r3
 800545a:	2c10      	cmp	r4, #16
 800545c:	9806      	ldr	r0, [sp, #24]
 800545e:	4626      	mov	r6, r4
 8005460:	9307      	str	r3, [sp, #28]
 8005462:	bfa8      	it	ge
 8005464:	2610      	movge	r6, #16
 8005466:	f7fb f871 	bl	800054c <__aeabi_ui2d>
 800546a:	2c09      	cmp	r4, #9
 800546c:	4680      	mov	r8, r0
 800546e:	4689      	mov	r9, r1
 8005470:	dd13      	ble.n	800549a <_strtod_l+0x3ca>
 8005472:	4b7b      	ldr	r3, [pc, #492]	; (8005660 <_strtod_l+0x590>)
 8005474:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005478:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800547c:	f7fb f8e0 	bl	8000640 <__aeabi_dmul>
 8005480:	4680      	mov	r8, r0
 8005482:	9805      	ldr	r0, [sp, #20]
 8005484:	4689      	mov	r9, r1
 8005486:	f7fb f861 	bl	800054c <__aeabi_ui2d>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4640      	mov	r0, r8
 8005490:	4649      	mov	r1, r9
 8005492:	f7fa ff1f 	bl	80002d4 <__adddf3>
 8005496:	4680      	mov	r8, r0
 8005498:	4689      	mov	r9, r1
 800549a:	2c0f      	cmp	r4, #15
 800549c:	dc36      	bgt.n	800550c <_strtod_l+0x43c>
 800549e:	9b07      	ldr	r3, [sp, #28]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f43f ae56 	beq.w	8005152 <_strtod_l+0x82>
 80054a6:	dd22      	ble.n	80054ee <_strtod_l+0x41e>
 80054a8:	2b16      	cmp	r3, #22
 80054aa:	dc09      	bgt.n	80054c0 <_strtod_l+0x3f0>
 80054ac:	496c      	ldr	r1, [pc, #432]	; (8005660 <_strtod_l+0x590>)
 80054ae:	4642      	mov	r2, r8
 80054b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80054b4:	464b      	mov	r3, r9
 80054b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054ba:	f7fb f8c1 	bl	8000640 <__aeabi_dmul>
 80054be:	e7c3      	b.n	8005448 <_strtod_l+0x378>
 80054c0:	9a07      	ldr	r2, [sp, #28]
 80054c2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80054c6:	4293      	cmp	r3, r2
 80054c8:	db20      	blt.n	800550c <_strtod_l+0x43c>
 80054ca:	4d65      	ldr	r5, [pc, #404]	; (8005660 <_strtod_l+0x590>)
 80054cc:	f1c4 040f 	rsb	r4, r4, #15
 80054d0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80054d4:	4642      	mov	r2, r8
 80054d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054da:	464b      	mov	r3, r9
 80054dc:	f7fb f8b0 	bl	8000640 <__aeabi_dmul>
 80054e0:	9b07      	ldr	r3, [sp, #28]
 80054e2:	1b1c      	subs	r4, r3, r4
 80054e4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80054e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054ec:	e7e5      	b.n	80054ba <_strtod_l+0x3ea>
 80054ee:	9b07      	ldr	r3, [sp, #28]
 80054f0:	3316      	adds	r3, #22
 80054f2:	db0b      	blt.n	800550c <_strtod_l+0x43c>
 80054f4:	9b04      	ldr	r3, [sp, #16]
 80054f6:	4640      	mov	r0, r8
 80054f8:	1b5d      	subs	r5, r3, r5
 80054fa:	4b59      	ldr	r3, [pc, #356]	; (8005660 <_strtod_l+0x590>)
 80054fc:	4649      	mov	r1, r9
 80054fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005502:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005506:	f7fb f9c5 	bl	8000894 <__aeabi_ddiv>
 800550a:	e79d      	b.n	8005448 <_strtod_l+0x378>
 800550c:	9b07      	ldr	r3, [sp, #28]
 800550e:	1ba6      	subs	r6, r4, r6
 8005510:	441e      	add	r6, r3
 8005512:	2e00      	cmp	r6, #0
 8005514:	dd74      	ble.n	8005600 <_strtod_l+0x530>
 8005516:	f016 030f 	ands.w	r3, r6, #15
 800551a:	d00a      	beq.n	8005532 <_strtod_l+0x462>
 800551c:	4950      	ldr	r1, [pc, #320]	; (8005660 <_strtod_l+0x590>)
 800551e:	4642      	mov	r2, r8
 8005520:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005528:	464b      	mov	r3, r9
 800552a:	f7fb f889 	bl	8000640 <__aeabi_dmul>
 800552e:	4680      	mov	r8, r0
 8005530:	4689      	mov	r9, r1
 8005532:	f036 060f 	bics.w	r6, r6, #15
 8005536:	d052      	beq.n	80055de <_strtod_l+0x50e>
 8005538:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800553c:	dd27      	ble.n	800558e <_strtod_l+0x4be>
 800553e:	f04f 0b00 	mov.w	fp, #0
 8005542:	f8cd b010 	str.w	fp, [sp, #16]
 8005546:	f8cd b020 	str.w	fp, [sp, #32]
 800554a:	f8cd b018 	str.w	fp, [sp, #24]
 800554e:	2322      	movs	r3, #34	; 0x22
 8005550:	f04f 0800 	mov.w	r8, #0
 8005554:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005658 <_strtod_l+0x588>
 8005558:	f8ca 3000 	str.w	r3, [sl]
 800555c:	9b08      	ldr	r3, [sp, #32]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f43f adf7 	beq.w	8005152 <_strtod_l+0x82>
 8005564:	4650      	mov	r0, sl
 8005566:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005568:	f001 fe00 	bl	800716c <_Bfree>
 800556c:	4650      	mov	r0, sl
 800556e:	9906      	ldr	r1, [sp, #24]
 8005570:	f001 fdfc 	bl	800716c <_Bfree>
 8005574:	4650      	mov	r0, sl
 8005576:	9904      	ldr	r1, [sp, #16]
 8005578:	f001 fdf8 	bl	800716c <_Bfree>
 800557c:	4650      	mov	r0, sl
 800557e:	9908      	ldr	r1, [sp, #32]
 8005580:	f001 fdf4 	bl	800716c <_Bfree>
 8005584:	4659      	mov	r1, fp
 8005586:	4650      	mov	r0, sl
 8005588:	f001 fdf0 	bl	800716c <_Bfree>
 800558c:	e5e1      	b.n	8005152 <_strtod_l+0x82>
 800558e:	4b35      	ldr	r3, [pc, #212]	; (8005664 <_strtod_l+0x594>)
 8005590:	4640      	mov	r0, r8
 8005592:	9305      	str	r3, [sp, #20]
 8005594:	2300      	movs	r3, #0
 8005596:	4649      	mov	r1, r9
 8005598:	461f      	mov	r7, r3
 800559a:	1136      	asrs	r6, r6, #4
 800559c:	2e01      	cmp	r6, #1
 800559e:	dc21      	bgt.n	80055e4 <_strtod_l+0x514>
 80055a0:	b10b      	cbz	r3, 80055a6 <_strtod_l+0x4d6>
 80055a2:	4680      	mov	r8, r0
 80055a4:	4689      	mov	r9, r1
 80055a6:	4b2f      	ldr	r3, [pc, #188]	; (8005664 <_strtod_l+0x594>)
 80055a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80055ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80055b0:	4642      	mov	r2, r8
 80055b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055b6:	464b      	mov	r3, r9
 80055b8:	f7fb f842 	bl	8000640 <__aeabi_dmul>
 80055bc:	4b26      	ldr	r3, [pc, #152]	; (8005658 <_strtod_l+0x588>)
 80055be:	460a      	mov	r2, r1
 80055c0:	400b      	ands	r3, r1
 80055c2:	4929      	ldr	r1, [pc, #164]	; (8005668 <_strtod_l+0x598>)
 80055c4:	4680      	mov	r8, r0
 80055c6:	428b      	cmp	r3, r1
 80055c8:	d8b9      	bhi.n	800553e <_strtod_l+0x46e>
 80055ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80055ce:	428b      	cmp	r3, r1
 80055d0:	bf86      	itte	hi
 80055d2:	f04f 38ff 	movhi.w	r8, #4294967295
 80055d6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800566c <_strtod_l+0x59c>
 80055da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80055de:	2300      	movs	r3, #0
 80055e0:	9305      	str	r3, [sp, #20]
 80055e2:	e07f      	b.n	80056e4 <_strtod_l+0x614>
 80055e4:	07f2      	lsls	r2, r6, #31
 80055e6:	d505      	bpl.n	80055f4 <_strtod_l+0x524>
 80055e8:	9b05      	ldr	r3, [sp, #20]
 80055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ee:	f7fb f827 	bl	8000640 <__aeabi_dmul>
 80055f2:	2301      	movs	r3, #1
 80055f4:	9a05      	ldr	r2, [sp, #20]
 80055f6:	3701      	adds	r7, #1
 80055f8:	3208      	adds	r2, #8
 80055fa:	1076      	asrs	r6, r6, #1
 80055fc:	9205      	str	r2, [sp, #20]
 80055fe:	e7cd      	b.n	800559c <_strtod_l+0x4cc>
 8005600:	d0ed      	beq.n	80055de <_strtod_l+0x50e>
 8005602:	4276      	negs	r6, r6
 8005604:	f016 020f 	ands.w	r2, r6, #15
 8005608:	d00a      	beq.n	8005620 <_strtod_l+0x550>
 800560a:	4b15      	ldr	r3, [pc, #84]	; (8005660 <_strtod_l+0x590>)
 800560c:	4640      	mov	r0, r8
 800560e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005612:	4649      	mov	r1, r9
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	f7fb f93c 	bl	8000894 <__aeabi_ddiv>
 800561c:	4680      	mov	r8, r0
 800561e:	4689      	mov	r9, r1
 8005620:	1136      	asrs	r6, r6, #4
 8005622:	d0dc      	beq.n	80055de <_strtod_l+0x50e>
 8005624:	2e1f      	cmp	r6, #31
 8005626:	dd23      	ble.n	8005670 <_strtod_l+0x5a0>
 8005628:	f04f 0b00 	mov.w	fp, #0
 800562c:	f8cd b010 	str.w	fp, [sp, #16]
 8005630:	f8cd b020 	str.w	fp, [sp, #32]
 8005634:	f8cd b018 	str.w	fp, [sp, #24]
 8005638:	2322      	movs	r3, #34	; 0x22
 800563a:	f04f 0800 	mov.w	r8, #0
 800563e:	f04f 0900 	mov.w	r9, #0
 8005642:	f8ca 3000 	str.w	r3, [sl]
 8005646:	e789      	b.n	800555c <_strtod_l+0x48c>
 8005648:	08008b6d 	.word	0x08008b6d
 800564c:	08008ba8 	.word	0x08008ba8
 8005650:	08008b65 	.word	0x08008b65
 8005654:	08008beb 	.word	0x08008beb
 8005658:	7ff00000 	.word	0x7ff00000
 800565c:	08008e98 	.word	0x08008e98
 8005660:	08008d78 	.word	0x08008d78
 8005664:	08008d50 	.word	0x08008d50
 8005668:	7ca00000 	.word	0x7ca00000
 800566c:	7fefffff 	.word	0x7fefffff
 8005670:	f016 0310 	ands.w	r3, r6, #16
 8005674:	bf18      	it	ne
 8005676:	236a      	movne	r3, #106	; 0x6a
 8005678:	4640      	mov	r0, r8
 800567a:	9305      	str	r3, [sp, #20]
 800567c:	4649      	mov	r1, r9
 800567e:	2300      	movs	r3, #0
 8005680:	4fb0      	ldr	r7, [pc, #704]	; (8005944 <_strtod_l+0x874>)
 8005682:	07f2      	lsls	r2, r6, #31
 8005684:	d504      	bpl.n	8005690 <_strtod_l+0x5c0>
 8005686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800568a:	f7fa ffd9 	bl	8000640 <__aeabi_dmul>
 800568e:	2301      	movs	r3, #1
 8005690:	1076      	asrs	r6, r6, #1
 8005692:	f107 0708 	add.w	r7, r7, #8
 8005696:	d1f4      	bne.n	8005682 <_strtod_l+0x5b2>
 8005698:	b10b      	cbz	r3, 800569e <_strtod_l+0x5ce>
 800569a:	4680      	mov	r8, r0
 800569c:	4689      	mov	r9, r1
 800569e:	9b05      	ldr	r3, [sp, #20]
 80056a0:	b1c3      	cbz	r3, 80056d4 <_strtod_l+0x604>
 80056a2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80056a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	4649      	mov	r1, r9
 80056ae:	dd11      	ble.n	80056d4 <_strtod_l+0x604>
 80056b0:	2b1f      	cmp	r3, #31
 80056b2:	f340 8127 	ble.w	8005904 <_strtod_l+0x834>
 80056b6:	2b34      	cmp	r3, #52	; 0x34
 80056b8:	bfd8      	it	le
 80056ba:	f04f 33ff 	movle.w	r3, #4294967295
 80056be:	f04f 0800 	mov.w	r8, #0
 80056c2:	bfcf      	iteee	gt
 80056c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80056c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80056cc:	fa03 f202 	lslle.w	r2, r3, r2
 80056d0:	ea02 0901 	andle.w	r9, r2, r1
 80056d4:	2200      	movs	r2, #0
 80056d6:	2300      	movs	r3, #0
 80056d8:	4640      	mov	r0, r8
 80056da:	4649      	mov	r1, r9
 80056dc:	f7fb fa18 	bl	8000b10 <__aeabi_dcmpeq>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d1a1      	bne.n	8005628 <_strtod_l+0x558>
 80056e4:	9b06      	ldr	r3, [sp, #24]
 80056e6:	465a      	mov	r2, fp
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	4650      	mov	r0, sl
 80056ec:	4623      	mov	r3, r4
 80056ee:	9908      	ldr	r1, [sp, #32]
 80056f0:	f001 fda4 	bl	800723c <__s2b>
 80056f4:	9008      	str	r0, [sp, #32]
 80056f6:	2800      	cmp	r0, #0
 80056f8:	f43f af21 	beq.w	800553e <_strtod_l+0x46e>
 80056fc:	9b04      	ldr	r3, [sp, #16]
 80056fe:	f04f 0b00 	mov.w	fp, #0
 8005702:	1b5d      	subs	r5, r3, r5
 8005704:	9b07      	ldr	r3, [sp, #28]
 8005706:	f8cd b010 	str.w	fp, [sp, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	bfb4      	ite	lt
 800570e:	462b      	movlt	r3, r5
 8005710:	2300      	movge	r3, #0
 8005712:	930e      	str	r3, [sp, #56]	; 0x38
 8005714:	9b07      	ldr	r3, [sp, #28]
 8005716:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800571a:	9314      	str	r3, [sp, #80]	; 0x50
 800571c:	9b08      	ldr	r3, [sp, #32]
 800571e:	4650      	mov	r0, sl
 8005720:	6859      	ldr	r1, [r3, #4]
 8005722:	f001 fce3 	bl	80070ec <_Balloc>
 8005726:	9006      	str	r0, [sp, #24]
 8005728:	2800      	cmp	r0, #0
 800572a:	f43f af10 	beq.w	800554e <_strtod_l+0x47e>
 800572e:	9b08      	ldr	r3, [sp, #32]
 8005730:	300c      	adds	r0, #12
 8005732:	691a      	ldr	r2, [r3, #16]
 8005734:	f103 010c 	add.w	r1, r3, #12
 8005738:	3202      	adds	r2, #2
 800573a:	0092      	lsls	r2, r2, #2
 800573c:	f001 fcc8 	bl	80070d0 <memcpy>
 8005740:	ab1c      	add	r3, sp, #112	; 0x70
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	ab1b      	add	r3, sp, #108	; 0x6c
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	4642      	mov	r2, r8
 800574a:	464b      	mov	r3, r9
 800574c:	4650      	mov	r0, sl
 800574e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005752:	f002 f8b5 	bl	80078c0 <__d2b>
 8005756:	901a      	str	r0, [sp, #104]	; 0x68
 8005758:	2800      	cmp	r0, #0
 800575a:	f43f aef8 	beq.w	800554e <_strtod_l+0x47e>
 800575e:	2101      	movs	r1, #1
 8005760:	4650      	mov	r0, sl
 8005762:	f001 fe03 	bl	800736c <__i2b>
 8005766:	4603      	mov	r3, r0
 8005768:	9004      	str	r0, [sp, #16]
 800576a:	2800      	cmp	r0, #0
 800576c:	f43f aeef 	beq.w	800554e <_strtod_l+0x47e>
 8005770:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005772:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005774:	2d00      	cmp	r5, #0
 8005776:	bfab      	itete	ge
 8005778:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800577a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800577c:	18ee      	addge	r6, r5, r3
 800577e:	1b5c      	sublt	r4, r3, r5
 8005780:	9b05      	ldr	r3, [sp, #20]
 8005782:	bfa8      	it	ge
 8005784:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005786:	eba5 0503 	sub.w	r5, r5, r3
 800578a:	4415      	add	r5, r2
 800578c:	4b6e      	ldr	r3, [pc, #440]	; (8005948 <_strtod_l+0x878>)
 800578e:	f105 35ff 	add.w	r5, r5, #4294967295
 8005792:	bfb8      	it	lt
 8005794:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005796:	429d      	cmp	r5, r3
 8005798:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800579c:	f280 80c4 	bge.w	8005928 <_strtod_l+0x858>
 80057a0:	1b5b      	subs	r3, r3, r5
 80057a2:	2b1f      	cmp	r3, #31
 80057a4:	f04f 0701 	mov.w	r7, #1
 80057a8:	eba2 0203 	sub.w	r2, r2, r3
 80057ac:	f300 80b1 	bgt.w	8005912 <_strtod_l+0x842>
 80057b0:	2500      	movs	r5, #0
 80057b2:	fa07 f303 	lsl.w	r3, r7, r3
 80057b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80057b8:	18b7      	adds	r7, r6, r2
 80057ba:	9b05      	ldr	r3, [sp, #20]
 80057bc:	42be      	cmp	r6, r7
 80057be:	4414      	add	r4, r2
 80057c0:	441c      	add	r4, r3
 80057c2:	4633      	mov	r3, r6
 80057c4:	bfa8      	it	ge
 80057c6:	463b      	movge	r3, r7
 80057c8:	42a3      	cmp	r3, r4
 80057ca:	bfa8      	it	ge
 80057cc:	4623      	movge	r3, r4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	bfc2      	ittt	gt
 80057d2:	1aff      	subgt	r7, r7, r3
 80057d4:	1ae4      	subgt	r4, r4, r3
 80057d6:	1af6      	subgt	r6, r6, r3
 80057d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057da:	2b00      	cmp	r3, #0
 80057dc:	dd17      	ble.n	800580e <_strtod_l+0x73e>
 80057de:	461a      	mov	r2, r3
 80057e0:	4650      	mov	r0, sl
 80057e2:	9904      	ldr	r1, [sp, #16]
 80057e4:	f001 fe80 	bl	80074e8 <__pow5mult>
 80057e8:	9004      	str	r0, [sp, #16]
 80057ea:	2800      	cmp	r0, #0
 80057ec:	f43f aeaf 	beq.w	800554e <_strtod_l+0x47e>
 80057f0:	4601      	mov	r1, r0
 80057f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80057f4:	4650      	mov	r0, sl
 80057f6:	f001 fdcf 	bl	8007398 <__multiply>
 80057fa:	9009      	str	r0, [sp, #36]	; 0x24
 80057fc:	2800      	cmp	r0, #0
 80057fe:	f43f aea6 	beq.w	800554e <_strtod_l+0x47e>
 8005802:	4650      	mov	r0, sl
 8005804:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005806:	f001 fcb1 	bl	800716c <_Bfree>
 800580a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580c:	931a      	str	r3, [sp, #104]	; 0x68
 800580e:	2f00      	cmp	r7, #0
 8005810:	f300 808e 	bgt.w	8005930 <_strtod_l+0x860>
 8005814:	9b07      	ldr	r3, [sp, #28]
 8005816:	2b00      	cmp	r3, #0
 8005818:	dd08      	ble.n	800582c <_strtod_l+0x75c>
 800581a:	4650      	mov	r0, sl
 800581c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800581e:	9906      	ldr	r1, [sp, #24]
 8005820:	f001 fe62 	bl	80074e8 <__pow5mult>
 8005824:	9006      	str	r0, [sp, #24]
 8005826:	2800      	cmp	r0, #0
 8005828:	f43f ae91 	beq.w	800554e <_strtod_l+0x47e>
 800582c:	2c00      	cmp	r4, #0
 800582e:	dd08      	ble.n	8005842 <_strtod_l+0x772>
 8005830:	4622      	mov	r2, r4
 8005832:	4650      	mov	r0, sl
 8005834:	9906      	ldr	r1, [sp, #24]
 8005836:	f001 feb1 	bl	800759c <__lshift>
 800583a:	9006      	str	r0, [sp, #24]
 800583c:	2800      	cmp	r0, #0
 800583e:	f43f ae86 	beq.w	800554e <_strtod_l+0x47e>
 8005842:	2e00      	cmp	r6, #0
 8005844:	dd08      	ble.n	8005858 <_strtod_l+0x788>
 8005846:	4632      	mov	r2, r6
 8005848:	4650      	mov	r0, sl
 800584a:	9904      	ldr	r1, [sp, #16]
 800584c:	f001 fea6 	bl	800759c <__lshift>
 8005850:	9004      	str	r0, [sp, #16]
 8005852:	2800      	cmp	r0, #0
 8005854:	f43f ae7b 	beq.w	800554e <_strtod_l+0x47e>
 8005858:	4650      	mov	r0, sl
 800585a:	9a06      	ldr	r2, [sp, #24]
 800585c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800585e:	f001 ff29 	bl	80076b4 <__mdiff>
 8005862:	4683      	mov	fp, r0
 8005864:	2800      	cmp	r0, #0
 8005866:	f43f ae72 	beq.w	800554e <_strtod_l+0x47e>
 800586a:	2400      	movs	r4, #0
 800586c:	68c3      	ldr	r3, [r0, #12]
 800586e:	9904      	ldr	r1, [sp, #16]
 8005870:	60c4      	str	r4, [r0, #12]
 8005872:	930b      	str	r3, [sp, #44]	; 0x2c
 8005874:	f001 ff02 	bl	800767c <__mcmp>
 8005878:	42a0      	cmp	r0, r4
 800587a:	da6b      	bge.n	8005954 <_strtod_l+0x884>
 800587c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800587e:	ea53 0308 	orrs.w	r3, r3, r8
 8005882:	f040 8091 	bne.w	80059a8 <_strtod_l+0x8d8>
 8005886:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800588a:	2b00      	cmp	r3, #0
 800588c:	f040 808c 	bne.w	80059a8 <_strtod_l+0x8d8>
 8005890:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005894:	0d1b      	lsrs	r3, r3, #20
 8005896:	051b      	lsls	r3, r3, #20
 8005898:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800589c:	f240 8084 	bls.w	80059a8 <_strtod_l+0x8d8>
 80058a0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80058a4:	b91b      	cbnz	r3, 80058ae <_strtod_l+0x7de>
 80058a6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	dd7c      	ble.n	80059a8 <_strtod_l+0x8d8>
 80058ae:	4659      	mov	r1, fp
 80058b0:	2201      	movs	r2, #1
 80058b2:	4650      	mov	r0, sl
 80058b4:	f001 fe72 	bl	800759c <__lshift>
 80058b8:	9904      	ldr	r1, [sp, #16]
 80058ba:	4683      	mov	fp, r0
 80058bc:	f001 fede 	bl	800767c <__mcmp>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	dd71      	ble.n	80059a8 <_strtod_l+0x8d8>
 80058c4:	9905      	ldr	r1, [sp, #20]
 80058c6:	464b      	mov	r3, r9
 80058c8:	4a20      	ldr	r2, [pc, #128]	; (800594c <_strtod_l+0x87c>)
 80058ca:	2900      	cmp	r1, #0
 80058cc:	f000 808c 	beq.w	80059e8 <_strtod_l+0x918>
 80058d0:	ea02 0109 	and.w	r1, r2, r9
 80058d4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80058d8:	f300 8086 	bgt.w	80059e8 <_strtod_l+0x918>
 80058dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80058e0:	f77f aeaa 	ble.w	8005638 <_strtod_l+0x568>
 80058e4:	4640      	mov	r0, r8
 80058e6:	4649      	mov	r1, r9
 80058e8:	4b19      	ldr	r3, [pc, #100]	; (8005950 <_strtod_l+0x880>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	f7fa fea8 	bl	8000640 <__aeabi_dmul>
 80058f0:	460b      	mov	r3, r1
 80058f2:	4303      	orrs	r3, r0
 80058f4:	bf08      	it	eq
 80058f6:	2322      	moveq	r3, #34	; 0x22
 80058f8:	4680      	mov	r8, r0
 80058fa:	4689      	mov	r9, r1
 80058fc:	bf08      	it	eq
 80058fe:	f8ca 3000 	streq.w	r3, [sl]
 8005902:	e62f      	b.n	8005564 <_strtod_l+0x494>
 8005904:	f04f 32ff 	mov.w	r2, #4294967295
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	ea03 0808 	and.w	r8, r3, r8
 8005910:	e6e0      	b.n	80056d4 <_strtod_l+0x604>
 8005912:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005916:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800591a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800591e:	35e2      	adds	r5, #226	; 0xe2
 8005920:	fa07 f505 	lsl.w	r5, r7, r5
 8005924:	970f      	str	r7, [sp, #60]	; 0x3c
 8005926:	e747      	b.n	80057b8 <_strtod_l+0x6e8>
 8005928:	2301      	movs	r3, #1
 800592a:	2500      	movs	r5, #0
 800592c:	930f      	str	r3, [sp, #60]	; 0x3c
 800592e:	e743      	b.n	80057b8 <_strtod_l+0x6e8>
 8005930:	463a      	mov	r2, r7
 8005932:	4650      	mov	r0, sl
 8005934:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005936:	f001 fe31 	bl	800759c <__lshift>
 800593a:	901a      	str	r0, [sp, #104]	; 0x68
 800593c:	2800      	cmp	r0, #0
 800593e:	f47f af69 	bne.w	8005814 <_strtod_l+0x744>
 8005942:	e604      	b.n	800554e <_strtod_l+0x47e>
 8005944:	08008bc0 	.word	0x08008bc0
 8005948:	fffffc02 	.word	0xfffffc02
 800594c:	7ff00000 	.word	0x7ff00000
 8005950:	39500000 	.word	0x39500000
 8005954:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005958:	d165      	bne.n	8005a26 <_strtod_l+0x956>
 800595a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800595c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005960:	b35a      	cbz	r2, 80059ba <_strtod_l+0x8ea>
 8005962:	4a99      	ldr	r2, [pc, #612]	; (8005bc8 <_strtod_l+0xaf8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d12b      	bne.n	80059c0 <_strtod_l+0x8f0>
 8005968:	9b05      	ldr	r3, [sp, #20]
 800596a:	4641      	mov	r1, r8
 800596c:	b303      	cbz	r3, 80059b0 <_strtod_l+0x8e0>
 800596e:	464a      	mov	r2, r9
 8005970:	4b96      	ldr	r3, [pc, #600]	; (8005bcc <_strtod_l+0xafc>)
 8005972:	4013      	ands	r3, r2
 8005974:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005978:	f04f 32ff 	mov.w	r2, #4294967295
 800597c:	d81b      	bhi.n	80059b6 <_strtod_l+0x8e6>
 800597e:	0d1b      	lsrs	r3, r3, #20
 8005980:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	4299      	cmp	r1, r3
 800598a:	d119      	bne.n	80059c0 <_strtod_l+0x8f0>
 800598c:	4b90      	ldr	r3, [pc, #576]	; (8005bd0 <_strtod_l+0xb00>)
 800598e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005990:	429a      	cmp	r2, r3
 8005992:	d102      	bne.n	800599a <_strtod_l+0x8ca>
 8005994:	3101      	adds	r1, #1
 8005996:	f43f adda 	beq.w	800554e <_strtod_l+0x47e>
 800599a:	f04f 0800 	mov.w	r8, #0
 800599e:	4b8b      	ldr	r3, [pc, #556]	; (8005bcc <_strtod_l+0xafc>)
 80059a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059a2:	401a      	ands	r2, r3
 80059a4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80059a8:	9b05      	ldr	r3, [sp, #20]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d19a      	bne.n	80058e4 <_strtod_l+0x814>
 80059ae:	e5d9      	b.n	8005564 <_strtod_l+0x494>
 80059b0:	f04f 33ff 	mov.w	r3, #4294967295
 80059b4:	e7e8      	b.n	8005988 <_strtod_l+0x8b8>
 80059b6:	4613      	mov	r3, r2
 80059b8:	e7e6      	b.n	8005988 <_strtod_l+0x8b8>
 80059ba:	ea53 0308 	orrs.w	r3, r3, r8
 80059be:	d081      	beq.n	80058c4 <_strtod_l+0x7f4>
 80059c0:	b1e5      	cbz	r5, 80059fc <_strtod_l+0x92c>
 80059c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c4:	421d      	tst	r5, r3
 80059c6:	d0ef      	beq.n	80059a8 <_strtod_l+0x8d8>
 80059c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ca:	4640      	mov	r0, r8
 80059cc:	4649      	mov	r1, r9
 80059ce:	9a05      	ldr	r2, [sp, #20]
 80059d0:	b1c3      	cbz	r3, 8005a04 <_strtod_l+0x934>
 80059d2:	f7ff fb59 	bl	8005088 <sulp>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059de:	f7fa fc79 	bl	80002d4 <__adddf3>
 80059e2:	4680      	mov	r8, r0
 80059e4:	4689      	mov	r9, r1
 80059e6:	e7df      	b.n	80059a8 <_strtod_l+0x8d8>
 80059e8:	4013      	ands	r3, r2
 80059ea:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80059ee:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80059f2:	f04f 38ff 	mov.w	r8, #4294967295
 80059f6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80059fa:	e7d5      	b.n	80059a8 <_strtod_l+0x8d8>
 80059fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059fe:	ea13 0f08 	tst.w	r3, r8
 8005a02:	e7e0      	b.n	80059c6 <_strtod_l+0x8f6>
 8005a04:	f7ff fb40 	bl	8005088 <sulp>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a10:	f7fa fc5e 	bl	80002d0 <__aeabi_dsub>
 8005a14:	2200      	movs	r2, #0
 8005a16:	2300      	movs	r3, #0
 8005a18:	4680      	mov	r8, r0
 8005a1a:	4689      	mov	r9, r1
 8005a1c:	f7fb f878 	bl	8000b10 <__aeabi_dcmpeq>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d0c1      	beq.n	80059a8 <_strtod_l+0x8d8>
 8005a24:	e608      	b.n	8005638 <_strtod_l+0x568>
 8005a26:	4658      	mov	r0, fp
 8005a28:	9904      	ldr	r1, [sp, #16]
 8005a2a:	f001 ffa5 	bl	8007978 <__ratio>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a34:	4606      	mov	r6, r0
 8005a36:	460f      	mov	r7, r1
 8005a38:	f7fb f87e 	bl	8000b38 <__aeabi_dcmple>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d070      	beq.n	8005b22 <_strtod_l+0xa52>
 8005a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d042      	beq.n	8005acc <_strtod_l+0x9fc>
 8005a46:	2600      	movs	r6, #0
 8005a48:	4f62      	ldr	r7, [pc, #392]	; (8005bd4 <_strtod_l+0xb04>)
 8005a4a:	4d62      	ldr	r5, [pc, #392]	; (8005bd4 <_strtod_l+0xb04>)
 8005a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a52:	0d1b      	lsrs	r3, r3, #20
 8005a54:	051b      	lsls	r3, r3, #20
 8005a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a5a:	4b5f      	ldr	r3, [pc, #380]	; (8005bd8 <_strtod_l+0xb08>)
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	f040 80c3 	bne.w	8005be8 <_strtod_l+0xb18>
 8005a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a64:	4640      	mov	r0, r8
 8005a66:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	f001 feae 	bl	80077cc <__ulp>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4630      	mov	r0, r6
 8005a76:	4639      	mov	r1, r7
 8005a78:	f7fa fde2 	bl	8000640 <__aeabi_dmul>
 8005a7c:	4642      	mov	r2, r8
 8005a7e:	464b      	mov	r3, r9
 8005a80:	f7fa fc28 	bl	80002d4 <__adddf3>
 8005a84:	460b      	mov	r3, r1
 8005a86:	4951      	ldr	r1, [pc, #324]	; (8005bcc <_strtod_l+0xafc>)
 8005a88:	4a54      	ldr	r2, [pc, #336]	; (8005bdc <_strtod_l+0xb0c>)
 8005a8a:	4019      	ands	r1, r3
 8005a8c:	4291      	cmp	r1, r2
 8005a8e:	4680      	mov	r8, r0
 8005a90:	d95d      	bls.n	8005b4e <_strtod_l+0xa7e>
 8005a92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a94:	4b4e      	ldr	r3, [pc, #312]	; (8005bd0 <_strtod_l+0xb00>)
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d103      	bne.n	8005aa2 <_strtod_l+0x9d2>
 8005a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	f43f ad56 	beq.w	800554e <_strtod_l+0x47e>
 8005aa2:	f04f 38ff 	mov.w	r8, #4294967295
 8005aa6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005bd0 <_strtod_l+0xb00>
 8005aaa:	4650      	mov	r0, sl
 8005aac:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005aae:	f001 fb5d 	bl	800716c <_Bfree>
 8005ab2:	4650      	mov	r0, sl
 8005ab4:	9906      	ldr	r1, [sp, #24]
 8005ab6:	f001 fb59 	bl	800716c <_Bfree>
 8005aba:	4650      	mov	r0, sl
 8005abc:	9904      	ldr	r1, [sp, #16]
 8005abe:	f001 fb55 	bl	800716c <_Bfree>
 8005ac2:	4659      	mov	r1, fp
 8005ac4:	4650      	mov	r0, sl
 8005ac6:	f001 fb51 	bl	800716c <_Bfree>
 8005aca:	e627      	b.n	800571c <_strtod_l+0x64c>
 8005acc:	f1b8 0f00 	cmp.w	r8, #0
 8005ad0:	d119      	bne.n	8005b06 <_strtod_l+0xa36>
 8005ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ad8:	b9e3      	cbnz	r3, 8005b14 <_strtod_l+0xa44>
 8005ada:	2200      	movs	r2, #0
 8005adc:	4630      	mov	r0, r6
 8005ade:	4639      	mov	r1, r7
 8005ae0:	4b3c      	ldr	r3, [pc, #240]	; (8005bd4 <_strtod_l+0xb04>)
 8005ae2:	f7fb f81f 	bl	8000b24 <__aeabi_dcmplt>
 8005ae6:	b9c8      	cbnz	r0, 8005b1c <_strtod_l+0xa4c>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	4630      	mov	r0, r6
 8005aec:	4639      	mov	r1, r7
 8005aee:	4b3c      	ldr	r3, [pc, #240]	; (8005be0 <_strtod_l+0xb10>)
 8005af0:	f7fa fda6 	bl	8000640 <__aeabi_dmul>
 8005af4:	4604      	mov	r4, r0
 8005af6:	460d      	mov	r5, r1
 8005af8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005afc:	9416      	str	r4, [sp, #88]	; 0x58
 8005afe:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b00:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005b04:	e7a2      	b.n	8005a4c <_strtod_l+0x97c>
 8005b06:	f1b8 0f01 	cmp.w	r8, #1
 8005b0a:	d103      	bne.n	8005b14 <_strtod_l+0xa44>
 8005b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f43f ad92 	beq.w	8005638 <_strtod_l+0x568>
 8005b14:	2600      	movs	r6, #0
 8005b16:	2400      	movs	r4, #0
 8005b18:	4f32      	ldr	r7, [pc, #200]	; (8005be4 <_strtod_l+0xb14>)
 8005b1a:	e796      	b.n	8005a4a <_strtod_l+0x97a>
 8005b1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005b1e:	4d30      	ldr	r5, [pc, #192]	; (8005be0 <_strtod_l+0xb10>)
 8005b20:	e7ea      	b.n	8005af8 <_strtod_l+0xa28>
 8005b22:	4b2f      	ldr	r3, [pc, #188]	; (8005be0 <_strtod_l+0xb10>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	4630      	mov	r0, r6
 8005b28:	4639      	mov	r1, r7
 8005b2a:	f7fa fd89 	bl	8000640 <__aeabi_dmul>
 8005b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b30:	4604      	mov	r4, r0
 8005b32:	460d      	mov	r5, r1
 8005b34:	b933      	cbnz	r3, 8005b44 <_strtod_l+0xa74>
 8005b36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b3a:	9010      	str	r0, [sp, #64]	; 0x40
 8005b3c:	9311      	str	r3, [sp, #68]	; 0x44
 8005b3e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005b42:	e783      	b.n	8005a4c <_strtod_l+0x97c>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005b4c:	e7f7      	b.n	8005b3e <_strtod_l+0xa6e>
 8005b4e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005b52:	9b05      	ldr	r3, [sp, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1a8      	bne.n	8005aaa <_strtod_l+0x9da>
 8005b58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b5e:	0d1b      	lsrs	r3, r3, #20
 8005b60:	051b      	lsls	r3, r3, #20
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d1a1      	bne.n	8005aaa <_strtod_l+0x9da>
 8005b66:	4620      	mov	r0, r4
 8005b68:	4629      	mov	r1, r5
 8005b6a:	f7fb fa55 	bl	8001018 <__aeabi_d2lz>
 8005b6e:	f7fa fd39 	bl	80005e4 <__aeabi_l2d>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4620      	mov	r0, r4
 8005b78:	4629      	mov	r1, r5
 8005b7a:	f7fa fba9 	bl	80002d0 <__aeabi_dsub>
 8005b7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b84:	ea43 0308 	orr.w	r3, r3, r8
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	460d      	mov	r5, r1
 8005b8e:	d066      	beq.n	8005c5e <_strtod_l+0xb8e>
 8005b90:	a309      	add	r3, pc, #36	; (adr r3, 8005bb8 <_strtod_l+0xae8>)
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	f7fa ffc5 	bl	8000b24 <__aeabi_dcmplt>
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	f47f ace2 	bne.w	8005564 <_strtod_l+0x494>
 8005ba0:	a307      	add	r3, pc, #28	; (adr r3, 8005bc0 <_strtod_l+0xaf0>)
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	4629      	mov	r1, r5
 8005baa:	f7fa ffd9 	bl	8000b60 <__aeabi_dcmpgt>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	f43f af7b 	beq.w	8005aaa <_strtod_l+0x9da>
 8005bb4:	e4d6      	b.n	8005564 <_strtod_l+0x494>
 8005bb6:	bf00      	nop
 8005bb8:	94a03595 	.word	0x94a03595
 8005bbc:	3fdfffff 	.word	0x3fdfffff
 8005bc0:	35afe535 	.word	0x35afe535
 8005bc4:	3fe00000 	.word	0x3fe00000
 8005bc8:	000fffff 	.word	0x000fffff
 8005bcc:	7ff00000 	.word	0x7ff00000
 8005bd0:	7fefffff 	.word	0x7fefffff
 8005bd4:	3ff00000 	.word	0x3ff00000
 8005bd8:	7fe00000 	.word	0x7fe00000
 8005bdc:	7c9fffff 	.word	0x7c9fffff
 8005be0:	3fe00000 	.word	0x3fe00000
 8005be4:	bff00000 	.word	0xbff00000
 8005be8:	9b05      	ldr	r3, [sp, #20]
 8005bea:	b313      	cbz	r3, 8005c32 <_strtod_l+0xb62>
 8005bec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005bf2:	d81e      	bhi.n	8005c32 <_strtod_l+0xb62>
 8005bf4:	a326      	add	r3, pc, #152	; (adr r3, 8005c90 <_strtod_l+0xbc0>)
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	4629      	mov	r1, r5
 8005bfe:	f7fa ff9b 	bl	8000b38 <__aeabi_dcmple>
 8005c02:	b190      	cbz	r0, 8005c2a <_strtod_l+0xb5a>
 8005c04:	4629      	mov	r1, r5
 8005c06:	4620      	mov	r0, r4
 8005c08:	f7fa fff2 	bl	8000bf0 <__aeabi_d2uiz>
 8005c0c:	2801      	cmp	r0, #1
 8005c0e:	bf38      	it	cc
 8005c10:	2001      	movcc	r0, #1
 8005c12:	f7fa fc9b 	bl	800054c <__aeabi_ui2d>
 8005c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c18:	4604      	mov	r4, r0
 8005c1a:	460d      	mov	r5, r1
 8005c1c:	b9d3      	cbnz	r3, 8005c54 <_strtod_l+0xb84>
 8005c1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c22:	9012      	str	r0, [sp, #72]	; 0x48
 8005c24:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c26:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005c2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c2c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005c30:	1a9f      	subs	r7, r3, r2
 8005c32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c36:	f001 fdc9 	bl	80077cc <__ulp>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4630      	mov	r0, r6
 8005c40:	4639      	mov	r1, r7
 8005c42:	f7fa fcfd 	bl	8000640 <__aeabi_dmul>
 8005c46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c4a:	f7fa fb43 	bl	80002d4 <__adddf3>
 8005c4e:	4680      	mov	r8, r0
 8005c50:	4689      	mov	r9, r1
 8005c52:	e77e      	b.n	8005b52 <_strtod_l+0xa82>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005c5c:	e7e3      	b.n	8005c26 <_strtod_l+0xb56>
 8005c5e:	a30e      	add	r3, pc, #56	; (adr r3, 8005c98 <_strtod_l+0xbc8>)
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f7fa ff5e 	bl	8000b24 <__aeabi_dcmplt>
 8005c68:	e7a1      	b.n	8005bae <_strtod_l+0xade>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	930a      	str	r3, [sp, #40]	; 0x28
 8005c6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c70:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	f7ff ba71 	b.w	800515a <_strtod_l+0x8a>
 8005c78:	2a65      	cmp	r2, #101	; 0x65
 8005c7a:	f43f ab63 	beq.w	8005344 <_strtod_l+0x274>
 8005c7e:	2a45      	cmp	r2, #69	; 0x45
 8005c80:	f43f ab60 	beq.w	8005344 <_strtod_l+0x274>
 8005c84:	2301      	movs	r3, #1
 8005c86:	f7ff bb95 	b.w	80053b4 <_strtod_l+0x2e4>
 8005c8a:	bf00      	nop
 8005c8c:	f3af 8000 	nop.w
 8005c90:	ffc00000 	.word	0xffc00000
 8005c94:	41dfffff 	.word	0x41dfffff
 8005c98:	94a03595 	.word	0x94a03595
 8005c9c:	3fcfffff 	.word	0x3fcfffff

08005ca0 <strtod>:
 8005ca0:	460a      	mov	r2, r1
 8005ca2:	4601      	mov	r1, r0
 8005ca4:	4802      	ldr	r0, [pc, #8]	; (8005cb0 <strtod+0x10>)
 8005ca6:	4b03      	ldr	r3, [pc, #12]	; (8005cb4 <strtod+0x14>)
 8005ca8:	6800      	ldr	r0, [r0, #0]
 8005caa:	f7ff ba11 	b.w	80050d0 <_strtod_l>
 8005cae:	bf00      	nop
 8005cb0:	20000014 	.word	0x20000014
 8005cb4:	2000007c 	.word	0x2000007c

08005cb8 <quorem>:
 8005cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	6903      	ldr	r3, [r0, #16]
 8005cbe:	690c      	ldr	r4, [r1, #16]
 8005cc0:	4607      	mov	r7, r0
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	f2c0 8082 	blt.w	8005dcc <quorem+0x114>
 8005cc8:	3c01      	subs	r4, #1
 8005cca:	f100 0514 	add.w	r5, r0, #20
 8005cce:	f101 0814 	add.w	r8, r1, #20
 8005cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ce8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005cec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cf0:	d331      	bcc.n	8005d56 <quorem+0x9e>
 8005cf2:	f04f 0e00 	mov.w	lr, #0
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	46ac      	mov	ip, r5
 8005cfa:	46f2      	mov	sl, lr
 8005cfc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d00:	b293      	uxth	r3, r2
 8005d02:	fb06 e303 	mla	r3, r6, r3, lr
 8005d06:	0c12      	lsrs	r2, r2, #16
 8005d08:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	fb06 e202 	mla	r2, r6, r2, lr
 8005d12:	ebaa 0303 	sub.w	r3, sl, r3
 8005d16:	f8dc a000 	ldr.w	sl, [ip]
 8005d1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d1e:	fa1f fa8a 	uxth.w	sl, sl
 8005d22:	4453      	add	r3, sl
 8005d24:	f8dc a000 	ldr.w	sl, [ip]
 8005d28:	b292      	uxth	r2, r2
 8005d2a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d38:	4581      	cmp	r9, r0
 8005d3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d3e:	f84c 3b04 	str.w	r3, [ip], #4
 8005d42:	d2db      	bcs.n	8005cfc <quorem+0x44>
 8005d44:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d48:	b92b      	cbnz	r3, 8005d56 <quorem+0x9e>
 8005d4a:	9b01      	ldr	r3, [sp, #4]
 8005d4c:	3b04      	subs	r3, #4
 8005d4e:	429d      	cmp	r5, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	d32f      	bcc.n	8005db4 <quorem+0xfc>
 8005d54:	613c      	str	r4, [r7, #16]
 8005d56:	4638      	mov	r0, r7
 8005d58:	f001 fc90 	bl	800767c <__mcmp>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	db25      	blt.n	8005dac <quorem+0xf4>
 8005d60:	4628      	mov	r0, r5
 8005d62:	f04f 0c00 	mov.w	ip, #0
 8005d66:	3601      	adds	r6, #1
 8005d68:	f858 1b04 	ldr.w	r1, [r8], #4
 8005d6c:	f8d0 e000 	ldr.w	lr, [r0]
 8005d70:	b28b      	uxth	r3, r1
 8005d72:	ebac 0303 	sub.w	r3, ip, r3
 8005d76:	fa1f f28e 	uxth.w	r2, lr
 8005d7a:	4413      	add	r3, r2
 8005d7c:	0c0a      	lsrs	r2, r1, #16
 8005d7e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d8c:	45c1      	cmp	r9, r8
 8005d8e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d92:	f840 3b04 	str.w	r3, [r0], #4
 8005d96:	d2e7      	bcs.n	8005d68 <quorem+0xb0>
 8005d98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005da0:	b922      	cbnz	r2, 8005dac <quorem+0xf4>
 8005da2:	3b04      	subs	r3, #4
 8005da4:	429d      	cmp	r5, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	d30a      	bcc.n	8005dc0 <quorem+0x108>
 8005daa:	613c      	str	r4, [r7, #16]
 8005dac:	4630      	mov	r0, r6
 8005dae:	b003      	add	sp, #12
 8005db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db4:	6812      	ldr	r2, [r2, #0]
 8005db6:	3b04      	subs	r3, #4
 8005db8:	2a00      	cmp	r2, #0
 8005dba:	d1cb      	bne.n	8005d54 <quorem+0x9c>
 8005dbc:	3c01      	subs	r4, #1
 8005dbe:	e7c6      	b.n	8005d4e <quorem+0x96>
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	3b04      	subs	r3, #4
 8005dc4:	2a00      	cmp	r2, #0
 8005dc6:	d1f0      	bne.n	8005daa <quorem+0xf2>
 8005dc8:	3c01      	subs	r4, #1
 8005dca:	e7eb      	b.n	8005da4 <quorem+0xec>
 8005dcc:	2000      	movs	r0, #0
 8005dce:	e7ee      	b.n	8005dae <quorem+0xf6>

08005dd0 <_dtoa_r>:
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	4616      	mov	r6, r2
 8005dd6:	461f      	mov	r7, r3
 8005dd8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005dda:	b099      	sub	sp, #100	; 0x64
 8005ddc:	4605      	mov	r5, r0
 8005dde:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005de2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005de6:	b974      	cbnz	r4, 8005e06 <_dtoa_r+0x36>
 8005de8:	2010      	movs	r0, #16
 8005dea:	f001 f949 	bl	8007080 <malloc>
 8005dee:	4602      	mov	r2, r0
 8005df0:	6268      	str	r0, [r5, #36]	; 0x24
 8005df2:	b920      	cbnz	r0, 8005dfe <_dtoa_r+0x2e>
 8005df4:	21ea      	movs	r1, #234	; 0xea
 8005df6:	4ba8      	ldr	r3, [pc, #672]	; (8006098 <_dtoa_r+0x2c8>)
 8005df8:	48a8      	ldr	r0, [pc, #672]	; (800609c <_dtoa_r+0x2cc>)
 8005dfa:	f002 f8b3 	bl	8007f64 <__assert_func>
 8005dfe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e02:	6004      	str	r4, [r0, #0]
 8005e04:	60c4      	str	r4, [r0, #12]
 8005e06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e08:	6819      	ldr	r1, [r3, #0]
 8005e0a:	b151      	cbz	r1, 8005e22 <_dtoa_r+0x52>
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	2301      	movs	r3, #1
 8005e10:	4093      	lsls	r3, r2
 8005e12:	604a      	str	r2, [r1, #4]
 8005e14:	608b      	str	r3, [r1, #8]
 8005e16:	4628      	mov	r0, r5
 8005e18:	f001 f9a8 	bl	800716c <_Bfree>
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	1e3b      	subs	r3, r7, #0
 8005e24:	bfaf      	iteee	ge
 8005e26:	2300      	movge	r3, #0
 8005e28:	2201      	movlt	r2, #1
 8005e2a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e2e:	9305      	strlt	r3, [sp, #20]
 8005e30:	bfa8      	it	ge
 8005e32:	f8c8 3000 	strge.w	r3, [r8]
 8005e36:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005e3a:	4b99      	ldr	r3, [pc, #612]	; (80060a0 <_dtoa_r+0x2d0>)
 8005e3c:	bfb8      	it	lt
 8005e3e:	f8c8 2000 	strlt.w	r2, [r8]
 8005e42:	ea33 0309 	bics.w	r3, r3, r9
 8005e46:	d119      	bne.n	8005e7c <_dtoa_r+0xac>
 8005e48:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e54:	4333      	orrs	r3, r6
 8005e56:	f000 857f 	beq.w	8006958 <_dtoa_r+0xb88>
 8005e5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e5c:	b953      	cbnz	r3, 8005e74 <_dtoa_r+0xa4>
 8005e5e:	4b91      	ldr	r3, [pc, #580]	; (80060a4 <_dtoa_r+0x2d4>)
 8005e60:	e022      	b.n	8005ea8 <_dtoa_r+0xd8>
 8005e62:	4b91      	ldr	r3, [pc, #580]	; (80060a8 <_dtoa_r+0x2d8>)
 8005e64:	9303      	str	r3, [sp, #12]
 8005e66:	3308      	adds	r3, #8
 8005e68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	9803      	ldr	r0, [sp, #12]
 8005e6e:	b019      	add	sp, #100	; 0x64
 8005e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e74:	4b8b      	ldr	r3, [pc, #556]	; (80060a4 <_dtoa_r+0x2d4>)
 8005e76:	9303      	str	r3, [sp, #12]
 8005e78:	3303      	adds	r3, #3
 8005e7a:	e7f5      	b.n	8005e68 <_dtoa_r+0x98>
 8005e7c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e80:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005e84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f7fa fe40 	bl	8000b10 <__aeabi_dcmpeq>
 8005e90:	4680      	mov	r8, r0
 8005e92:	b158      	cbz	r0, 8005eac <_dtoa_r+0xdc>
 8005e94:	2301      	movs	r3, #1
 8005e96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 8558 	beq.w	8006952 <_dtoa_r+0xb82>
 8005ea2:	4882      	ldr	r0, [pc, #520]	; (80060ac <_dtoa_r+0x2dc>)
 8005ea4:	6018      	str	r0, [r3, #0]
 8005ea6:	1e43      	subs	r3, r0, #1
 8005ea8:	9303      	str	r3, [sp, #12]
 8005eaa:	e7df      	b.n	8005e6c <_dtoa_r+0x9c>
 8005eac:	ab16      	add	r3, sp, #88	; 0x58
 8005eae:	9301      	str	r3, [sp, #4]
 8005eb0:	ab17      	add	r3, sp, #92	; 0x5c
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005eba:	f001 fd01 	bl	80078c0 <__d2b>
 8005ebe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005ec2:	4683      	mov	fp, r0
 8005ec4:	2c00      	cmp	r4, #0
 8005ec6:	d07f      	beq.n	8005fc8 <_dtoa_r+0x1f8>
 8005ec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ece:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005ed2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ed6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005eda:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005ede:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	4b72      	ldr	r3, [pc, #456]	; (80060b0 <_dtoa_r+0x2e0>)
 8005ee6:	f7fa f9f3 	bl	80002d0 <__aeabi_dsub>
 8005eea:	a365      	add	r3, pc, #404	; (adr r3, 8006080 <_dtoa_r+0x2b0>)
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	f7fa fba6 	bl	8000640 <__aeabi_dmul>
 8005ef4:	a364      	add	r3, pc, #400	; (adr r3, 8006088 <_dtoa_r+0x2b8>)
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	f7fa f9eb 	bl	80002d4 <__adddf3>
 8005efe:	4606      	mov	r6, r0
 8005f00:	4620      	mov	r0, r4
 8005f02:	460f      	mov	r7, r1
 8005f04:	f7fa fb32 	bl	800056c <__aeabi_i2d>
 8005f08:	a361      	add	r3, pc, #388	; (adr r3, 8006090 <_dtoa_r+0x2c0>)
 8005f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0e:	f7fa fb97 	bl	8000640 <__aeabi_dmul>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4630      	mov	r0, r6
 8005f18:	4639      	mov	r1, r7
 8005f1a:	f7fa f9db 	bl	80002d4 <__adddf3>
 8005f1e:	4606      	mov	r6, r0
 8005f20:	460f      	mov	r7, r1
 8005f22:	f7fa fe3d 	bl	8000ba0 <__aeabi_d2iz>
 8005f26:	2200      	movs	r2, #0
 8005f28:	4682      	mov	sl, r0
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	4639      	mov	r1, r7
 8005f30:	f7fa fdf8 	bl	8000b24 <__aeabi_dcmplt>
 8005f34:	b148      	cbz	r0, 8005f4a <_dtoa_r+0x17a>
 8005f36:	4650      	mov	r0, sl
 8005f38:	f7fa fb18 	bl	800056c <__aeabi_i2d>
 8005f3c:	4632      	mov	r2, r6
 8005f3e:	463b      	mov	r3, r7
 8005f40:	f7fa fde6 	bl	8000b10 <__aeabi_dcmpeq>
 8005f44:	b908      	cbnz	r0, 8005f4a <_dtoa_r+0x17a>
 8005f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f4a:	f1ba 0f16 	cmp.w	sl, #22
 8005f4e:	d858      	bhi.n	8006002 <_dtoa_r+0x232>
 8005f50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f54:	4b57      	ldr	r3, [pc, #348]	; (80060b4 <_dtoa_r+0x2e4>)
 8005f56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f7fa fde1 	bl	8000b24 <__aeabi_dcmplt>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d04f      	beq.n	8006006 <_dtoa_r+0x236>
 8005f66:	2300      	movs	r3, #0
 8005f68:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005f70:	1b1c      	subs	r4, r3, r4
 8005f72:	1e63      	subs	r3, r4, #1
 8005f74:	9309      	str	r3, [sp, #36]	; 0x24
 8005f76:	bf49      	itett	mi
 8005f78:	f1c4 0301 	rsbmi	r3, r4, #1
 8005f7c:	2300      	movpl	r3, #0
 8005f7e:	9306      	strmi	r3, [sp, #24]
 8005f80:	2300      	movmi	r3, #0
 8005f82:	bf54      	ite	pl
 8005f84:	9306      	strpl	r3, [sp, #24]
 8005f86:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005f88:	f1ba 0f00 	cmp.w	sl, #0
 8005f8c:	db3d      	blt.n	800600a <_dtoa_r+0x23a>
 8005f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f90:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005f94:	4453      	add	r3, sl
 8005f96:	9309      	str	r3, [sp, #36]	; 0x24
 8005f98:	2300      	movs	r3, #0
 8005f9a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f9e:	2b09      	cmp	r3, #9
 8005fa0:	f200 808c 	bhi.w	80060bc <_dtoa_r+0x2ec>
 8005fa4:	2b05      	cmp	r3, #5
 8005fa6:	bfc4      	itt	gt
 8005fa8:	3b04      	subgt	r3, #4
 8005faa:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005fac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fae:	bfc8      	it	gt
 8005fb0:	2400      	movgt	r4, #0
 8005fb2:	f1a3 0302 	sub.w	r3, r3, #2
 8005fb6:	bfd8      	it	le
 8005fb8:	2401      	movle	r4, #1
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	f200 808a 	bhi.w	80060d4 <_dtoa_r+0x304>
 8005fc0:	e8df f003 	tbb	[pc, r3]
 8005fc4:	5b4d4f2d 	.word	0x5b4d4f2d
 8005fc8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005fcc:	441c      	add	r4, r3
 8005fce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	bfc3      	ittte	gt
 8005fd6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fda:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005fde:	fa09 f303 	lslgt.w	r3, r9, r3
 8005fe2:	f1c3 0320 	rsble	r3, r3, #32
 8005fe6:	bfc6      	itte	gt
 8005fe8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005fec:	4318      	orrgt	r0, r3
 8005fee:	fa06 f003 	lslle.w	r0, r6, r3
 8005ff2:	f7fa faab 	bl	800054c <__aeabi_ui2d>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005ffc:	3c01      	subs	r4, #1
 8005ffe:	9313      	str	r3, [sp, #76]	; 0x4c
 8006000:	e76f      	b.n	8005ee2 <_dtoa_r+0x112>
 8006002:	2301      	movs	r3, #1
 8006004:	e7b2      	b.n	8005f6c <_dtoa_r+0x19c>
 8006006:	900f      	str	r0, [sp, #60]	; 0x3c
 8006008:	e7b1      	b.n	8005f6e <_dtoa_r+0x19e>
 800600a:	9b06      	ldr	r3, [sp, #24]
 800600c:	eba3 030a 	sub.w	r3, r3, sl
 8006010:	9306      	str	r3, [sp, #24]
 8006012:	f1ca 0300 	rsb	r3, sl, #0
 8006016:	930a      	str	r3, [sp, #40]	; 0x28
 8006018:	2300      	movs	r3, #0
 800601a:	930e      	str	r3, [sp, #56]	; 0x38
 800601c:	e7be      	b.n	8005f9c <_dtoa_r+0x1cc>
 800601e:	2300      	movs	r3, #0
 8006020:	930b      	str	r3, [sp, #44]	; 0x2c
 8006022:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006024:	2b00      	cmp	r3, #0
 8006026:	dc58      	bgt.n	80060da <_dtoa_r+0x30a>
 8006028:	f04f 0901 	mov.w	r9, #1
 800602c:	464b      	mov	r3, r9
 800602e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006032:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006036:	2200      	movs	r2, #0
 8006038:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800603a:	6042      	str	r2, [r0, #4]
 800603c:	2204      	movs	r2, #4
 800603e:	f102 0614 	add.w	r6, r2, #20
 8006042:	429e      	cmp	r6, r3
 8006044:	6841      	ldr	r1, [r0, #4]
 8006046:	d94e      	bls.n	80060e6 <_dtoa_r+0x316>
 8006048:	4628      	mov	r0, r5
 800604a:	f001 f84f 	bl	80070ec <_Balloc>
 800604e:	9003      	str	r0, [sp, #12]
 8006050:	2800      	cmp	r0, #0
 8006052:	d14c      	bne.n	80060ee <_dtoa_r+0x31e>
 8006054:	4602      	mov	r2, r0
 8006056:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800605a:	4b17      	ldr	r3, [pc, #92]	; (80060b8 <_dtoa_r+0x2e8>)
 800605c:	e6cc      	b.n	8005df8 <_dtoa_r+0x28>
 800605e:	2301      	movs	r3, #1
 8006060:	e7de      	b.n	8006020 <_dtoa_r+0x250>
 8006062:	2300      	movs	r3, #0
 8006064:	930b      	str	r3, [sp, #44]	; 0x2c
 8006066:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006068:	eb0a 0903 	add.w	r9, sl, r3
 800606c:	f109 0301 	add.w	r3, r9, #1
 8006070:	2b01      	cmp	r3, #1
 8006072:	9308      	str	r3, [sp, #32]
 8006074:	bfb8      	it	lt
 8006076:	2301      	movlt	r3, #1
 8006078:	e7dd      	b.n	8006036 <_dtoa_r+0x266>
 800607a:	2301      	movs	r3, #1
 800607c:	e7f2      	b.n	8006064 <_dtoa_r+0x294>
 800607e:	bf00      	nop
 8006080:	636f4361 	.word	0x636f4361
 8006084:	3fd287a7 	.word	0x3fd287a7
 8006088:	8b60c8b3 	.word	0x8b60c8b3
 800608c:	3fc68a28 	.word	0x3fc68a28
 8006090:	509f79fb 	.word	0x509f79fb
 8006094:	3fd34413 	.word	0x3fd34413
 8006098:	08008bf5 	.word	0x08008bf5
 800609c:	08008c0c 	.word	0x08008c0c
 80060a0:	7ff00000 	.word	0x7ff00000
 80060a4:	08008bf1 	.word	0x08008bf1
 80060a8:	08008be8 	.word	0x08008be8
 80060ac:	08008b71 	.word	0x08008b71
 80060b0:	3ff80000 	.word	0x3ff80000
 80060b4:	08008d78 	.word	0x08008d78
 80060b8:	08008c67 	.word	0x08008c67
 80060bc:	2401      	movs	r4, #1
 80060be:	2300      	movs	r3, #0
 80060c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80060c2:	9322      	str	r3, [sp, #136]	; 0x88
 80060c4:	f04f 39ff 	mov.w	r9, #4294967295
 80060c8:	2200      	movs	r2, #0
 80060ca:	2312      	movs	r3, #18
 80060cc:	f8cd 9020 	str.w	r9, [sp, #32]
 80060d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80060d2:	e7b0      	b.n	8006036 <_dtoa_r+0x266>
 80060d4:	2301      	movs	r3, #1
 80060d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80060d8:	e7f4      	b.n	80060c4 <_dtoa_r+0x2f4>
 80060da:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80060de:	464b      	mov	r3, r9
 80060e0:	f8cd 9020 	str.w	r9, [sp, #32]
 80060e4:	e7a7      	b.n	8006036 <_dtoa_r+0x266>
 80060e6:	3101      	adds	r1, #1
 80060e8:	6041      	str	r1, [r0, #4]
 80060ea:	0052      	lsls	r2, r2, #1
 80060ec:	e7a7      	b.n	800603e <_dtoa_r+0x26e>
 80060ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060f0:	9a03      	ldr	r2, [sp, #12]
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	9b08      	ldr	r3, [sp, #32]
 80060f6:	2b0e      	cmp	r3, #14
 80060f8:	f200 80a8 	bhi.w	800624c <_dtoa_r+0x47c>
 80060fc:	2c00      	cmp	r4, #0
 80060fe:	f000 80a5 	beq.w	800624c <_dtoa_r+0x47c>
 8006102:	f1ba 0f00 	cmp.w	sl, #0
 8006106:	dd34      	ble.n	8006172 <_dtoa_r+0x3a2>
 8006108:	4a9a      	ldr	r2, [pc, #616]	; (8006374 <_dtoa_r+0x5a4>)
 800610a:	f00a 030f 	and.w	r3, sl, #15
 800610e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006112:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006116:	e9d3 3400 	ldrd	r3, r4, [r3]
 800611a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800611e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006122:	d016      	beq.n	8006152 <_dtoa_r+0x382>
 8006124:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006128:	4b93      	ldr	r3, [pc, #588]	; (8006378 <_dtoa_r+0x5a8>)
 800612a:	2703      	movs	r7, #3
 800612c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006130:	f7fa fbb0 	bl	8000894 <__aeabi_ddiv>
 8006134:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006138:	f004 040f 	and.w	r4, r4, #15
 800613c:	4e8e      	ldr	r6, [pc, #568]	; (8006378 <_dtoa_r+0x5a8>)
 800613e:	b954      	cbnz	r4, 8006156 <_dtoa_r+0x386>
 8006140:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006148:	f7fa fba4 	bl	8000894 <__aeabi_ddiv>
 800614c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006150:	e029      	b.n	80061a6 <_dtoa_r+0x3d6>
 8006152:	2702      	movs	r7, #2
 8006154:	e7f2      	b.n	800613c <_dtoa_r+0x36c>
 8006156:	07e1      	lsls	r1, r4, #31
 8006158:	d508      	bpl.n	800616c <_dtoa_r+0x39c>
 800615a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800615e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006162:	f7fa fa6d 	bl	8000640 <__aeabi_dmul>
 8006166:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800616a:	3701      	adds	r7, #1
 800616c:	1064      	asrs	r4, r4, #1
 800616e:	3608      	adds	r6, #8
 8006170:	e7e5      	b.n	800613e <_dtoa_r+0x36e>
 8006172:	f000 80a5 	beq.w	80062c0 <_dtoa_r+0x4f0>
 8006176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800617a:	f1ca 0400 	rsb	r4, sl, #0
 800617e:	4b7d      	ldr	r3, [pc, #500]	; (8006374 <_dtoa_r+0x5a4>)
 8006180:	f004 020f 	and.w	r2, r4, #15
 8006184:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	f7fa fa58 	bl	8000640 <__aeabi_dmul>
 8006190:	2702      	movs	r7, #2
 8006192:	2300      	movs	r3, #0
 8006194:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006198:	4e77      	ldr	r6, [pc, #476]	; (8006378 <_dtoa_r+0x5a8>)
 800619a:	1124      	asrs	r4, r4, #4
 800619c:	2c00      	cmp	r4, #0
 800619e:	f040 8084 	bne.w	80062aa <_dtoa_r+0x4da>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1d2      	bne.n	800614c <_dtoa_r+0x37c>
 80061a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 808b 	beq.w	80062c4 <_dtoa_r+0x4f4>
 80061ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80061b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80061b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061ba:	2200      	movs	r2, #0
 80061bc:	4b6f      	ldr	r3, [pc, #444]	; (800637c <_dtoa_r+0x5ac>)
 80061be:	f7fa fcb1 	bl	8000b24 <__aeabi_dcmplt>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d07e      	beq.n	80062c4 <_dtoa_r+0x4f4>
 80061c6:	9b08      	ldr	r3, [sp, #32]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d07b      	beq.n	80062c4 <_dtoa_r+0x4f4>
 80061cc:	f1b9 0f00 	cmp.w	r9, #0
 80061d0:	dd38      	ble.n	8006244 <_dtoa_r+0x474>
 80061d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061d6:	2200      	movs	r2, #0
 80061d8:	4b69      	ldr	r3, [pc, #420]	; (8006380 <_dtoa_r+0x5b0>)
 80061da:	f7fa fa31 	bl	8000640 <__aeabi_dmul>
 80061de:	464c      	mov	r4, r9
 80061e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061e4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80061e8:	3701      	adds	r7, #1
 80061ea:	4638      	mov	r0, r7
 80061ec:	f7fa f9be 	bl	800056c <__aeabi_i2d>
 80061f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061f4:	f7fa fa24 	bl	8000640 <__aeabi_dmul>
 80061f8:	2200      	movs	r2, #0
 80061fa:	4b62      	ldr	r3, [pc, #392]	; (8006384 <_dtoa_r+0x5b4>)
 80061fc:	f7fa f86a 	bl	80002d4 <__adddf3>
 8006200:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006204:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006208:	9611      	str	r6, [sp, #68]	; 0x44
 800620a:	2c00      	cmp	r4, #0
 800620c:	d15d      	bne.n	80062ca <_dtoa_r+0x4fa>
 800620e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006212:	2200      	movs	r2, #0
 8006214:	4b5c      	ldr	r3, [pc, #368]	; (8006388 <_dtoa_r+0x5b8>)
 8006216:	f7fa f85b 	bl	80002d0 <__aeabi_dsub>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006222:	4633      	mov	r3, r6
 8006224:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006226:	f7fa fc9b 	bl	8000b60 <__aeabi_dcmpgt>
 800622a:	2800      	cmp	r0, #0
 800622c:	f040 829c 	bne.w	8006768 <_dtoa_r+0x998>
 8006230:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006234:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006236:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800623a:	f7fa fc73 	bl	8000b24 <__aeabi_dcmplt>
 800623e:	2800      	cmp	r0, #0
 8006240:	f040 8290 	bne.w	8006764 <_dtoa_r+0x994>
 8006244:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006248:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800624c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800624e:	2b00      	cmp	r3, #0
 8006250:	f2c0 8152 	blt.w	80064f8 <_dtoa_r+0x728>
 8006254:	f1ba 0f0e 	cmp.w	sl, #14
 8006258:	f300 814e 	bgt.w	80064f8 <_dtoa_r+0x728>
 800625c:	4b45      	ldr	r3, [pc, #276]	; (8006374 <_dtoa_r+0x5a4>)
 800625e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006262:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006266:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800626a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800626c:	2b00      	cmp	r3, #0
 800626e:	f280 80db 	bge.w	8006428 <_dtoa_r+0x658>
 8006272:	9b08      	ldr	r3, [sp, #32]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f300 80d7 	bgt.w	8006428 <_dtoa_r+0x658>
 800627a:	f040 8272 	bne.w	8006762 <_dtoa_r+0x992>
 800627e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006282:	2200      	movs	r2, #0
 8006284:	4b40      	ldr	r3, [pc, #256]	; (8006388 <_dtoa_r+0x5b8>)
 8006286:	f7fa f9db 	bl	8000640 <__aeabi_dmul>
 800628a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800628e:	f7fa fc5d 	bl	8000b4c <__aeabi_dcmpge>
 8006292:	9c08      	ldr	r4, [sp, #32]
 8006294:	4626      	mov	r6, r4
 8006296:	2800      	cmp	r0, #0
 8006298:	f040 8248 	bne.w	800672c <_dtoa_r+0x95c>
 800629c:	2331      	movs	r3, #49	; 0x31
 800629e:	9f03      	ldr	r7, [sp, #12]
 80062a0:	f10a 0a01 	add.w	sl, sl, #1
 80062a4:	f807 3b01 	strb.w	r3, [r7], #1
 80062a8:	e244      	b.n	8006734 <_dtoa_r+0x964>
 80062aa:	07e2      	lsls	r2, r4, #31
 80062ac:	d505      	bpl.n	80062ba <_dtoa_r+0x4ea>
 80062ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062b2:	f7fa f9c5 	bl	8000640 <__aeabi_dmul>
 80062b6:	2301      	movs	r3, #1
 80062b8:	3701      	adds	r7, #1
 80062ba:	1064      	asrs	r4, r4, #1
 80062bc:	3608      	adds	r6, #8
 80062be:	e76d      	b.n	800619c <_dtoa_r+0x3cc>
 80062c0:	2702      	movs	r7, #2
 80062c2:	e770      	b.n	80061a6 <_dtoa_r+0x3d6>
 80062c4:	46d0      	mov	r8, sl
 80062c6:	9c08      	ldr	r4, [sp, #32]
 80062c8:	e78f      	b.n	80061ea <_dtoa_r+0x41a>
 80062ca:	9903      	ldr	r1, [sp, #12]
 80062cc:	4b29      	ldr	r3, [pc, #164]	; (8006374 <_dtoa_r+0x5a4>)
 80062ce:	4421      	add	r1, r4
 80062d0:	9112      	str	r1, [sp, #72]	; 0x48
 80062d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80062dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062e0:	2900      	cmp	r1, #0
 80062e2:	d055      	beq.n	8006390 <_dtoa_r+0x5c0>
 80062e4:	2000      	movs	r0, #0
 80062e6:	4929      	ldr	r1, [pc, #164]	; (800638c <_dtoa_r+0x5bc>)
 80062e8:	f7fa fad4 	bl	8000894 <__aeabi_ddiv>
 80062ec:	463b      	mov	r3, r7
 80062ee:	4632      	mov	r2, r6
 80062f0:	f7f9 ffee 	bl	80002d0 <__aeabi_dsub>
 80062f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062f8:	9f03      	ldr	r7, [sp, #12]
 80062fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062fe:	f7fa fc4f 	bl	8000ba0 <__aeabi_d2iz>
 8006302:	4604      	mov	r4, r0
 8006304:	f7fa f932 	bl	800056c <__aeabi_i2d>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006310:	f7f9 ffde 	bl	80002d0 <__aeabi_dsub>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	3430      	adds	r4, #48	; 0x30
 800631a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800631e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006322:	f807 4b01 	strb.w	r4, [r7], #1
 8006326:	f7fa fbfd 	bl	8000b24 <__aeabi_dcmplt>
 800632a:	2800      	cmp	r0, #0
 800632c:	d174      	bne.n	8006418 <_dtoa_r+0x648>
 800632e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006332:	2000      	movs	r0, #0
 8006334:	4911      	ldr	r1, [pc, #68]	; (800637c <_dtoa_r+0x5ac>)
 8006336:	f7f9 ffcb 	bl	80002d0 <__aeabi_dsub>
 800633a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800633e:	f7fa fbf1 	bl	8000b24 <__aeabi_dcmplt>
 8006342:	2800      	cmp	r0, #0
 8006344:	f040 80b7 	bne.w	80064b6 <_dtoa_r+0x6e6>
 8006348:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800634a:	429f      	cmp	r7, r3
 800634c:	f43f af7a 	beq.w	8006244 <_dtoa_r+0x474>
 8006350:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006354:	2200      	movs	r2, #0
 8006356:	4b0a      	ldr	r3, [pc, #40]	; (8006380 <_dtoa_r+0x5b0>)
 8006358:	f7fa f972 	bl	8000640 <__aeabi_dmul>
 800635c:	2200      	movs	r2, #0
 800635e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006366:	4b06      	ldr	r3, [pc, #24]	; (8006380 <_dtoa_r+0x5b0>)
 8006368:	f7fa f96a 	bl	8000640 <__aeabi_dmul>
 800636c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006370:	e7c3      	b.n	80062fa <_dtoa_r+0x52a>
 8006372:	bf00      	nop
 8006374:	08008d78 	.word	0x08008d78
 8006378:	08008d50 	.word	0x08008d50
 800637c:	3ff00000 	.word	0x3ff00000
 8006380:	40240000 	.word	0x40240000
 8006384:	401c0000 	.word	0x401c0000
 8006388:	40140000 	.word	0x40140000
 800638c:	3fe00000 	.word	0x3fe00000
 8006390:	4630      	mov	r0, r6
 8006392:	4639      	mov	r1, r7
 8006394:	f7fa f954 	bl	8000640 <__aeabi_dmul>
 8006398:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800639a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800639e:	9c03      	ldr	r4, [sp, #12]
 80063a0:	9314      	str	r3, [sp, #80]	; 0x50
 80063a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063a6:	f7fa fbfb 	bl	8000ba0 <__aeabi_d2iz>
 80063aa:	9015      	str	r0, [sp, #84]	; 0x54
 80063ac:	f7fa f8de 	bl	800056c <__aeabi_i2d>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063b8:	f7f9 ff8a 	bl	80002d0 <__aeabi_dsub>
 80063bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063be:	4606      	mov	r6, r0
 80063c0:	3330      	adds	r3, #48	; 0x30
 80063c2:	f804 3b01 	strb.w	r3, [r4], #1
 80063c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063c8:	460f      	mov	r7, r1
 80063ca:	429c      	cmp	r4, r3
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	d124      	bne.n	800641c <_dtoa_r+0x64c>
 80063d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063d6:	4bb0      	ldr	r3, [pc, #704]	; (8006698 <_dtoa_r+0x8c8>)
 80063d8:	f7f9 ff7c 	bl	80002d4 <__adddf3>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4630      	mov	r0, r6
 80063e2:	4639      	mov	r1, r7
 80063e4:	f7fa fbbc 	bl	8000b60 <__aeabi_dcmpgt>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d163      	bne.n	80064b4 <_dtoa_r+0x6e4>
 80063ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063f0:	2000      	movs	r0, #0
 80063f2:	49a9      	ldr	r1, [pc, #676]	; (8006698 <_dtoa_r+0x8c8>)
 80063f4:	f7f9 ff6c 	bl	80002d0 <__aeabi_dsub>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4630      	mov	r0, r6
 80063fe:	4639      	mov	r1, r7
 8006400:	f7fa fb90 	bl	8000b24 <__aeabi_dcmplt>
 8006404:	2800      	cmp	r0, #0
 8006406:	f43f af1d 	beq.w	8006244 <_dtoa_r+0x474>
 800640a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800640c:	1e7b      	subs	r3, r7, #1
 800640e:	9314      	str	r3, [sp, #80]	; 0x50
 8006410:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006414:	2b30      	cmp	r3, #48	; 0x30
 8006416:	d0f8      	beq.n	800640a <_dtoa_r+0x63a>
 8006418:	46c2      	mov	sl, r8
 800641a:	e03b      	b.n	8006494 <_dtoa_r+0x6c4>
 800641c:	4b9f      	ldr	r3, [pc, #636]	; (800669c <_dtoa_r+0x8cc>)
 800641e:	f7fa f90f 	bl	8000640 <__aeabi_dmul>
 8006422:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006426:	e7bc      	b.n	80063a2 <_dtoa_r+0x5d2>
 8006428:	9f03      	ldr	r7, [sp, #12]
 800642a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800642e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006432:	4640      	mov	r0, r8
 8006434:	4649      	mov	r1, r9
 8006436:	f7fa fa2d 	bl	8000894 <__aeabi_ddiv>
 800643a:	f7fa fbb1 	bl	8000ba0 <__aeabi_d2iz>
 800643e:	4604      	mov	r4, r0
 8006440:	f7fa f894 	bl	800056c <__aeabi_i2d>
 8006444:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006448:	f7fa f8fa 	bl	8000640 <__aeabi_dmul>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	f7f9 ff3c 	bl	80002d0 <__aeabi_dsub>
 8006458:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800645c:	f807 6b01 	strb.w	r6, [r7], #1
 8006460:	9e03      	ldr	r6, [sp, #12]
 8006462:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006466:	1bbe      	subs	r6, r7, r6
 8006468:	45b4      	cmp	ip, r6
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	d136      	bne.n	80064de <_dtoa_r+0x70e>
 8006470:	f7f9 ff30 	bl	80002d4 <__adddf3>
 8006474:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006478:	4680      	mov	r8, r0
 800647a:	4689      	mov	r9, r1
 800647c:	f7fa fb70 	bl	8000b60 <__aeabi_dcmpgt>
 8006480:	bb58      	cbnz	r0, 80064da <_dtoa_r+0x70a>
 8006482:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006486:	4640      	mov	r0, r8
 8006488:	4649      	mov	r1, r9
 800648a:	f7fa fb41 	bl	8000b10 <__aeabi_dcmpeq>
 800648e:	b108      	cbz	r0, 8006494 <_dtoa_r+0x6c4>
 8006490:	07e1      	lsls	r1, r4, #31
 8006492:	d422      	bmi.n	80064da <_dtoa_r+0x70a>
 8006494:	4628      	mov	r0, r5
 8006496:	4659      	mov	r1, fp
 8006498:	f000 fe68 	bl	800716c <_Bfree>
 800649c:	2300      	movs	r3, #0
 800649e:	703b      	strb	r3, [r7, #0]
 80064a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80064a2:	f10a 0001 	add.w	r0, sl, #1
 80064a6:	6018      	str	r0, [r3, #0]
 80064a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f43f acde 	beq.w	8005e6c <_dtoa_r+0x9c>
 80064b0:	601f      	str	r7, [r3, #0]
 80064b2:	e4db      	b.n	8005e6c <_dtoa_r+0x9c>
 80064b4:	4627      	mov	r7, r4
 80064b6:	463b      	mov	r3, r7
 80064b8:	461f      	mov	r7, r3
 80064ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064be:	2a39      	cmp	r2, #57	; 0x39
 80064c0:	d107      	bne.n	80064d2 <_dtoa_r+0x702>
 80064c2:	9a03      	ldr	r2, [sp, #12]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d1f7      	bne.n	80064b8 <_dtoa_r+0x6e8>
 80064c8:	2230      	movs	r2, #48	; 0x30
 80064ca:	9903      	ldr	r1, [sp, #12]
 80064cc:	f108 0801 	add.w	r8, r8, #1
 80064d0:	700a      	strb	r2, [r1, #0]
 80064d2:	781a      	ldrb	r2, [r3, #0]
 80064d4:	3201      	adds	r2, #1
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e79e      	b.n	8006418 <_dtoa_r+0x648>
 80064da:	46d0      	mov	r8, sl
 80064dc:	e7eb      	b.n	80064b6 <_dtoa_r+0x6e6>
 80064de:	2200      	movs	r2, #0
 80064e0:	4b6e      	ldr	r3, [pc, #440]	; (800669c <_dtoa_r+0x8cc>)
 80064e2:	f7fa f8ad 	bl	8000640 <__aeabi_dmul>
 80064e6:	2200      	movs	r2, #0
 80064e8:	2300      	movs	r3, #0
 80064ea:	4680      	mov	r8, r0
 80064ec:	4689      	mov	r9, r1
 80064ee:	f7fa fb0f 	bl	8000b10 <__aeabi_dcmpeq>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d09b      	beq.n	800642e <_dtoa_r+0x65e>
 80064f6:	e7cd      	b.n	8006494 <_dtoa_r+0x6c4>
 80064f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064fa:	2a00      	cmp	r2, #0
 80064fc:	f000 80d0 	beq.w	80066a0 <_dtoa_r+0x8d0>
 8006500:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006502:	2a01      	cmp	r2, #1
 8006504:	f300 80ae 	bgt.w	8006664 <_dtoa_r+0x894>
 8006508:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800650a:	2a00      	cmp	r2, #0
 800650c:	f000 80a6 	beq.w	800665c <_dtoa_r+0x88c>
 8006510:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006514:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006516:	9f06      	ldr	r7, [sp, #24]
 8006518:	9a06      	ldr	r2, [sp, #24]
 800651a:	2101      	movs	r1, #1
 800651c:	441a      	add	r2, r3
 800651e:	9206      	str	r2, [sp, #24]
 8006520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006522:	4628      	mov	r0, r5
 8006524:	441a      	add	r2, r3
 8006526:	9209      	str	r2, [sp, #36]	; 0x24
 8006528:	f000 ff20 	bl	800736c <__i2b>
 800652c:	4606      	mov	r6, r0
 800652e:	2f00      	cmp	r7, #0
 8006530:	dd0c      	ble.n	800654c <_dtoa_r+0x77c>
 8006532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006534:	2b00      	cmp	r3, #0
 8006536:	dd09      	ble.n	800654c <_dtoa_r+0x77c>
 8006538:	42bb      	cmp	r3, r7
 800653a:	bfa8      	it	ge
 800653c:	463b      	movge	r3, r7
 800653e:	9a06      	ldr	r2, [sp, #24]
 8006540:	1aff      	subs	r7, r7, r3
 8006542:	1ad2      	subs	r2, r2, r3
 8006544:	9206      	str	r2, [sp, #24]
 8006546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	9309      	str	r3, [sp, #36]	; 0x24
 800654c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800654e:	b1f3      	cbz	r3, 800658e <_dtoa_r+0x7be>
 8006550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 80a8 	beq.w	80066a8 <_dtoa_r+0x8d8>
 8006558:	2c00      	cmp	r4, #0
 800655a:	dd10      	ble.n	800657e <_dtoa_r+0x7ae>
 800655c:	4631      	mov	r1, r6
 800655e:	4622      	mov	r2, r4
 8006560:	4628      	mov	r0, r5
 8006562:	f000 ffc1 	bl	80074e8 <__pow5mult>
 8006566:	465a      	mov	r2, fp
 8006568:	4601      	mov	r1, r0
 800656a:	4606      	mov	r6, r0
 800656c:	4628      	mov	r0, r5
 800656e:	f000 ff13 	bl	8007398 <__multiply>
 8006572:	4680      	mov	r8, r0
 8006574:	4659      	mov	r1, fp
 8006576:	4628      	mov	r0, r5
 8006578:	f000 fdf8 	bl	800716c <_Bfree>
 800657c:	46c3      	mov	fp, r8
 800657e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006580:	1b1a      	subs	r2, r3, r4
 8006582:	d004      	beq.n	800658e <_dtoa_r+0x7be>
 8006584:	4659      	mov	r1, fp
 8006586:	4628      	mov	r0, r5
 8006588:	f000 ffae 	bl	80074e8 <__pow5mult>
 800658c:	4683      	mov	fp, r0
 800658e:	2101      	movs	r1, #1
 8006590:	4628      	mov	r0, r5
 8006592:	f000 feeb 	bl	800736c <__i2b>
 8006596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006598:	4604      	mov	r4, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	f340 8086 	ble.w	80066ac <_dtoa_r+0x8dc>
 80065a0:	461a      	mov	r2, r3
 80065a2:	4601      	mov	r1, r0
 80065a4:	4628      	mov	r0, r5
 80065a6:	f000 ff9f 	bl	80074e8 <__pow5mult>
 80065aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065ac:	4604      	mov	r4, r0
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	dd7f      	ble.n	80066b2 <_dtoa_r+0x8e2>
 80065b2:	f04f 0800 	mov.w	r8, #0
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065bc:	6918      	ldr	r0, [r3, #16]
 80065be:	f000 fe87 	bl	80072d0 <__hi0bits>
 80065c2:	f1c0 0020 	rsb	r0, r0, #32
 80065c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c8:	4418      	add	r0, r3
 80065ca:	f010 001f 	ands.w	r0, r0, #31
 80065ce:	f000 8092 	beq.w	80066f6 <_dtoa_r+0x926>
 80065d2:	f1c0 0320 	rsb	r3, r0, #32
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	f340 808a 	ble.w	80066f0 <_dtoa_r+0x920>
 80065dc:	f1c0 001c 	rsb	r0, r0, #28
 80065e0:	9b06      	ldr	r3, [sp, #24]
 80065e2:	4407      	add	r7, r0
 80065e4:	4403      	add	r3, r0
 80065e6:	9306      	str	r3, [sp, #24]
 80065e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ea:	4403      	add	r3, r0
 80065ec:	9309      	str	r3, [sp, #36]	; 0x24
 80065ee:	9b06      	ldr	r3, [sp, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	dd05      	ble.n	8006600 <_dtoa_r+0x830>
 80065f4:	4659      	mov	r1, fp
 80065f6:	461a      	mov	r2, r3
 80065f8:	4628      	mov	r0, r5
 80065fa:	f000 ffcf 	bl	800759c <__lshift>
 80065fe:	4683      	mov	fp, r0
 8006600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006602:	2b00      	cmp	r3, #0
 8006604:	dd05      	ble.n	8006612 <_dtoa_r+0x842>
 8006606:	4621      	mov	r1, r4
 8006608:	461a      	mov	r2, r3
 800660a:	4628      	mov	r0, r5
 800660c:	f000 ffc6 	bl	800759c <__lshift>
 8006610:	4604      	mov	r4, r0
 8006612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006614:	2b00      	cmp	r3, #0
 8006616:	d070      	beq.n	80066fa <_dtoa_r+0x92a>
 8006618:	4621      	mov	r1, r4
 800661a:	4658      	mov	r0, fp
 800661c:	f001 f82e 	bl	800767c <__mcmp>
 8006620:	2800      	cmp	r0, #0
 8006622:	da6a      	bge.n	80066fa <_dtoa_r+0x92a>
 8006624:	2300      	movs	r3, #0
 8006626:	4659      	mov	r1, fp
 8006628:	220a      	movs	r2, #10
 800662a:	4628      	mov	r0, r5
 800662c:	f000 fdc0 	bl	80071b0 <__multadd>
 8006630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006632:	4683      	mov	fp, r0
 8006634:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8194 	beq.w	8006966 <_dtoa_r+0xb96>
 800663e:	4631      	mov	r1, r6
 8006640:	2300      	movs	r3, #0
 8006642:	220a      	movs	r2, #10
 8006644:	4628      	mov	r0, r5
 8006646:	f000 fdb3 	bl	80071b0 <__multadd>
 800664a:	f1b9 0f00 	cmp.w	r9, #0
 800664e:	4606      	mov	r6, r0
 8006650:	f300 8093 	bgt.w	800677a <_dtoa_r+0x9aa>
 8006654:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006656:	2b02      	cmp	r3, #2
 8006658:	dc57      	bgt.n	800670a <_dtoa_r+0x93a>
 800665a:	e08e      	b.n	800677a <_dtoa_r+0x9aa>
 800665c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800665e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006662:	e757      	b.n	8006514 <_dtoa_r+0x744>
 8006664:	9b08      	ldr	r3, [sp, #32]
 8006666:	1e5c      	subs	r4, r3, #1
 8006668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800666a:	42a3      	cmp	r3, r4
 800666c:	bfb7      	itett	lt
 800666e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006670:	1b1c      	subge	r4, r3, r4
 8006672:	1ae2      	sublt	r2, r4, r3
 8006674:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006676:	bfbe      	ittt	lt
 8006678:	940a      	strlt	r4, [sp, #40]	; 0x28
 800667a:	189b      	addlt	r3, r3, r2
 800667c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800667e:	9b08      	ldr	r3, [sp, #32]
 8006680:	bfb8      	it	lt
 8006682:	2400      	movlt	r4, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	bfbb      	ittet	lt
 8006688:	9b06      	ldrlt	r3, [sp, #24]
 800668a:	9a08      	ldrlt	r2, [sp, #32]
 800668c:	9f06      	ldrge	r7, [sp, #24]
 800668e:	1a9f      	sublt	r7, r3, r2
 8006690:	bfac      	ite	ge
 8006692:	9b08      	ldrge	r3, [sp, #32]
 8006694:	2300      	movlt	r3, #0
 8006696:	e73f      	b.n	8006518 <_dtoa_r+0x748>
 8006698:	3fe00000 	.word	0x3fe00000
 800669c:	40240000 	.word	0x40240000
 80066a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066a2:	9f06      	ldr	r7, [sp, #24]
 80066a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80066a6:	e742      	b.n	800652e <_dtoa_r+0x75e>
 80066a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066aa:	e76b      	b.n	8006584 <_dtoa_r+0x7b4>
 80066ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	dc19      	bgt.n	80066e6 <_dtoa_r+0x916>
 80066b2:	9b04      	ldr	r3, [sp, #16]
 80066b4:	b9bb      	cbnz	r3, 80066e6 <_dtoa_r+0x916>
 80066b6:	9b05      	ldr	r3, [sp, #20]
 80066b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066bc:	b99b      	cbnz	r3, 80066e6 <_dtoa_r+0x916>
 80066be:	9b05      	ldr	r3, [sp, #20]
 80066c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066c4:	0d1b      	lsrs	r3, r3, #20
 80066c6:	051b      	lsls	r3, r3, #20
 80066c8:	b183      	cbz	r3, 80066ec <_dtoa_r+0x91c>
 80066ca:	f04f 0801 	mov.w	r8, #1
 80066ce:	9b06      	ldr	r3, [sp, #24]
 80066d0:	3301      	adds	r3, #1
 80066d2:	9306      	str	r3, [sp, #24]
 80066d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d6:	3301      	adds	r3, #1
 80066d8:	9309      	str	r3, [sp, #36]	; 0x24
 80066da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f47f af6a 	bne.w	80065b6 <_dtoa_r+0x7e6>
 80066e2:	2001      	movs	r0, #1
 80066e4:	e76f      	b.n	80065c6 <_dtoa_r+0x7f6>
 80066e6:	f04f 0800 	mov.w	r8, #0
 80066ea:	e7f6      	b.n	80066da <_dtoa_r+0x90a>
 80066ec:	4698      	mov	r8, r3
 80066ee:	e7f4      	b.n	80066da <_dtoa_r+0x90a>
 80066f0:	f43f af7d 	beq.w	80065ee <_dtoa_r+0x81e>
 80066f4:	4618      	mov	r0, r3
 80066f6:	301c      	adds	r0, #28
 80066f8:	e772      	b.n	80065e0 <_dtoa_r+0x810>
 80066fa:	9b08      	ldr	r3, [sp, #32]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	dc36      	bgt.n	800676e <_dtoa_r+0x99e>
 8006700:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006702:	2b02      	cmp	r3, #2
 8006704:	dd33      	ble.n	800676e <_dtoa_r+0x99e>
 8006706:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800670a:	f1b9 0f00 	cmp.w	r9, #0
 800670e:	d10d      	bne.n	800672c <_dtoa_r+0x95c>
 8006710:	4621      	mov	r1, r4
 8006712:	464b      	mov	r3, r9
 8006714:	2205      	movs	r2, #5
 8006716:	4628      	mov	r0, r5
 8006718:	f000 fd4a 	bl	80071b0 <__multadd>
 800671c:	4601      	mov	r1, r0
 800671e:	4604      	mov	r4, r0
 8006720:	4658      	mov	r0, fp
 8006722:	f000 ffab 	bl	800767c <__mcmp>
 8006726:	2800      	cmp	r0, #0
 8006728:	f73f adb8 	bgt.w	800629c <_dtoa_r+0x4cc>
 800672c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800672e:	9f03      	ldr	r7, [sp, #12]
 8006730:	ea6f 0a03 	mvn.w	sl, r3
 8006734:	f04f 0800 	mov.w	r8, #0
 8006738:	4621      	mov	r1, r4
 800673a:	4628      	mov	r0, r5
 800673c:	f000 fd16 	bl	800716c <_Bfree>
 8006740:	2e00      	cmp	r6, #0
 8006742:	f43f aea7 	beq.w	8006494 <_dtoa_r+0x6c4>
 8006746:	f1b8 0f00 	cmp.w	r8, #0
 800674a:	d005      	beq.n	8006758 <_dtoa_r+0x988>
 800674c:	45b0      	cmp	r8, r6
 800674e:	d003      	beq.n	8006758 <_dtoa_r+0x988>
 8006750:	4641      	mov	r1, r8
 8006752:	4628      	mov	r0, r5
 8006754:	f000 fd0a 	bl	800716c <_Bfree>
 8006758:	4631      	mov	r1, r6
 800675a:	4628      	mov	r0, r5
 800675c:	f000 fd06 	bl	800716c <_Bfree>
 8006760:	e698      	b.n	8006494 <_dtoa_r+0x6c4>
 8006762:	2400      	movs	r4, #0
 8006764:	4626      	mov	r6, r4
 8006766:	e7e1      	b.n	800672c <_dtoa_r+0x95c>
 8006768:	46c2      	mov	sl, r8
 800676a:	4626      	mov	r6, r4
 800676c:	e596      	b.n	800629c <_dtoa_r+0x4cc>
 800676e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006770:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80fd 	beq.w	8006974 <_dtoa_r+0xba4>
 800677a:	2f00      	cmp	r7, #0
 800677c:	dd05      	ble.n	800678a <_dtoa_r+0x9ba>
 800677e:	4631      	mov	r1, r6
 8006780:	463a      	mov	r2, r7
 8006782:	4628      	mov	r0, r5
 8006784:	f000 ff0a 	bl	800759c <__lshift>
 8006788:	4606      	mov	r6, r0
 800678a:	f1b8 0f00 	cmp.w	r8, #0
 800678e:	d05c      	beq.n	800684a <_dtoa_r+0xa7a>
 8006790:	4628      	mov	r0, r5
 8006792:	6871      	ldr	r1, [r6, #4]
 8006794:	f000 fcaa 	bl	80070ec <_Balloc>
 8006798:	4607      	mov	r7, r0
 800679a:	b928      	cbnz	r0, 80067a8 <_dtoa_r+0x9d8>
 800679c:	4602      	mov	r2, r0
 800679e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80067a2:	4b7f      	ldr	r3, [pc, #508]	; (80069a0 <_dtoa_r+0xbd0>)
 80067a4:	f7ff bb28 	b.w	8005df8 <_dtoa_r+0x28>
 80067a8:	6932      	ldr	r2, [r6, #16]
 80067aa:	f106 010c 	add.w	r1, r6, #12
 80067ae:	3202      	adds	r2, #2
 80067b0:	0092      	lsls	r2, r2, #2
 80067b2:	300c      	adds	r0, #12
 80067b4:	f000 fc8c 	bl	80070d0 <memcpy>
 80067b8:	2201      	movs	r2, #1
 80067ba:	4639      	mov	r1, r7
 80067bc:	4628      	mov	r0, r5
 80067be:	f000 feed 	bl	800759c <__lshift>
 80067c2:	46b0      	mov	r8, r6
 80067c4:	4606      	mov	r6, r0
 80067c6:	9b03      	ldr	r3, [sp, #12]
 80067c8:	3301      	adds	r3, #1
 80067ca:	9308      	str	r3, [sp, #32]
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	444b      	add	r3, r9
 80067d0:	930a      	str	r3, [sp, #40]	; 0x28
 80067d2:	9b04      	ldr	r3, [sp, #16]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	9309      	str	r3, [sp, #36]	; 0x24
 80067da:	9b08      	ldr	r3, [sp, #32]
 80067dc:	4621      	mov	r1, r4
 80067de:	3b01      	subs	r3, #1
 80067e0:	4658      	mov	r0, fp
 80067e2:	9304      	str	r3, [sp, #16]
 80067e4:	f7ff fa68 	bl	8005cb8 <quorem>
 80067e8:	4603      	mov	r3, r0
 80067ea:	4641      	mov	r1, r8
 80067ec:	3330      	adds	r3, #48	; 0x30
 80067ee:	9006      	str	r0, [sp, #24]
 80067f0:	4658      	mov	r0, fp
 80067f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80067f4:	f000 ff42 	bl	800767c <__mcmp>
 80067f8:	4632      	mov	r2, r6
 80067fa:	4681      	mov	r9, r0
 80067fc:	4621      	mov	r1, r4
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 ff58 	bl	80076b4 <__mdiff>
 8006804:	68c2      	ldr	r2, [r0, #12]
 8006806:	4607      	mov	r7, r0
 8006808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800680a:	bb02      	cbnz	r2, 800684e <_dtoa_r+0xa7e>
 800680c:	4601      	mov	r1, r0
 800680e:	4658      	mov	r0, fp
 8006810:	f000 ff34 	bl	800767c <__mcmp>
 8006814:	4602      	mov	r2, r0
 8006816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006818:	4639      	mov	r1, r7
 800681a:	4628      	mov	r0, r5
 800681c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006820:	f000 fca4 	bl	800716c <_Bfree>
 8006824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006828:	9f08      	ldr	r7, [sp, #32]
 800682a:	ea43 0102 	orr.w	r1, r3, r2
 800682e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006830:	430b      	orrs	r3, r1
 8006832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006834:	d10d      	bne.n	8006852 <_dtoa_r+0xa82>
 8006836:	2b39      	cmp	r3, #57	; 0x39
 8006838:	d029      	beq.n	800688e <_dtoa_r+0xabe>
 800683a:	f1b9 0f00 	cmp.w	r9, #0
 800683e:	dd01      	ble.n	8006844 <_dtoa_r+0xa74>
 8006840:	9b06      	ldr	r3, [sp, #24]
 8006842:	3331      	adds	r3, #49	; 0x31
 8006844:	9a04      	ldr	r2, [sp, #16]
 8006846:	7013      	strb	r3, [r2, #0]
 8006848:	e776      	b.n	8006738 <_dtoa_r+0x968>
 800684a:	4630      	mov	r0, r6
 800684c:	e7b9      	b.n	80067c2 <_dtoa_r+0x9f2>
 800684e:	2201      	movs	r2, #1
 8006850:	e7e2      	b.n	8006818 <_dtoa_r+0xa48>
 8006852:	f1b9 0f00 	cmp.w	r9, #0
 8006856:	db06      	blt.n	8006866 <_dtoa_r+0xa96>
 8006858:	9922      	ldr	r1, [sp, #136]	; 0x88
 800685a:	ea41 0909 	orr.w	r9, r1, r9
 800685e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006860:	ea59 0101 	orrs.w	r1, r9, r1
 8006864:	d120      	bne.n	80068a8 <_dtoa_r+0xad8>
 8006866:	2a00      	cmp	r2, #0
 8006868:	ddec      	ble.n	8006844 <_dtoa_r+0xa74>
 800686a:	4659      	mov	r1, fp
 800686c:	2201      	movs	r2, #1
 800686e:	4628      	mov	r0, r5
 8006870:	9308      	str	r3, [sp, #32]
 8006872:	f000 fe93 	bl	800759c <__lshift>
 8006876:	4621      	mov	r1, r4
 8006878:	4683      	mov	fp, r0
 800687a:	f000 feff 	bl	800767c <__mcmp>
 800687e:	2800      	cmp	r0, #0
 8006880:	9b08      	ldr	r3, [sp, #32]
 8006882:	dc02      	bgt.n	800688a <_dtoa_r+0xaba>
 8006884:	d1de      	bne.n	8006844 <_dtoa_r+0xa74>
 8006886:	07da      	lsls	r2, r3, #31
 8006888:	d5dc      	bpl.n	8006844 <_dtoa_r+0xa74>
 800688a:	2b39      	cmp	r3, #57	; 0x39
 800688c:	d1d8      	bne.n	8006840 <_dtoa_r+0xa70>
 800688e:	2339      	movs	r3, #57	; 0x39
 8006890:	9a04      	ldr	r2, [sp, #16]
 8006892:	7013      	strb	r3, [r2, #0]
 8006894:	463b      	mov	r3, r7
 8006896:	461f      	mov	r7, r3
 8006898:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800689c:	3b01      	subs	r3, #1
 800689e:	2a39      	cmp	r2, #57	; 0x39
 80068a0:	d050      	beq.n	8006944 <_dtoa_r+0xb74>
 80068a2:	3201      	adds	r2, #1
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	e747      	b.n	8006738 <_dtoa_r+0x968>
 80068a8:	2a00      	cmp	r2, #0
 80068aa:	dd03      	ble.n	80068b4 <_dtoa_r+0xae4>
 80068ac:	2b39      	cmp	r3, #57	; 0x39
 80068ae:	d0ee      	beq.n	800688e <_dtoa_r+0xabe>
 80068b0:	3301      	adds	r3, #1
 80068b2:	e7c7      	b.n	8006844 <_dtoa_r+0xa74>
 80068b4:	9a08      	ldr	r2, [sp, #32]
 80068b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80068b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80068bc:	428a      	cmp	r2, r1
 80068be:	d02a      	beq.n	8006916 <_dtoa_r+0xb46>
 80068c0:	4659      	mov	r1, fp
 80068c2:	2300      	movs	r3, #0
 80068c4:	220a      	movs	r2, #10
 80068c6:	4628      	mov	r0, r5
 80068c8:	f000 fc72 	bl	80071b0 <__multadd>
 80068cc:	45b0      	cmp	r8, r6
 80068ce:	4683      	mov	fp, r0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	f04f 020a 	mov.w	r2, #10
 80068d8:	4641      	mov	r1, r8
 80068da:	4628      	mov	r0, r5
 80068dc:	d107      	bne.n	80068ee <_dtoa_r+0xb1e>
 80068de:	f000 fc67 	bl	80071b0 <__multadd>
 80068e2:	4680      	mov	r8, r0
 80068e4:	4606      	mov	r6, r0
 80068e6:	9b08      	ldr	r3, [sp, #32]
 80068e8:	3301      	adds	r3, #1
 80068ea:	9308      	str	r3, [sp, #32]
 80068ec:	e775      	b.n	80067da <_dtoa_r+0xa0a>
 80068ee:	f000 fc5f 	bl	80071b0 <__multadd>
 80068f2:	4631      	mov	r1, r6
 80068f4:	4680      	mov	r8, r0
 80068f6:	2300      	movs	r3, #0
 80068f8:	220a      	movs	r2, #10
 80068fa:	4628      	mov	r0, r5
 80068fc:	f000 fc58 	bl	80071b0 <__multadd>
 8006900:	4606      	mov	r6, r0
 8006902:	e7f0      	b.n	80068e6 <_dtoa_r+0xb16>
 8006904:	f1b9 0f00 	cmp.w	r9, #0
 8006908:	bfcc      	ite	gt
 800690a:	464f      	movgt	r7, r9
 800690c:	2701      	movle	r7, #1
 800690e:	f04f 0800 	mov.w	r8, #0
 8006912:	9a03      	ldr	r2, [sp, #12]
 8006914:	4417      	add	r7, r2
 8006916:	4659      	mov	r1, fp
 8006918:	2201      	movs	r2, #1
 800691a:	4628      	mov	r0, r5
 800691c:	9308      	str	r3, [sp, #32]
 800691e:	f000 fe3d 	bl	800759c <__lshift>
 8006922:	4621      	mov	r1, r4
 8006924:	4683      	mov	fp, r0
 8006926:	f000 fea9 	bl	800767c <__mcmp>
 800692a:	2800      	cmp	r0, #0
 800692c:	dcb2      	bgt.n	8006894 <_dtoa_r+0xac4>
 800692e:	d102      	bne.n	8006936 <_dtoa_r+0xb66>
 8006930:	9b08      	ldr	r3, [sp, #32]
 8006932:	07db      	lsls	r3, r3, #31
 8006934:	d4ae      	bmi.n	8006894 <_dtoa_r+0xac4>
 8006936:	463b      	mov	r3, r7
 8006938:	461f      	mov	r7, r3
 800693a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800693e:	2a30      	cmp	r2, #48	; 0x30
 8006940:	d0fa      	beq.n	8006938 <_dtoa_r+0xb68>
 8006942:	e6f9      	b.n	8006738 <_dtoa_r+0x968>
 8006944:	9a03      	ldr	r2, [sp, #12]
 8006946:	429a      	cmp	r2, r3
 8006948:	d1a5      	bne.n	8006896 <_dtoa_r+0xac6>
 800694a:	2331      	movs	r3, #49	; 0x31
 800694c:	f10a 0a01 	add.w	sl, sl, #1
 8006950:	e779      	b.n	8006846 <_dtoa_r+0xa76>
 8006952:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <_dtoa_r+0xbd4>)
 8006954:	f7ff baa8 	b.w	8005ea8 <_dtoa_r+0xd8>
 8006958:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800695a:	2b00      	cmp	r3, #0
 800695c:	f47f aa81 	bne.w	8005e62 <_dtoa_r+0x92>
 8006960:	4b11      	ldr	r3, [pc, #68]	; (80069a8 <_dtoa_r+0xbd8>)
 8006962:	f7ff baa1 	b.w	8005ea8 <_dtoa_r+0xd8>
 8006966:	f1b9 0f00 	cmp.w	r9, #0
 800696a:	dc03      	bgt.n	8006974 <_dtoa_r+0xba4>
 800696c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800696e:	2b02      	cmp	r3, #2
 8006970:	f73f aecb 	bgt.w	800670a <_dtoa_r+0x93a>
 8006974:	9f03      	ldr	r7, [sp, #12]
 8006976:	4621      	mov	r1, r4
 8006978:	4658      	mov	r0, fp
 800697a:	f7ff f99d 	bl	8005cb8 <quorem>
 800697e:	9a03      	ldr	r2, [sp, #12]
 8006980:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006984:	f807 3b01 	strb.w	r3, [r7], #1
 8006988:	1aba      	subs	r2, r7, r2
 800698a:	4591      	cmp	r9, r2
 800698c:	ddba      	ble.n	8006904 <_dtoa_r+0xb34>
 800698e:	4659      	mov	r1, fp
 8006990:	2300      	movs	r3, #0
 8006992:	220a      	movs	r2, #10
 8006994:	4628      	mov	r0, r5
 8006996:	f000 fc0b 	bl	80071b0 <__multadd>
 800699a:	4683      	mov	fp, r0
 800699c:	e7eb      	b.n	8006976 <_dtoa_r+0xba6>
 800699e:	bf00      	nop
 80069a0:	08008c67 	.word	0x08008c67
 80069a4:	08008b70 	.word	0x08008b70
 80069a8:	08008be8 	.word	0x08008be8

080069ac <rshift>:
 80069ac:	6903      	ldr	r3, [r0, #16]
 80069ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80069b6:	f100 0414 	add.w	r4, r0, #20
 80069ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 80069be:	dd46      	ble.n	8006a4e <rshift+0xa2>
 80069c0:	f011 011f 	ands.w	r1, r1, #31
 80069c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80069c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80069cc:	d10c      	bne.n	80069e8 <rshift+0x3c>
 80069ce:	4629      	mov	r1, r5
 80069d0:	f100 0710 	add.w	r7, r0, #16
 80069d4:	42b1      	cmp	r1, r6
 80069d6:	d335      	bcc.n	8006a44 <rshift+0x98>
 80069d8:	1a9b      	subs	r3, r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	1eea      	subs	r2, r5, #3
 80069de:	4296      	cmp	r6, r2
 80069e0:	bf38      	it	cc
 80069e2:	2300      	movcc	r3, #0
 80069e4:	4423      	add	r3, r4
 80069e6:	e015      	b.n	8006a14 <rshift+0x68>
 80069e8:	46a1      	mov	r9, r4
 80069ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80069ee:	f1c1 0820 	rsb	r8, r1, #32
 80069f2:	40cf      	lsrs	r7, r1
 80069f4:	f105 0e04 	add.w	lr, r5, #4
 80069f8:	4576      	cmp	r6, lr
 80069fa:	46f4      	mov	ip, lr
 80069fc:	d816      	bhi.n	8006a2c <rshift+0x80>
 80069fe:	1a9a      	subs	r2, r3, r2
 8006a00:	0092      	lsls	r2, r2, #2
 8006a02:	3a04      	subs	r2, #4
 8006a04:	3501      	adds	r5, #1
 8006a06:	42ae      	cmp	r6, r5
 8006a08:	bf38      	it	cc
 8006a0a:	2200      	movcc	r2, #0
 8006a0c:	18a3      	adds	r3, r4, r2
 8006a0e:	50a7      	str	r7, [r4, r2]
 8006a10:	b107      	cbz	r7, 8006a14 <rshift+0x68>
 8006a12:	3304      	adds	r3, #4
 8006a14:	42a3      	cmp	r3, r4
 8006a16:	eba3 0204 	sub.w	r2, r3, r4
 8006a1a:	bf08      	it	eq
 8006a1c:	2300      	moveq	r3, #0
 8006a1e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006a22:	6102      	str	r2, [r0, #16]
 8006a24:	bf08      	it	eq
 8006a26:	6143      	streq	r3, [r0, #20]
 8006a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a2c:	f8dc c000 	ldr.w	ip, [ip]
 8006a30:	fa0c fc08 	lsl.w	ip, ip, r8
 8006a34:	ea4c 0707 	orr.w	r7, ip, r7
 8006a38:	f849 7b04 	str.w	r7, [r9], #4
 8006a3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006a40:	40cf      	lsrs	r7, r1
 8006a42:	e7d9      	b.n	80069f8 <rshift+0x4c>
 8006a44:	f851 cb04 	ldr.w	ip, [r1], #4
 8006a48:	f847 cf04 	str.w	ip, [r7, #4]!
 8006a4c:	e7c2      	b.n	80069d4 <rshift+0x28>
 8006a4e:	4623      	mov	r3, r4
 8006a50:	e7e0      	b.n	8006a14 <rshift+0x68>

08006a52 <__hexdig_fun>:
 8006a52:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006a56:	2b09      	cmp	r3, #9
 8006a58:	d802      	bhi.n	8006a60 <__hexdig_fun+0xe>
 8006a5a:	3820      	subs	r0, #32
 8006a5c:	b2c0      	uxtb	r0, r0
 8006a5e:	4770      	bx	lr
 8006a60:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006a64:	2b05      	cmp	r3, #5
 8006a66:	d801      	bhi.n	8006a6c <__hexdig_fun+0x1a>
 8006a68:	3847      	subs	r0, #71	; 0x47
 8006a6a:	e7f7      	b.n	8006a5c <__hexdig_fun+0xa>
 8006a6c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006a70:	2b05      	cmp	r3, #5
 8006a72:	d801      	bhi.n	8006a78 <__hexdig_fun+0x26>
 8006a74:	3827      	subs	r0, #39	; 0x27
 8006a76:	e7f1      	b.n	8006a5c <__hexdig_fun+0xa>
 8006a78:	2000      	movs	r0, #0
 8006a7a:	4770      	bx	lr

08006a7c <__gethex>:
 8006a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a80:	b08b      	sub	sp, #44	; 0x2c
 8006a82:	9305      	str	r3, [sp, #20]
 8006a84:	4bb2      	ldr	r3, [pc, #712]	; (8006d50 <__gethex+0x2d4>)
 8006a86:	9002      	str	r0, [sp, #8]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	468b      	mov	fp, r1
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	4690      	mov	r8, r2
 8006a90:	9303      	str	r3, [sp, #12]
 8006a92:	f7f9 fb5d 	bl	8000150 <strlen>
 8006a96:	4682      	mov	sl, r0
 8006a98:	9b03      	ldr	r3, [sp, #12]
 8006a9a:	f8db 2000 	ldr.w	r2, [fp]
 8006a9e:	4403      	add	r3, r0
 8006aa0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006aa4:	9306      	str	r3, [sp, #24]
 8006aa6:	1c93      	adds	r3, r2, #2
 8006aa8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006aac:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006ab0:	32fe      	adds	r2, #254	; 0xfe
 8006ab2:	18d1      	adds	r1, r2, r3
 8006ab4:	461f      	mov	r7, r3
 8006ab6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006aba:	9101      	str	r1, [sp, #4]
 8006abc:	2830      	cmp	r0, #48	; 0x30
 8006abe:	d0f8      	beq.n	8006ab2 <__gethex+0x36>
 8006ac0:	f7ff ffc7 	bl	8006a52 <__hexdig_fun>
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d13a      	bne.n	8006b40 <__gethex+0xc4>
 8006aca:	4652      	mov	r2, sl
 8006acc:	4638      	mov	r0, r7
 8006ace:	9903      	ldr	r1, [sp, #12]
 8006ad0:	f001 fa26 	bl	8007f20 <strncmp>
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d166      	bne.n	8006ba8 <__gethex+0x12c>
 8006ada:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006ade:	eb07 060a 	add.w	r6, r7, sl
 8006ae2:	f7ff ffb6 	bl	8006a52 <__hexdig_fun>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d060      	beq.n	8006bac <__gethex+0x130>
 8006aea:	4633      	mov	r3, r6
 8006aec:	7818      	ldrb	r0, [r3, #0]
 8006aee:	461f      	mov	r7, r3
 8006af0:	2830      	cmp	r0, #48	; 0x30
 8006af2:	f103 0301 	add.w	r3, r3, #1
 8006af6:	d0f9      	beq.n	8006aec <__gethex+0x70>
 8006af8:	f7ff ffab 	bl	8006a52 <__hexdig_fun>
 8006afc:	2301      	movs	r3, #1
 8006afe:	fab0 f480 	clz	r4, r0
 8006b02:	4635      	mov	r5, r6
 8006b04:	0964      	lsrs	r4, r4, #5
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	463a      	mov	r2, r7
 8006b0a:	4616      	mov	r6, r2
 8006b0c:	7830      	ldrb	r0, [r6, #0]
 8006b0e:	3201      	adds	r2, #1
 8006b10:	f7ff ff9f 	bl	8006a52 <__hexdig_fun>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	d1f8      	bne.n	8006b0a <__gethex+0x8e>
 8006b18:	4652      	mov	r2, sl
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	9903      	ldr	r1, [sp, #12]
 8006b1e:	f001 f9ff 	bl	8007f20 <strncmp>
 8006b22:	b980      	cbnz	r0, 8006b46 <__gethex+0xca>
 8006b24:	b94d      	cbnz	r5, 8006b3a <__gethex+0xbe>
 8006b26:	eb06 050a 	add.w	r5, r6, sl
 8006b2a:	462a      	mov	r2, r5
 8006b2c:	4616      	mov	r6, r2
 8006b2e:	7830      	ldrb	r0, [r6, #0]
 8006b30:	3201      	adds	r2, #1
 8006b32:	f7ff ff8e 	bl	8006a52 <__hexdig_fun>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d1f8      	bne.n	8006b2c <__gethex+0xb0>
 8006b3a:	1bad      	subs	r5, r5, r6
 8006b3c:	00ad      	lsls	r5, r5, #2
 8006b3e:	e004      	b.n	8006b4a <__gethex+0xce>
 8006b40:	2400      	movs	r4, #0
 8006b42:	4625      	mov	r5, r4
 8006b44:	e7e0      	b.n	8006b08 <__gethex+0x8c>
 8006b46:	2d00      	cmp	r5, #0
 8006b48:	d1f7      	bne.n	8006b3a <__gethex+0xbe>
 8006b4a:	7833      	ldrb	r3, [r6, #0]
 8006b4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b50:	2b50      	cmp	r3, #80	; 0x50
 8006b52:	d139      	bne.n	8006bc8 <__gethex+0x14c>
 8006b54:	7873      	ldrb	r3, [r6, #1]
 8006b56:	2b2b      	cmp	r3, #43	; 0x2b
 8006b58:	d02a      	beq.n	8006bb0 <__gethex+0x134>
 8006b5a:	2b2d      	cmp	r3, #45	; 0x2d
 8006b5c:	d02c      	beq.n	8006bb8 <__gethex+0x13c>
 8006b5e:	f04f 0900 	mov.w	r9, #0
 8006b62:	1c71      	adds	r1, r6, #1
 8006b64:	7808      	ldrb	r0, [r1, #0]
 8006b66:	f7ff ff74 	bl	8006a52 <__hexdig_fun>
 8006b6a:	1e43      	subs	r3, r0, #1
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b18      	cmp	r3, #24
 8006b70:	d82a      	bhi.n	8006bc8 <__gethex+0x14c>
 8006b72:	f1a0 0210 	sub.w	r2, r0, #16
 8006b76:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006b7a:	f7ff ff6a 	bl	8006a52 <__hexdig_fun>
 8006b7e:	1e43      	subs	r3, r0, #1
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b18      	cmp	r3, #24
 8006b84:	d91b      	bls.n	8006bbe <__gethex+0x142>
 8006b86:	f1b9 0f00 	cmp.w	r9, #0
 8006b8a:	d000      	beq.n	8006b8e <__gethex+0x112>
 8006b8c:	4252      	negs	r2, r2
 8006b8e:	4415      	add	r5, r2
 8006b90:	f8cb 1000 	str.w	r1, [fp]
 8006b94:	b1d4      	cbz	r4, 8006bcc <__gethex+0x150>
 8006b96:	9b01      	ldr	r3, [sp, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	bf14      	ite	ne
 8006b9c:	2700      	movne	r7, #0
 8006b9e:	2706      	moveq	r7, #6
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	b00b      	add	sp, #44	; 0x2c
 8006ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba8:	463e      	mov	r6, r7
 8006baa:	4625      	mov	r5, r4
 8006bac:	2401      	movs	r4, #1
 8006bae:	e7cc      	b.n	8006b4a <__gethex+0xce>
 8006bb0:	f04f 0900 	mov.w	r9, #0
 8006bb4:	1cb1      	adds	r1, r6, #2
 8006bb6:	e7d5      	b.n	8006b64 <__gethex+0xe8>
 8006bb8:	f04f 0901 	mov.w	r9, #1
 8006bbc:	e7fa      	b.n	8006bb4 <__gethex+0x138>
 8006bbe:	230a      	movs	r3, #10
 8006bc0:	fb03 0202 	mla	r2, r3, r2, r0
 8006bc4:	3a10      	subs	r2, #16
 8006bc6:	e7d6      	b.n	8006b76 <__gethex+0xfa>
 8006bc8:	4631      	mov	r1, r6
 8006bca:	e7e1      	b.n	8006b90 <__gethex+0x114>
 8006bcc:	4621      	mov	r1, r4
 8006bce:	1bf3      	subs	r3, r6, r7
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	2b07      	cmp	r3, #7
 8006bd4:	dc0a      	bgt.n	8006bec <__gethex+0x170>
 8006bd6:	9802      	ldr	r0, [sp, #8]
 8006bd8:	f000 fa88 	bl	80070ec <_Balloc>
 8006bdc:	4604      	mov	r4, r0
 8006bde:	b940      	cbnz	r0, 8006bf2 <__gethex+0x176>
 8006be0:	4602      	mov	r2, r0
 8006be2:	21de      	movs	r1, #222	; 0xde
 8006be4:	4b5b      	ldr	r3, [pc, #364]	; (8006d54 <__gethex+0x2d8>)
 8006be6:	485c      	ldr	r0, [pc, #368]	; (8006d58 <__gethex+0x2dc>)
 8006be8:	f001 f9bc 	bl	8007f64 <__assert_func>
 8006bec:	3101      	adds	r1, #1
 8006bee:	105b      	asrs	r3, r3, #1
 8006bf0:	e7ef      	b.n	8006bd2 <__gethex+0x156>
 8006bf2:	f04f 0b00 	mov.w	fp, #0
 8006bf6:	f100 0914 	add.w	r9, r0, #20
 8006bfa:	f1ca 0301 	rsb	r3, sl, #1
 8006bfe:	f8cd 9010 	str.w	r9, [sp, #16]
 8006c02:	f8cd b004 	str.w	fp, [sp, #4]
 8006c06:	9308      	str	r3, [sp, #32]
 8006c08:	42b7      	cmp	r7, r6
 8006c0a:	d33f      	bcc.n	8006c8c <__gethex+0x210>
 8006c0c:	9f04      	ldr	r7, [sp, #16]
 8006c0e:	9b01      	ldr	r3, [sp, #4]
 8006c10:	f847 3b04 	str.w	r3, [r7], #4
 8006c14:	eba7 0709 	sub.w	r7, r7, r9
 8006c18:	10bf      	asrs	r7, r7, #2
 8006c1a:	6127      	str	r7, [r4, #16]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fb57 	bl	80072d0 <__hi0bits>
 8006c22:	017f      	lsls	r7, r7, #5
 8006c24:	f8d8 6000 	ldr.w	r6, [r8]
 8006c28:	1a3f      	subs	r7, r7, r0
 8006c2a:	42b7      	cmp	r7, r6
 8006c2c:	dd62      	ble.n	8006cf4 <__gethex+0x278>
 8006c2e:	1bbf      	subs	r7, r7, r6
 8006c30:	4639      	mov	r1, r7
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 fef1 	bl	8007a1a <__any_on>
 8006c38:	4682      	mov	sl, r0
 8006c3a:	b1a8      	cbz	r0, 8006c68 <__gethex+0x1ec>
 8006c3c:	f04f 0a01 	mov.w	sl, #1
 8006c40:	1e7b      	subs	r3, r7, #1
 8006c42:	1159      	asrs	r1, r3, #5
 8006c44:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006c48:	f003 021f 	and.w	r2, r3, #31
 8006c4c:	fa0a f202 	lsl.w	r2, sl, r2
 8006c50:	420a      	tst	r2, r1
 8006c52:	d009      	beq.n	8006c68 <__gethex+0x1ec>
 8006c54:	4553      	cmp	r3, sl
 8006c56:	dd05      	ble.n	8006c64 <__gethex+0x1e8>
 8006c58:	4620      	mov	r0, r4
 8006c5a:	1eb9      	subs	r1, r7, #2
 8006c5c:	f000 fedd 	bl	8007a1a <__any_on>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d144      	bne.n	8006cee <__gethex+0x272>
 8006c64:	f04f 0a02 	mov.w	sl, #2
 8006c68:	4639      	mov	r1, r7
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f7ff fe9e 	bl	80069ac <rshift>
 8006c70:	443d      	add	r5, r7
 8006c72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c76:	42ab      	cmp	r3, r5
 8006c78:	da4a      	bge.n	8006d10 <__gethex+0x294>
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	9802      	ldr	r0, [sp, #8]
 8006c7e:	f000 fa75 	bl	800716c <_Bfree>
 8006c82:	2300      	movs	r3, #0
 8006c84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c86:	27a3      	movs	r7, #163	; 0xa3
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	e789      	b.n	8006ba0 <__gethex+0x124>
 8006c8c:	1e73      	subs	r3, r6, #1
 8006c8e:	9a06      	ldr	r2, [sp, #24]
 8006c90:	9307      	str	r3, [sp, #28]
 8006c92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d019      	beq.n	8006cce <__gethex+0x252>
 8006c9a:	f1bb 0f20 	cmp.w	fp, #32
 8006c9e:	d107      	bne.n	8006cb0 <__gethex+0x234>
 8006ca0:	9b04      	ldr	r3, [sp, #16]
 8006ca2:	9a01      	ldr	r2, [sp, #4]
 8006ca4:	f843 2b04 	str.w	r2, [r3], #4
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	2300      	movs	r3, #0
 8006cac:	469b      	mov	fp, r3
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006cb4:	f7ff fecd 	bl	8006a52 <__hexdig_fun>
 8006cb8:	9b01      	ldr	r3, [sp, #4]
 8006cba:	f000 000f 	and.w	r0, r0, #15
 8006cbe:	fa00 f00b 	lsl.w	r0, r0, fp
 8006cc2:	4303      	orrs	r3, r0
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	f10b 0b04 	add.w	fp, fp, #4
 8006cca:	9b07      	ldr	r3, [sp, #28]
 8006ccc:	e00d      	b.n	8006cea <__gethex+0x26e>
 8006cce:	9a08      	ldr	r2, [sp, #32]
 8006cd0:	1e73      	subs	r3, r6, #1
 8006cd2:	4413      	add	r3, r2
 8006cd4:	42bb      	cmp	r3, r7
 8006cd6:	d3e0      	bcc.n	8006c9a <__gethex+0x21e>
 8006cd8:	4618      	mov	r0, r3
 8006cda:	4652      	mov	r2, sl
 8006cdc:	9903      	ldr	r1, [sp, #12]
 8006cde:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce0:	f001 f91e 	bl	8007f20 <strncmp>
 8006ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d1d7      	bne.n	8006c9a <__gethex+0x21e>
 8006cea:	461e      	mov	r6, r3
 8006cec:	e78c      	b.n	8006c08 <__gethex+0x18c>
 8006cee:	f04f 0a03 	mov.w	sl, #3
 8006cf2:	e7b9      	b.n	8006c68 <__gethex+0x1ec>
 8006cf4:	da09      	bge.n	8006d0a <__gethex+0x28e>
 8006cf6:	1bf7      	subs	r7, r6, r7
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	463a      	mov	r2, r7
 8006cfc:	9802      	ldr	r0, [sp, #8]
 8006cfe:	f000 fc4d 	bl	800759c <__lshift>
 8006d02:	4604      	mov	r4, r0
 8006d04:	1bed      	subs	r5, r5, r7
 8006d06:	f100 0914 	add.w	r9, r0, #20
 8006d0a:	f04f 0a00 	mov.w	sl, #0
 8006d0e:	e7b0      	b.n	8006c72 <__gethex+0x1f6>
 8006d10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006d14:	42a8      	cmp	r0, r5
 8006d16:	dd72      	ble.n	8006dfe <__gethex+0x382>
 8006d18:	1b45      	subs	r5, r0, r5
 8006d1a:	42ae      	cmp	r6, r5
 8006d1c:	dc35      	bgt.n	8006d8a <__gethex+0x30e>
 8006d1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d029      	beq.n	8006d7a <__gethex+0x2fe>
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d02b      	beq.n	8006d82 <__gethex+0x306>
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d11c      	bne.n	8006d68 <__gethex+0x2ec>
 8006d2e:	42ae      	cmp	r6, r5
 8006d30:	d11a      	bne.n	8006d68 <__gethex+0x2ec>
 8006d32:	2e01      	cmp	r6, #1
 8006d34:	d112      	bne.n	8006d5c <__gethex+0x2e0>
 8006d36:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006d3a:	9a05      	ldr	r2, [sp, #20]
 8006d3c:	2762      	movs	r7, #98	; 0x62
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	2301      	movs	r3, #1
 8006d42:	6123      	str	r3, [r4, #16]
 8006d44:	f8c9 3000 	str.w	r3, [r9]
 8006d48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d4a:	601c      	str	r4, [r3, #0]
 8006d4c:	e728      	b.n	8006ba0 <__gethex+0x124>
 8006d4e:	bf00      	nop
 8006d50:	08008ce0 	.word	0x08008ce0
 8006d54:	08008c67 	.word	0x08008c67
 8006d58:	08008c78 	.word	0x08008c78
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	1e71      	subs	r1, r6, #1
 8006d60:	f000 fe5b 	bl	8007a1a <__any_on>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	d1e6      	bne.n	8006d36 <__gethex+0x2ba>
 8006d68:	4621      	mov	r1, r4
 8006d6a:	9802      	ldr	r0, [sp, #8]
 8006d6c:	f000 f9fe 	bl	800716c <_Bfree>
 8006d70:	2300      	movs	r3, #0
 8006d72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d74:	2750      	movs	r7, #80	; 0x50
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	e712      	b.n	8006ba0 <__gethex+0x124>
 8006d7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1f3      	bne.n	8006d68 <__gethex+0x2ec>
 8006d80:	e7d9      	b.n	8006d36 <__gethex+0x2ba>
 8006d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1d6      	bne.n	8006d36 <__gethex+0x2ba>
 8006d88:	e7ee      	b.n	8006d68 <__gethex+0x2ec>
 8006d8a:	1e6f      	subs	r7, r5, #1
 8006d8c:	f1ba 0f00 	cmp.w	sl, #0
 8006d90:	d132      	bne.n	8006df8 <__gethex+0x37c>
 8006d92:	b127      	cbz	r7, 8006d9e <__gethex+0x322>
 8006d94:	4639      	mov	r1, r7
 8006d96:	4620      	mov	r0, r4
 8006d98:	f000 fe3f 	bl	8007a1a <__any_on>
 8006d9c:	4682      	mov	sl, r0
 8006d9e:	2101      	movs	r1, #1
 8006da0:	117b      	asrs	r3, r7, #5
 8006da2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006da6:	f007 071f 	and.w	r7, r7, #31
 8006daa:	fa01 f707 	lsl.w	r7, r1, r7
 8006dae:	421f      	tst	r7, r3
 8006db0:	f04f 0702 	mov.w	r7, #2
 8006db4:	4629      	mov	r1, r5
 8006db6:	4620      	mov	r0, r4
 8006db8:	bf18      	it	ne
 8006dba:	f04a 0a02 	orrne.w	sl, sl, #2
 8006dbe:	1b76      	subs	r6, r6, r5
 8006dc0:	f7ff fdf4 	bl	80069ac <rshift>
 8006dc4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006dc8:	f1ba 0f00 	cmp.w	sl, #0
 8006dcc:	d048      	beq.n	8006e60 <__gethex+0x3e4>
 8006dce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d015      	beq.n	8006e02 <__gethex+0x386>
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d017      	beq.n	8006e0a <__gethex+0x38e>
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d109      	bne.n	8006df2 <__gethex+0x376>
 8006dde:	f01a 0f02 	tst.w	sl, #2
 8006de2:	d006      	beq.n	8006df2 <__gethex+0x376>
 8006de4:	f8d9 0000 	ldr.w	r0, [r9]
 8006de8:	ea4a 0a00 	orr.w	sl, sl, r0
 8006dec:	f01a 0f01 	tst.w	sl, #1
 8006df0:	d10e      	bne.n	8006e10 <__gethex+0x394>
 8006df2:	f047 0710 	orr.w	r7, r7, #16
 8006df6:	e033      	b.n	8006e60 <__gethex+0x3e4>
 8006df8:	f04f 0a01 	mov.w	sl, #1
 8006dfc:	e7cf      	b.n	8006d9e <__gethex+0x322>
 8006dfe:	2701      	movs	r7, #1
 8006e00:	e7e2      	b.n	8006dc8 <__gethex+0x34c>
 8006e02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e04:	f1c3 0301 	rsb	r3, r3, #1
 8006e08:	9315      	str	r3, [sp, #84]	; 0x54
 8006e0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0f0      	beq.n	8006df2 <__gethex+0x376>
 8006e10:	f04f 0c00 	mov.w	ip, #0
 8006e14:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006e18:	f104 0314 	add.w	r3, r4, #20
 8006e1c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006e20:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006e24:	4618      	mov	r0, r3
 8006e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e2a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006e2e:	d01c      	beq.n	8006e6a <__gethex+0x3ee>
 8006e30:	3201      	adds	r2, #1
 8006e32:	6002      	str	r2, [r0, #0]
 8006e34:	2f02      	cmp	r7, #2
 8006e36:	f104 0314 	add.w	r3, r4, #20
 8006e3a:	d13d      	bne.n	8006eb8 <__gethex+0x43c>
 8006e3c:	f8d8 2000 	ldr.w	r2, [r8]
 8006e40:	3a01      	subs	r2, #1
 8006e42:	42b2      	cmp	r2, r6
 8006e44:	d10a      	bne.n	8006e5c <__gethex+0x3e0>
 8006e46:	2201      	movs	r2, #1
 8006e48:	1171      	asrs	r1, r6, #5
 8006e4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e4e:	f006 061f 	and.w	r6, r6, #31
 8006e52:	fa02 f606 	lsl.w	r6, r2, r6
 8006e56:	421e      	tst	r6, r3
 8006e58:	bf18      	it	ne
 8006e5a:	4617      	movne	r7, r2
 8006e5c:	f047 0720 	orr.w	r7, r7, #32
 8006e60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e62:	601c      	str	r4, [r3, #0]
 8006e64:	9b05      	ldr	r3, [sp, #20]
 8006e66:	601d      	str	r5, [r3, #0]
 8006e68:	e69a      	b.n	8006ba0 <__gethex+0x124>
 8006e6a:	4299      	cmp	r1, r3
 8006e6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006e70:	d8d8      	bhi.n	8006e24 <__gethex+0x3a8>
 8006e72:	68a3      	ldr	r3, [r4, #8]
 8006e74:	459b      	cmp	fp, r3
 8006e76:	db17      	blt.n	8006ea8 <__gethex+0x42c>
 8006e78:	6861      	ldr	r1, [r4, #4]
 8006e7a:	9802      	ldr	r0, [sp, #8]
 8006e7c:	3101      	adds	r1, #1
 8006e7e:	f000 f935 	bl	80070ec <_Balloc>
 8006e82:	4681      	mov	r9, r0
 8006e84:	b918      	cbnz	r0, 8006e8e <__gethex+0x412>
 8006e86:	4602      	mov	r2, r0
 8006e88:	2184      	movs	r1, #132	; 0x84
 8006e8a:	4b19      	ldr	r3, [pc, #100]	; (8006ef0 <__gethex+0x474>)
 8006e8c:	e6ab      	b.n	8006be6 <__gethex+0x16a>
 8006e8e:	6922      	ldr	r2, [r4, #16]
 8006e90:	f104 010c 	add.w	r1, r4, #12
 8006e94:	3202      	adds	r2, #2
 8006e96:	0092      	lsls	r2, r2, #2
 8006e98:	300c      	adds	r0, #12
 8006e9a:	f000 f919 	bl	80070d0 <memcpy>
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	9802      	ldr	r0, [sp, #8]
 8006ea2:	f000 f963 	bl	800716c <_Bfree>
 8006ea6:	464c      	mov	r4, r9
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	6122      	str	r2, [r4, #16]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006eb4:	615a      	str	r2, [r3, #20]
 8006eb6:	e7bd      	b.n	8006e34 <__gethex+0x3b8>
 8006eb8:	6922      	ldr	r2, [r4, #16]
 8006eba:	455a      	cmp	r2, fp
 8006ebc:	dd0b      	ble.n	8006ed6 <__gethex+0x45a>
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f7ff fd73 	bl	80069ac <rshift>
 8006ec6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006eca:	3501      	adds	r5, #1
 8006ecc:	42ab      	cmp	r3, r5
 8006ece:	f6ff aed4 	blt.w	8006c7a <__gethex+0x1fe>
 8006ed2:	2701      	movs	r7, #1
 8006ed4:	e7c2      	b.n	8006e5c <__gethex+0x3e0>
 8006ed6:	f016 061f 	ands.w	r6, r6, #31
 8006eda:	d0fa      	beq.n	8006ed2 <__gethex+0x456>
 8006edc:	4453      	add	r3, sl
 8006ede:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006ee2:	f000 f9f5 	bl	80072d0 <__hi0bits>
 8006ee6:	f1c6 0620 	rsb	r6, r6, #32
 8006eea:	42b0      	cmp	r0, r6
 8006eec:	dbe7      	blt.n	8006ebe <__gethex+0x442>
 8006eee:	e7f0      	b.n	8006ed2 <__gethex+0x456>
 8006ef0:	08008c67 	.word	0x08008c67

08006ef4 <L_shift>:
 8006ef4:	f1c2 0208 	rsb	r2, r2, #8
 8006ef8:	0092      	lsls	r2, r2, #2
 8006efa:	b570      	push	{r4, r5, r6, lr}
 8006efc:	f1c2 0620 	rsb	r6, r2, #32
 8006f00:	6843      	ldr	r3, [r0, #4]
 8006f02:	6804      	ldr	r4, [r0, #0]
 8006f04:	fa03 f506 	lsl.w	r5, r3, r6
 8006f08:	432c      	orrs	r4, r5
 8006f0a:	40d3      	lsrs	r3, r2
 8006f0c:	6004      	str	r4, [r0, #0]
 8006f0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006f12:	4288      	cmp	r0, r1
 8006f14:	d3f4      	bcc.n	8006f00 <L_shift+0xc>
 8006f16:	bd70      	pop	{r4, r5, r6, pc}

08006f18 <__match>:
 8006f18:	b530      	push	{r4, r5, lr}
 8006f1a:	6803      	ldr	r3, [r0, #0]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f22:	b914      	cbnz	r4, 8006f2a <__match+0x12>
 8006f24:	6003      	str	r3, [r0, #0]
 8006f26:	2001      	movs	r0, #1
 8006f28:	bd30      	pop	{r4, r5, pc}
 8006f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006f32:	2d19      	cmp	r5, #25
 8006f34:	bf98      	it	ls
 8006f36:	3220      	addls	r2, #32
 8006f38:	42a2      	cmp	r2, r4
 8006f3a:	d0f0      	beq.n	8006f1e <__match+0x6>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	e7f3      	b.n	8006f28 <__match+0x10>

08006f40 <__hexnan>:
 8006f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f44:	2500      	movs	r5, #0
 8006f46:	680b      	ldr	r3, [r1, #0]
 8006f48:	4682      	mov	sl, r0
 8006f4a:	115e      	asrs	r6, r3, #5
 8006f4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006f50:	f013 031f 	ands.w	r3, r3, #31
 8006f54:	bf18      	it	ne
 8006f56:	3604      	addne	r6, #4
 8006f58:	1f37      	subs	r7, r6, #4
 8006f5a:	46b9      	mov	r9, r7
 8006f5c:	463c      	mov	r4, r7
 8006f5e:	46ab      	mov	fp, r5
 8006f60:	b087      	sub	sp, #28
 8006f62:	4690      	mov	r8, r2
 8006f64:	6802      	ldr	r2, [r0, #0]
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	f846 5c04 	str.w	r5, [r6, #-4]
 8006f6c:	9502      	str	r5, [sp, #8]
 8006f6e:	7851      	ldrb	r1, [r2, #1]
 8006f70:	1c53      	adds	r3, r2, #1
 8006f72:	9303      	str	r3, [sp, #12]
 8006f74:	b341      	cbz	r1, 8006fc8 <__hexnan+0x88>
 8006f76:	4608      	mov	r0, r1
 8006f78:	9205      	str	r2, [sp, #20]
 8006f7a:	9104      	str	r1, [sp, #16]
 8006f7c:	f7ff fd69 	bl	8006a52 <__hexdig_fun>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d14f      	bne.n	8007024 <__hexnan+0xe4>
 8006f84:	9904      	ldr	r1, [sp, #16]
 8006f86:	9a05      	ldr	r2, [sp, #20]
 8006f88:	2920      	cmp	r1, #32
 8006f8a:	d818      	bhi.n	8006fbe <__hexnan+0x7e>
 8006f8c:	9b02      	ldr	r3, [sp, #8]
 8006f8e:	459b      	cmp	fp, r3
 8006f90:	dd13      	ble.n	8006fba <__hexnan+0x7a>
 8006f92:	454c      	cmp	r4, r9
 8006f94:	d206      	bcs.n	8006fa4 <__hexnan+0x64>
 8006f96:	2d07      	cmp	r5, #7
 8006f98:	dc04      	bgt.n	8006fa4 <__hexnan+0x64>
 8006f9a:	462a      	mov	r2, r5
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f7ff ffa8 	bl	8006ef4 <L_shift>
 8006fa4:	4544      	cmp	r4, r8
 8006fa6:	d950      	bls.n	800704a <__hexnan+0x10a>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f1a4 0904 	sub.w	r9, r4, #4
 8006fae:	f844 3c04 	str.w	r3, [r4, #-4]
 8006fb2:	461d      	mov	r5, r3
 8006fb4:	464c      	mov	r4, r9
 8006fb6:	f8cd b008 	str.w	fp, [sp, #8]
 8006fba:	9a03      	ldr	r2, [sp, #12]
 8006fbc:	e7d7      	b.n	8006f6e <__hexnan+0x2e>
 8006fbe:	2929      	cmp	r1, #41	; 0x29
 8006fc0:	d156      	bne.n	8007070 <__hexnan+0x130>
 8006fc2:	3202      	adds	r2, #2
 8006fc4:	f8ca 2000 	str.w	r2, [sl]
 8006fc8:	f1bb 0f00 	cmp.w	fp, #0
 8006fcc:	d050      	beq.n	8007070 <__hexnan+0x130>
 8006fce:	454c      	cmp	r4, r9
 8006fd0:	d206      	bcs.n	8006fe0 <__hexnan+0xa0>
 8006fd2:	2d07      	cmp	r5, #7
 8006fd4:	dc04      	bgt.n	8006fe0 <__hexnan+0xa0>
 8006fd6:	462a      	mov	r2, r5
 8006fd8:	4649      	mov	r1, r9
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f7ff ff8a 	bl	8006ef4 <L_shift>
 8006fe0:	4544      	cmp	r4, r8
 8006fe2:	d934      	bls.n	800704e <__hexnan+0x10e>
 8006fe4:	4623      	mov	r3, r4
 8006fe6:	f1a8 0204 	sub.w	r2, r8, #4
 8006fea:	f853 1b04 	ldr.w	r1, [r3], #4
 8006fee:	429f      	cmp	r7, r3
 8006ff0:	f842 1f04 	str.w	r1, [r2, #4]!
 8006ff4:	d2f9      	bcs.n	8006fea <__hexnan+0xaa>
 8006ff6:	1b3b      	subs	r3, r7, r4
 8006ff8:	f023 0303 	bic.w	r3, r3, #3
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	3401      	adds	r4, #1
 8007000:	3e03      	subs	r6, #3
 8007002:	42b4      	cmp	r4, r6
 8007004:	bf88      	it	hi
 8007006:	2304      	movhi	r3, #4
 8007008:	2200      	movs	r2, #0
 800700a:	4443      	add	r3, r8
 800700c:	f843 2b04 	str.w	r2, [r3], #4
 8007010:	429f      	cmp	r7, r3
 8007012:	d2fb      	bcs.n	800700c <__hexnan+0xcc>
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	b91b      	cbnz	r3, 8007020 <__hexnan+0xe0>
 8007018:	4547      	cmp	r7, r8
 800701a:	d127      	bne.n	800706c <__hexnan+0x12c>
 800701c:	2301      	movs	r3, #1
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	2005      	movs	r0, #5
 8007022:	e026      	b.n	8007072 <__hexnan+0x132>
 8007024:	3501      	adds	r5, #1
 8007026:	2d08      	cmp	r5, #8
 8007028:	f10b 0b01 	add.w	fp, fp, #1
 800702c:	dd06      	ble.n	800703c <__hexnan+0xfc>
 800702e:	4544      	cmp	r4, r8
 8007030:	d9c3      	bls.n	8006fba <__hexnan+0x7a>
 8007032:	2300      	movs	r3, #0
 8007034:	2501      	movs	r5, #1
 8007036:	f844 3c04 	str.w	r3, [r4, #-4]
 800703a:	3c04      	subs	r4, #4
 800703c:	6822      	ldr	r2, [r4, #0]
 800703e:	f000 000f 	and.w	r0, r0, #15
 8007042:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007046:	6022      	str	r2, [r4, #0]
 8007048:	e7b7      	b.n	8006fba <__hexnan+0x7a>
 800704a:	2508      	movs	r5, #8
 800704c:	e7b5      	b.n	8006fba <__hexnan+0x7a>
 800704e:	9b01      	ldr	r3, [sp, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d0df      	beq.n	8007014 <__hexnan+0xd4>
 8007054:	f04f 32ff 	mov.w	r2, #4294967295
 8007058:	f1c3 0320 	rsb	r3, r3, #32
 800705c:	fa22 f303 	lsr.w	r3, r2, r3
 8007060:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007064:	401a      	ands	r2, r3
 8007066:	f846 2c04 	str.w	r2, [r6, #-4]
 800706a:	e7d3      	b.n	8007014 <__hexnan+0xd4>
 800706c:	3f04      	subs	r7, #4
 800706e:	e7d1      	b.n	8007014 <__hexnan+0xd4>
 8007070:	2004      	movs	r0, #4
 8007072:	b007      	add	sp, #28
 8007074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007078 <_localeconv_r>:
 8007078:	4800      	ldr	r0, [pc, #0]	; (800707c <_localeconv_r+0x4>)
 800707a:	4770      	bx	lr
 800707c:	2000016c 	.word	0x2000016c

08007080 <malloc>:
 8007080:	4b02      	ldr	r3, [pc, #8]	; (800708c <malloc+0xc>)
 8007082:	4601      	mov	r1, r0
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f000 bd65 	b.w	8007b54 <_malloc_r>
 800708a:	bf00      	nop
 800708c:	20000014 	.word	0x20000014

08007090 <__ascii_mbtowc>:
 8007090:	b082      	sub	sp, #8
 8007092:	b901      	cbnz	r1, 8007096 <__ascii_mbtowc+0x6>
 8007094:	a901      	add	r1, sp, #4
 8007096:	b142      	cbz	r2, 80070aa <__ascii_mbtowc+0x1a>
 8007098:	b14b      	cbz	r3, 80070ae <__ascii_mbtowc+0x1e>
 800709a:	7813      	ldrb	r3, [r2, #0]
 800709c:	600b      	str	r3, [r1, #0]
 800709e:	7812      	ldrb	r2, [r2, #0]
 80070a0:	1e10      	subs	r0, r2, #0
 80070a2:	bf18      	it	ne
 80070a4:	2001      	movne	r0, #1
 80070a6:	b002      	add	sp, #8
 80070a8:	4770      	bx	lr
 80070aa:	4610      	mov	r0, r2
 80070ac:	e7fb      	b.n	80070a6 <__ascii_mbtowc+0x16>
 80070ae:	f06f 0001 	mvn.w	r0, #1
 80070b2:	e7f8      	b.n	80070a6 <__ascii_mbtowc+0x16>

080070b4 <memchr>:
 80070b4:	4603      	mov	r3, r0
 80070b6:	b510      	push	{r4, lr}
 80070b8:	b2c9      	uxtb	r1, r1
 80070ba:	4402      	add	r2, r0
 80070bc:	4293      	cmp	r3, r2
 80070be:	4618      	mov	r0, r3
 80070c0:	d101      	bne.n	80070c6 <memchr+0x12>
 80070c2:	2000      	movs	r0, #0
 80070c4:	e003      	b.n	80070ce <memchr+0x1a>
 80070c6:	7804      	ldrb	r4, [r0, #0]
 80070c8:	3301      	adds	r3, #1
 80070ca:	428c      	cmp	r4, r1
 80070cc:	d1f6      	bne.n	80070bc <memchr+0x8>
 80070ce:	bd10      	pop	{r4, pc}

080070d0 <memcpy>:
 80070d0:	440a      	add	r2, r1
 80070d2:	4291      	cmp	r1, r2
 80070d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80070d8:	d100      	bne.n	80070dc <memcpy+0xc>
 80070da:	4770      	bx	lr
 80070dc:	b510      	push	{r4, lr}
 80070de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070e2:	4291      	cmp	r1, r2
 80070e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070e8:	d1f9      	bne.n	80070de <memcpy+0xe>
 80070ea:	bd10      	pop	{r4, pc}

080070ec <_Balloc>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070f0:	4604      	mov	r4, r0
 80070f2:	460d      	mov	r5, r1
 80070f4:	b976      	cbnz	r6, 8007114 <_Balloc+0x28>
 80070f6:	2010      	movs	r0, #16
 80070f8:	f7ff ffc2 	bl	8007080 <malloc>
 80070fc:	4602      	mov	r2, r0
 80070fe:	6260      	str	r0, [r4, #36]	; 0x24
 8007100:	b920      	cbnz	r0, 800710c <_Balloc+0x20>
 8007102:	2166      	movs	r1, #102	; 0x66
 8007104:	4b17      	ldr	r3, [pc, #92]	; (8007164 <_Balloc+0x78>)
 8007106:	4818      	ldr	r0, [pc, #96]	; (8007168 <_Balloc+0x7c>)
 8007108:	f000 ff2c 	bl	8007f64 <__assert_func>
 800710c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007110:	6006      	str	r6, [r0, #0]
 8007112:	60c6      	str	r6, [r0, #12]
 8007114:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007116:	68f3      	ldr	r3, [r6, #12]
 8007118:	b183      	cbz	r3, 800713c <_Balloc+0x50>
 800711a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007122:	b9b8      	cbnz	r0, 8007154 <_Balloc+0x68>
 8007124:	2101      	movs	r1, #1
 8007126:	fa01 f605 	lsl.w	r6, r1, r5
 800712a:	1d72      	adds	r2, r6, #5
 800712c:	4620      	mov	r0, r4
 800712e:	0092      	lsls	r2, r2, #2
 8007130:	f000 fc94 	bl	8007a5c <_calloc_r>
 8007134:	b160      	cbz	r0, 8007150 <_Balloc+0x64>
 8007136:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800713a:	e00e      	b.n	800715a <_Balloc+0x6e>
 800713c:	2221      	movs	r2, #33	; 0x21
 800713e:	2104      	movs	r1, #4
 8007140:	4620      	mov	r0, r4
 8007142:	f000 fc8b 	bl	8007a5c <_calloc_r>
 8007146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007148:	60f0      	str	r0, [r6, #12]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e4      	bne.n	800711a <_Balloc+0x2e>
 8007150:	2000      	movs	r0, #0
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	6802      	ldr	r2, [r0, #0]
 8007156:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800715a:	2300      	movs	r3, #0
 800715c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007160:	e7f7      	b.n	8007152 <_Balloc+0x66>
 8007162:	bf00      	nop
 8007164:	08008bf5 	.word	0x08008bf5
 8007168:	08008cf4 	.word	0x08008cf4

0800716c <_Bfree>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007170:	4605      	mov	r5, r0
 8007172:	460c      	mov	r4, r1
 8007174:	b976      	cbnz	r6, 8007194 <_Bfree+0x28>
 8007176:	2010      	movs	r0, #16
 8007178:	f7ff ff82 	bl	8007080 <malloc>
 800717c:	4602      	mov	r2, r0
 800717e:	6268      	str	r0, [r5, #36]	; 0x24
 8007180:	b920      	cbnz	r0, 800718c <_Bfree+0x20>
 8007182:	218a      	movs	r1, #138	; 0x8a
 8007184:	4b08      	ldr	r3, [pc, #32]	; (80071a8 <_Bfree+0x3c>)
 8007186:	4809      	ldr	r0, [pc, #36]	; (80071ac <_Bfree+0x40>)
 8007188:	f000 feec 	bl	8007f64 <__assert_func>
 800718c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007190:	6006      	str	r6, [r0, #0]
 8007192:	60c6      	str	r6, [r0, #12]
 8007194:	b13c      	cbz	r4, 80071a6 <_Bfree+0x3a>
 8007196:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007198:	6862      	ldr	r2, [r4, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071a0:	6021      	str	r1, [r4, #0]
 80071a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071a6:	bd70      	pop	{r4, r5, r6, pc}
 80071a8:	08008bf5 	.word	0x08008bf5
 80071ac:	08008cf4 	.word	0x08008cf4

080071b0 <__multadd>:
 80071b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b4:	4607      	mov	r7, r0
 80071b6:	460c      	mov	r4, r1
 80071b8:	461e      	mov	r6, r3
 80071ba:	2000      	movs	r0, #0
 80071bc:	690d      	ldr	r5, [r1, #16]
 80071be:	f101 0c14 	add.w	ip, r1, #20
 80071c2:	f8dc 3000 	ldr.w	r3, [ip]
 80071c6:	3001      	adds	r0, #1
 80071c8:	b299      	uxth	r1, r3
 80071ca:	fb02 6101 	mla	r1, r2, r1, r6
 80071ce:	0c1e      	lsrs	r6, r3, #16
 80071d0:	0c0b      	lsrs	r3, r1, #16
 80071d2:	fb02 3306 	mla	r3, r2, r6, r3
 80071d6:	b289      	uxth	r1, r1
 80071d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071dc:	4285      	cmp	r5, r0
 80071de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071e2:	f84c 1b04 	str.w	r1, [ip], #4
 80071e6:	dcec      	bgt.n	80071c2 <__multadd+0x12>
 80071e8:	b30e      	cbz	r6, 800722e <__multadd+0x7e>
 80071ea:	68a3      	ldr	r3, [r4, #8]
 80071ec:	42ab      	cmp	r3, r5
 80071ee:	dc19      	bgt.n	8007224 <__multadd+0x74>
 80071f0:	6861      	ldr	r1, [r4, #4]
 80071f2:	4638      	mov	r0, r7
 80071f4:	3101      	adds	r1, #1
 80071f6:	f7ff ff79 	bl	80070ec <_Balloc>
 80071fa:	4680      	mov	r8, r0
 80071fc:	b928      	cbnz	r0, 800720a <__multadd+0x5a>
 80071fe:	4602      	mov	r2, r0
 8007200:	21b5      	movs	r1, #181	; 0xb5
 8007202:	4b0c      	ldr	r3, [pc, #48]	; (8007234 <__multadd+0x84>)
 8007204:	480c      	ldr	r0, [pc, #48]	; (8007238 <__multadd+0x88>)
 8007206:	f000 fead 	bl	8007f64 <__assert_func>
 800720a:	6922      	ldr	r2, [r4, #16]
 800720c:	f104 010c 	add.w	r1, r4, #12
 8007210:	3202      	adds	r2, #2
 8007212:	0092      	lsls	r2, r2, #2
 8007214:	300c      	adds	r0, #12
 8007216:	f7ff ff5b 	bl	80070d0 <memcpy>
 800721a:	4621      	mov	r1, r4
 800721c:	4638      	mov	r0, r7
 800721e:	f7ff ffa5 	bl	800716c <_Bfree>
 8007222:	4644      	mov	r4, r8
 8007224:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007228:	3501      	adds	r5, #1
 800722a:	615e      	str	r6, [r3, #20]
 800722c:	6125      	str	r5, [r4, #16]
 800722e:	4620      	mov	r0, r4
 8007230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007234:	08008c67 	.word	0x08008c67
 8007238:	08008cf4 	.word	0x08008cf4

0800723c <__s2b>:
 800723c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007240:	4615      	mov	r5, r2
 8007242:	2209      	movs	r2, #9
 8007244:	461f      	mov	r7, r3
 8007246:	3308      	adds	r3, #8
 8007248:	460c      	mov	r4, r1
 800724a:	fb93 f3f2 	sdiv	r3, r3, r2
 800724e:	4606      	mov	r6, r0
 8007250:	2201      	movs	r2, #1
 8007252:	2100      	movs	r1, #0
 8007254:	429a      	cmp	r2, r3
 8007256:	db09      	blt.n	800726c <__s2b+0x30>
 8007258:	4630      	mov	r0, r6
 800725a:	f7ff ff47 	bl	80070ec <_Balloc>
 800725e:	b940      	cbnz	r0, 8007272 <__s2b+0x36>
 8007260:	4602      	mov	r2, r0
 8007262:	21ce      	movs	r1, #206	; 0xce
 8007264:	4b18      	ldr	r3, [pc, #96]	; (80072c8 <__s2b+0x8c>)
 8007266:	4819      	ldr	r0, [pc, #100]	; (80072cc <__s2b+0x90>)
 8007268:	f000 fe7c 	bl	8007f64 <__assert_func>
 800726c:	0052      	lsls	r2, r2, #1
 800726e:	3101      	adds	r1, #1
 8007270:	e7f0      	b.n	8007254 <__s2b+0x18>
 8007272:	9b08      	ldr	r3, [sp, #32]
 8007274:	2d09      	cmp	r5, #9
 8007276:	6143      	str	r3, [r0, #20]
 8007278:	f04f 0301 	mov.w	r3, #1
 800727c:	6103      	str	r3, [r0, #16]
 800727e:	dd16      	ble.n	80072ae <__s2b+0x72>
 8007280:	f104 0909 	add.w	r9, r4, #9
 8007284:	46c8      	mov	r8, r9
 8007286:	442c      	add	r4, r5
 8007288:	f818 3b01 	ldrb.w	r3, [r8], #1
 800728c:	4601      	mov	r1, r0
 800728e:	220a      	movs	r2, #10
 8007290:	4630      	mov	r0, r6
 8007292:	3b30      	subs	r3, #48	; 0x30
 8007294:	f7ff ff8c 	bl	80071b0 <__multadd>
 8007298:	45a0      	cmp	r8, r4
 800729a:	d1f5      	bne.n	8007288 <__s2b+0x4c>
 800729c:	f1a5 0408 	sub.w	r4, r5, #8
 80072a0:	444c      	add	r4, r9
 80072a2:	1b2d      	subs	r5, r5, r4
 80072a4:	1963      	adds	r3, r4, r5
 80072a6:	42bb      	cmp	r3, r7
 80072a8:	db04      	blt.n	80072b4 <__s2b+0x78>
 80072aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ae:	2509      	movs	r5, #9
 80072b0:	340a      	adds	r4, #10
 80072b2:	e7f6      	b.n	80072a2 <__s2b+0x66>
 80072b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80072b8:	4601      	mov	r1, r0
 80072ba:	220a      	movs	r2, #10
 80072bc:	4630      	mov	r0, r6
 80072be:	3b30      	subs	r3, #48	; 0x30
 80072c0:	f7ff ff76 	bl	80071b0 <__multadd>
 80072c4:	e7ee      	b.n	80072a4 <__s2b+0x68>
 80072c6:	bf00      	nop
 80072c8:	08008c67 	.word	0x08008c67
 80072cc:	08008cf4 	.word	0x08008cf4

080072d0 <__hi0bits>:
 80072d0:	0c02      	lsrs	r2, r0, #16
 80072d2:	0412      	lsls	r2, r2, #16
 80072d4:	4603      	mov	r3, r0
 80072d6:	b9ca      	cbnz	r2, 800730c <__hi0bits+0x3c>
 80072d8:	0403      	lsls	r3, r0, #16
 80072da:	2010      	movs	r0, #16
 80072dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072e0:	bf04      	itt	eq
 80072e2:	021b      	lsleq	r3, r3, #8
 80072e4:	3008      	addeq	r0, #8
 80072e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072ea:	bf04      	itt	eq
 80072ec:	011b      	lsleq	r3, r3, #4
 80072ee:	3004      	addeq	r0, #4
 80072f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072f4:	bf04      	itt	eq
 80072f6:	009b      	lsleq	r3, r3, #2
 80072f8:	3002      	addeq	r0, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	db05      	blt.n	800730a <__hi0bits+0x3a>
 80072fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007302:	f100 0001 	add.w	r0, r0, #1
 8007306:	bf08      	it	eq
 8007308:	2020      	moveq	r0, #32
 800730a:	4770      	bx	lr
 800730c:	2000      	movs	r0, #0
 800730e:	e7e5      	b.n	80072dc <__hi0bits+0xc>

08007310 <__lo0bits>:
 8007310:	6803      	ldr	r3, [r0, #0]
 8007312:	4602      	mov	r2, r0
 8007314:	f013 0007 	ands.w	r0, r3, #7
 8007318:	d00b      	beq.n	8007332 <__lo0bits+0x22>
 800731a:	07d9      	lsls	r1, r3, #31
 800731c:	d421      	bmi.n	8007362 <__lo0bits+0x52>
 800731e:	0798      	lsls	r0, r3, #30
 8007320:	bf49      	itett	mi
 8007322:	085b      	lsrmi	r3, r3, #1
 8007324:	089b      	lsrpl	r3, r3, #2
 8007326:	2001      	movmi	r0, #1
 8007328:	6013      	strmi	r3, [r2, #0]
 800732a:	bf5c      	itt	pl
 800732c:	2002      	movpl	r0, #2
 800732e:	6013      	strpl	r3, [r2, #0]
 8007330:	4770      	bx	lr
 8007332:	b299      	uxth	r1, r3
 8007334:	b909      	cbnz	r1, 800733a <__lo0bits+0x2a>
 8007336:	2010      	movs	r0, #16
 8007338:	0c1b      	lsrs	r3, r3, #16
 800733a:	b2d9      	uxtb	r1, r3
 800733c:	b909      	cbnz	r1, 8007342 <__lo0bits+0x32>
 800733e:	3008      	adds	r0, #8
 8007340:	0a1b      	lsrs	r3, r3, #8
 8007342:	0719      	lsls	r1, r3, #28
 8007344:	bf04      	itt	eq
 8007346:	091b      	lsreq	r3, r3, #4
 8007348:	3004      	addeq	r0, #4
 800734a:	0799      	lsls	r1, r3, #30
 800734c:	bf04      	itt	eq
 800734e:	089b      	lsreq	r3, r3, #2
 8007350:	3002      	addeq	r0, #2
 8007352:	07d9      	lsls	r1, r3, #31
 8007354:	d403      	bmi.n	800735e <__lo0bits+0x4e>
 8007356:	085b      	lsrs	r3, r3, #1
 8007358:	f100 0001 	add.w	r0, r0, #1
 800735c:	d003      	beq.n	8007366 <__lo0bits+0x56>
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	4770      	bx	lr
 8007362:	2000      	movs	r0, #0
 8007364:	4770      	bx	lr
 8007366:	2020      	movs	r0, #32
 8007368:	4770      	bx	lr
	...

0800736c <__i2b>:
 800736c:	b510      	push	{r4, lr}
 800736e:	460c      	mov	r4, r1
 8007370:	2101      	movs	r1, #1
 8007372:	f7ff febb 	bl	80070ec <_Balloc>
 8007376:	4602      	mov	r2, r0
 8007378:	b928      	cbnz	r0, 8007386 <__i2b+0x1a>
 800737a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800737e:	4b04      	ldr	r3, [pc, #16]	; (8007390 <__i2b+0x24>)
 8007380:	4804      	ldr	r0, [pc, #16]	; (8007394 <__i2b+0x28>)
 8007382:	f000 fdef 	bl	8007f64 <__assert_func>
 8007386:	2301      	movs	r3, #1
 8007388:	6144      	str	r4, [r0, #20]
 800738a:	6103      	str	r3, [r0, #16]
 800738c:	bd10      	pop	{r4, pc}
 800738e:	bf00      	nop
 8007390:	08008c67 	.word	0x08008c67
 8007394:	08008cf4 	.word	0x08008cf4

08007398 <__multiply>:
 8007398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739c:	4691      	mov	r9, r2
 800739e:	690a      	ldr	r2, [r1, #16]
 80073a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073a4:	460c      	mov	r4, r1
 80073a6:	429a      	cmp	r2, r3
 80073a8:	bfbe      	ittt	lt
 80073aa:	460b      	movlt	r3, r1
 80073ac:	464c      	movlt	r4, r9
 80073ae:	4699      	movlt	r9, r3
 80073b0:	6927      	ldr	r7, [r4, #16]
 80073b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073b6:	68a3      	ldr	r3, [r4, #8]
 80073b8:	6861      	ldr	r1, [r4, #4]
 80073ba:	eb07 060a 	add.w	r6, r7, sl
 80073be:	42b3      	cmp	r3, r6
 80073c0:	b085      	sub	sp, #20
 80073c2:	bfb8      	it	lt
 80073c4:	3101      	addlt	r1, #1
 80073c6:	f7ff fe91 	bl	80070ec <_Balloc>
 80073ca:	b930      	cbnz	r0, 80073da <__multiply+0x42>
 80073cc:	4602      	mov	r2, r0
 80073ce:	f240 115d 	movw	r1, #349	; 0x15d
 80073d2:	4b43      	ldr	r3, [pc, #268]	; (80074e0 <__multiply+0x148>)
 80073d4:	4843      	ldr	r0, [pc, #268]	; (80074e4 <__multiply+0x14c>)
 80073d6:	f000 fdc5 	bl	8007f64 <__assert_func>
 80073da:	f100 0514 	add.w	r5, r0, #20
 80073de:	462b      	mov	r3, r5
 80073e0:	2200      	movs	r2, #0
 80073e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073e6:	4543      	cmp	r3, r8
 80073e8:	d321      	bcc.n	800742e <__multiply+0x96>
 80073ea:	f104 0314 	add.w	r3, r4, #20
 80073ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80073f2:	f109 0314 	add.w	r3, r9, #20
 80073f6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80073fa:	9202      	str	r2, [sp, #8]
 80073fc:	1b3a      	subs	r2, r7, r4
 80073fe:	3a15      	subs	r2, #21
 8007400:	f022 0203 	bic.w	r2, r2, #3
 8007404:	3204      	adds	r2, #4
 8007406:	f104 0115 	add.w	r1, r4, #21
 800740a:	428f      	cmp	r7, r1
 800740c:	bf38      	it	cc
 800740e:	2204      	movcc	r2, #4
 8007410:	9201      	str	r2, [sp, #4]
 8007412:	9a02      	ldr	r2, [sp, #8]
 8007414:	9303      	str	r3, [sp, #12]
 8007416:	429a      	cmp	r2, r3
 8007418:	d80c      	bhi.n	8007434 <__multiply+0x9c>
 800741a:	2e00      	cmp	r6, #0
 800741c:	dd03      	ble.n	8007426 <__multiply+0x8e>
 800741e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007422:	2b00      	cmp	r3, #0
 8007424:	d059      	beq.n	80074da <__multiply+0x142>
 8007426:	6106      	str	r6, [r0, #16]
 8007428:	b005      	add	sp, #20
 800742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742e:	f843 2b04 	str.w	r2, [r3], #4
 8007432:	e7d8      	b.n	80073e6 <__multiply+0x4e>
 8007434:	f8b3 a000 	ldrh.w	sl, [r3]
 8007438:	f1ba 0f00 	cmp.w	sl, #0
 800743c:	d023      	beq.n	8007486 <__multiply+0xee>
 800743e:	46a9      	mov	r9, r5
 8007440:	f04f 0c00 	mov.w	ip, #0
 8007444:	f104 0e14 	add.w	lr, r4, #20
 8007448:	f85e 2b04 	ldr.w	r2, [lr], #4
 800744c:	f8d9 1000 	ldr.w	r1, [r9]
 8007450:	fa1f fb82 	uxth.w	fp, r2
 8007454:	b289      	uxth	r1, r1
 8007456:	fb0a 110b 	mla	r1, sl, fp, r1
 800745a:	4461      	add	r1, ip
 800745c:	f8d9 c000 	ldr.w	ip, [r9]
 8007460:	0c12      	lsrs	r2, r2, #16
 8007462:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007466:	fb0a c202 	mla	r2, sl, r2, ip
 800746a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800746e:	b289      	uxth	r1, r1
 8007470:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007474:	4577      	cmp	r7, lr
 8007476:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800747a:	f849 1b04 	str.w	r1, [r9], #4
 800747e:	d8e3      	bhi.n	8007448 <__multiply+0xb0>
 8007480:	9a01      	ldr	r2, [sp, #4]
 8007482:	f845 c002 	str.w	ip, [r5, r2]
 8007486:	9a03      	ldr	r2, [sp, #12]
 8007488:	3304      	adds	r3, #4
 800748a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800748e:	f1b9 0f00 	cmp.w	r9, #0
 8007492:	d020      	beq.n	80074d6 <__multiply+0x13e>
 8007494:	46ae      	mov	lr, r5
 8007496:	f04f 0a00 	mov.w	sl, #0
 800749a:	6829      	ldr	r1, [r5, #0]
 800749c:	f104 0c14 	add.w	ip, r4, #20
 80074a0:	f8bc b000 	ldrh.w	fp, [ip]
 80074a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074a8:	b289      	uxth	r1, r1
 80074aa:	fb09 220b 	mla	r2, r9, fp, r2
 80074ae:	4492      	add	sl, r2
 80074b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80074b4:	f84e 1b04 	str.w	r1, [lr], #4
 80074b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074bc:	f8be 1000 	ldrh.w	r1, [lr]
 80074c0:	0c12      	lsrs	r2, r2, #16
 80074c2:	fb09 1102 	mla	r1, r9, r2, r1
 80074c6:	4567      	cmp	r7, ip
 80074c8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80074cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074d0:	d8e6      	bhi.n	80074a0 <__multiply+0x108>
 80074d2:	9a01      	ldr	r2, [sp, #4]
 80074d4:	50a9      	str	r1, [r5, r2]
 80074d6:	3504      	adds	r5, #4
 80074d8:	e79b      	b.n	8007412 <__multiply+0x7a>
 80074da:	3e01      	subs	r6, #1
 80074dc:	e79d      	b.n	800741a <__multiply+0x82>
 80074de:	bf00      	nop
 80074e0:	08008c67 	.word	0x08008c67
 80074e4:	08008cf4 	.word	0x08008cf4

080074e8 <__pow5mult>:
 80074e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074ec:	4615      	mov	r5, r2
 80074ee:	f012 0203 	ands.w	r2, r2, #3
 80074f2:	4606      	mov	r6, r0
 80074f4:	460f      	mov	r7, r1
 80074f6:	d007      	beq.n	8007508 <__pow5mult+0x20>
 80074f8:	4c25      	ldr	r4, [pc, #148]	; (8007590 <__pow5mult+0xa8>)
 80074fa:	3a01      	subs	r2, #1
 80074fc:	2300      	movs	r3, #0
 80074fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007502:	f7ff fe55 	bl	80071b0 <__multadd>
 8007506:	4607      	mov	r7, r0
 8007508:	10ad      	asrs	r5, r5, #2
 800750a:	d03d      	beq.n	8007588 <__pow5mult+0xa0>
 800750c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800750e:	b97c      	cbnz	r4, 8007530 <__pow5mult+0x48>
 8007510:	2010      	movs	r0, #16
 8007512:	f7ff fdb5 	bl	8007080 <malloc>
 8007516:	4602      	mov	r2, r0
 8007518:	6270      	str	r0, [r6, #36]	; 0x24
 800751a:	b928      	cbnz	r0, 8007528 <__pow5mult+0x40>
 800751c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007520:	4b1c      	ldr	r3, [pc, #112]	; (8007594 <__pow5mult+0xac>)
 8007522:	481d      	ldr	r0, [pc, #116]	; (8007598 <__pow5mult+0xb0>)
 8007524:	f000 fd1e 	bl	8007f64 <__assert_func>
 8007528:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800752c:	6004      	str	r4, [r0, #0]
 800752e:	60c4      	str	r4, [r0, #12]
 8007530:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007534:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007538:	b94c      	cbnz	r4, 800754e <__pow5mult+0x66>
 800753a:	f240 2171 	movw	r1, #625	; 0x271
 800753e:	4630      	mov	r0, r6
 8007540:	f7ff ff14 	bl	800736c <__i2b>
 8007544:	2300      	movs	r3, #0
 8007546:	4604      	mov	r4, r0
 8007548:	f8c8 0008 	str.w	r0, [r8, #8]
 800754c:	6003      	str	r3, [r0, #0]
 800754e:	f04f 0900 	mov.w	r9, #0
 8007552:	07eb      	lsls	r3, r5, #31
 8007554:	d50a      	bpl.n	800756c <__pow5mult+0x84>
 8007556:	4639      	mov	r1, r7
 8007558:	4622      	mov	r2, r4
 800755a:	4630      	mov	r0, r6
 800755c:	f7ff ff1c 	bl	8007398 <__multiply>
 8007560:	4680      	mov	r8, r0
 8007562:	4639      	mov	r1, r7
 8007564:	4630      	mov	r0, r6
 8007566:	f7ff fe01 	bl	800716c <_Bfree>
 800756a:	4647      	mov	r7, r8
 800756c:	106d      	asrs	r5, r5, #1
 800756e:	d00b      	beq.n	8007588 <__pow5mult+0xa0>
 8007570:	6820      	ldr	r0, [r4, #0]
 8007572:	b938      	cbnz	r0, 8007584 <__pow5mult+0x9c>
 8007574:	4622      	mov	r2, r4
 8007576:	4621      	mov	r1, r4
 8007578:	4630      	mov	r0, r6
 800757a:	f7ff ff0d 	bl	8007398 <__multiply>
 800757e:	6020      	str	r0, [r4, #0]
 8007580:	f8c0 9000 	str.w	r9, [r0]
 8007584:	4604      	mov	r4, r0
 8007586:	e7e4      	b.n	8007552 <__pow5mult+0x6a>
 8007588:	4638      	mov	r0, r7
 800758a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800758e:	bf00      	nop
 8007590:	08008e40 	.word	0x08008e40
 8007594:	08008bf5 	.word	0x08008bf5
 8007598:	08008cf4 	.word	0x08008cf4

0800759c <__lshift>:
 800759c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a0:	460c      	mov	r4, r1
 80075a2:	4607      	mov	r7, r0
 80075a4:	4691      	mov	r9, r2
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	6849      	ldr	r1, [r1, #4]
 80075aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075ae:	68a3      	ldr	r3, [r4, #8]
 80075b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075b4:	f108 0601 	add.w	r6, r8, #1
 80075b8:	42b3      	cmp	r3, r6
 80075ba:	db0b      	blt.n	80075d4 <__lshift+0x38>
 80075bc:	4638      	mov	r0, r7
 80075be:	f7ff fd95 	bl	80070ec <_Balloc>
 80075c2:	4605      	mov	r5, r0
 80075c4:	b948      	cbnz	r0, 80075da <__lshift+0x3e>
 80075c6:	4602      	mov	r2, r0
 80075c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075cc:	4b29      	ldr	r3, [pc, #164]	; (8007674 <__lshift+0xd8>)
 80075ce:	482a      	ldr	r0, [pc, #168]	; (8007678 <__lshift+0xdc>)
 80075d0:	f000 fcc8 	bl	8007f64 <__assert_func>
 80075d4:	3101      	adds	r1, #1
 80075d6:	005b      	lsls	r3, r3, #1
 80075d8:	e7ee      	b.n	80075b8 <__lshift+0x1c>
 80075da:	2300      	movs	r3, #0
 80075dc:	f100 0114 	add.w	r1, r0, #20
 80075e0:	f100 0210 	add.w	r2, r0, #16
 80075e4:	4618      	mov	r0, r3
 80075e6:	4553      	cmp	r3, sl
 80075e8:	db37      	blt.n	800765a <__lshift+0xbe>
 80075ea:	6920      	ldr	r0, [r4, #16]
 80075ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075f0:	f104 0314 	add.w	r3, r4, #20
 80075f4:	f019 091f 	ands.w	r9, r9, #31
 80075f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007600:	d02f      	beq.n	8007662 <__lshift+0xc6>
 8007602:	468a      	mov	sl, r1
 8007604:	f04f 0c00 	mov.w	ip, #0
 8007608:	f1c9 0e20 	rsb	lr, r9, #32
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	fa02 f209 	lsl.w	r2, r2, r9
 8007612:	ea42 020c 	orr.w	r2, r2, ip
 8007616:	f84a 2b04 	str.w	r2, [sl], #4
 800761a:	f853 2b04 	ldr.w	r2, [r3], #4
 800761e:	4298      	cmp	r0, r3
 8007620:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007624:	d8f2      	bhi.n	800760c <__lshift+0x70>
 8007626:	1b03      	subs	r3, r0, r4
 8007628:	3b15      	subs	r3, #21
 800762a:	f023 0303 	bic.w	r3, r3, #3
 800762e:	3304      	adds	r3, #4
 8007630:	f104 0215 	add.w	r2, r4, #21
 8007634:	4290      	cmp	r0, r2
 8007636:	bf38      	it	cc
 8007638:	2304      	movcc	r3, #4
 800763a:	f841 c003 	str.w	ip, [r1, r3]
 800763e:	f1bc 0f00 	cmp.w	ip, #0
 8007642:	d001      	beq.n	8007648 <__lshift+0xac>
 8007644:	f108 0602 	add.w	r6, r8, #2
 8007648:	3e01      	subs	r6, #1
 800764a:	4638      	mov	r0, r7
 800764c:	4621      	mov	r1, r4
 800764e:	612e      	str	r6, [r5, #16]
 8007650:	f7ff fd8c 	bl	800716c <_Bfree>
 8007654:	4628      	mov	r0, r5
 8007656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765a:	f842 0f04 	str.w	r0, [r2, #4]!
 800765e:	3301      	adds	r3, #1
 8007660:	e7c1      	b.n	80075e6 <__lshift+0x4a>
 8007662:	3904      	subs	r1, #4
 8007664:	f853 2b04 	ldr.w	r2, [r3], #4
 8007668:	4298      	cmp	r0, r3
 800766a:	f841 2f04 	str.w	r2, [r1, #4]!
 800766e:	d8f9      	bhi.n	8007664 <__lshift+0xc8>
 8007670:	e7ea      	b.n	8007648 <__lshift+0xac>
 8007672:	bf00      	nop
 8007674:	08008c67 	.word	0x08008c67
 8007678:	08008cf4 	.word	0x08008cf4

0800767c <__mcmp>:
 800767c:	4603      	mov	r3, r0
 800767e:	690a      	ldr	r2, [r1, #16]
 8007680:	6900      	ldr	r0, [r0, #16]
 8007682:	b530      	push	{r4, r5, lr}
 8007684:	1a80      	subs	r0, r0, r2
 8007686:	d10d      	bne.n	80076a4 <__mcmp+0x28>
 8007688:	3314      	adds	r3, #20
 800768a:	3114      	adds	r1, #20
 800768c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007690:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007694:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007698:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800769c:	4295      	cmp	r5, r2
 800769e:	d002      	beq.n	80076a6 <__mcmp+0x2a>
 80076a0:	d304      	bcc.n	80076ac <__mcmp+0x30>
 80076a2:	2001      	movs	r0, #1
 80076a4:	bd30      	pop	{r4, r5, pc}
 80076a6:	42a3      	cmp	r3, r4
 80076a8:	d3f4      	bcc.n	8007694 <__mcmp+0x18>
 80076aa:	e7fb      	b.n	80076a4 <__mcmp+0x28>
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
 80076b0:	e7f8      	b.n	80076a4 <__mcmp+0x28>
	...

080076b4 <__mdiff>:
 80076b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b8:	460d      	mov	r5, r1
 80076ba:	4607      	mov	r7, r0
 80076bc:	4611      	mov	r1, r2
 80076be:	4628      	mov	r0, r5
 80076c0:	4614      	mov	r4, r2
 80076c2:	f7ff ffdb 	bl	800767c <__mcmp>
 80076c6:	1e06      	subs	r6, r0, #0
 80076c8:	d111      	bne.n	80076ee <__mdiff+0x3a>
 80076ca:	4631      	mov	r1, r6
 80076cc:	4638      	mov	r0, r7
 80076ce:	f7ff fd0d 	bl	80070ec <_Balloc>
 80076d2:	4602      	mov	r2, r0
 80076d4:	b928      	cbnz	r0, 80076e2 <__mdiff+0x2e>
 80076d6:	f240 2132 	movw	r1, #562	; 0x232
 80076da:	4b3a      	ldr	r3, [pc, #232]	; (80077c4 <__mdiff+0x110>)
 80076dc:	483a      	ldr	r0, [pc, #232]	; (80077c8 <__mdiff+0x114>)
 80076de:	f000 fc41 	bl	8007f64 <__assert_func>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80076e8:	4610      	mov	r0, r2
 80076ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ee:	bfa4      	itt	ge
 80076f0:	4623      	movge	r3, r4
 80076f2:	462c      	movge	r4, r5
 80076f4:	4638      	mov	r0, r7
 80076f6:	6861      	ldr	r1, [r4, #4]
 80076f8:	bfa6      	itte	ge
 80076fa:	461d      	movge	r5, r3
 80076fc:	2600      	movge	r6, #0
 80076fe:	2601      	movlt	r6, #1
 8007700:	f7ff fcf4 	bl	80070ec <_Balloc>
 8007704:	4602      	mov	r2, r0
 8007706:	b918      	cbnz	r0, 8007710 <__mdiff+0x5c>
 8007708:	f44f 7110 	mov.w	r1, #576	; 0x240
 800770c:	4b2d      	ldr	r3, [pc, #180]	; (80077c4 <__mdiff+0x110>)
 800770e:	e7e5      	b.n	80076dc <__mdiff+0x28>
 8007710:	f102 0814 	add.w	r8, r2, #20
 8007714:	46c2      	mov	sl, r8
 8007716:	f04f 0c00 	mov.w	ip, #0
 800771a:	6927      	ldr	r7, [r4, #16]
 800771c:	60c6      	str	r6, [r0, #12]
 800771e:	692e      	ldr	r6, [r5, #16]
 8007720:	f104 0014 	add.w	r0, r4, #20
 8007724:	f105 0914 	add.w	r9, r5, #20
 8007728:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800772c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007730:	3410      	adds	r4, #16
 8007732:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007736:	f859 3b04 	ldr.w	r3, [r9], #4
 800773a:	fa1f f18b 	uxth.w	r1, fp
 800773e:	448c      	add	ip, r1
 8007740:	b299      	uxth	r1, r3
 8007742:	0c1b      	lsrs	r3, r3, #16
 8007744:	ebac 0101 	sub.w	r1, ip, r1
 8007748:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800774c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007750:	b289      	uxth	r1, r1
 8007752:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007756:	454e      	cmp	r6, r9
 8007758:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800775c:	f84a 3b04 	str.w	r3, [sl], #4
 8007760:	d8e7      	bhi.n	8007732 <__mdiff+0x7e>
 8007762:	1b73      	subs	r3, r6, r5
 8007764:	3b15      	subs	r3, #21
 8007766:	f023 0303 	bic.w	r3, r3, #3
 800776a:	3515      	adds	r5, #21
 800776c:	3304      	adds	r3, #4
 800776e:	42ae      	cmp	r6, r5
 8007770:	bf38      	it	cc
 8007772:	2304      	movcc	r3, #4
 8007774:	4418      	add	r0, r3
 8007776:	4443      	add	r3, r8
 8007778:	461e      	mov	r6, r3
 800777a:	4605      	mov	r5, r0
 800777c:	4575      	cmp	r5, lr
 800777e:	d30e      	bcc.n	800779e <__mdiff+0xea>
 8007780:	f10e 0103 	add.w	r1, lr, #3
 8007784:	1a09      	subs	r1, r1, r0
 8007786:	f021 0103 	bic.w	r1, r1, #3
 800778a:	3803      	subs	r0, #3
 800778c:	4586      	cmp	lr, r0
 800778e:	bf38      	it	cc
 8007790:	2100      	movcc	r1, #0
 8007792:	4419      	add	r1, r3
 8007794:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007798:	b18b      	cbz	r3, 80077be <__mdiff+0x10a>
 800779a:	6117      	str	r7, [r2, #16]
 800779c:	e7a4      	b.n	80076e8 <__mdiff+0x34>
 800779e:	f855 8b04 	ldr.w	r8, [r5], #4
 80077a2:	fa1f f188 	uxth.w	r1, r8
 80077a6:	4461      	add	r1, ip
 80077a8:	140c      	asrs	r4, r1, #16
 80077aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077ae:	b289      	uxth	r1, r1
 80077b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80077b4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80077b8:	f846 1b04 	str.w	r1, [r6], #4
 80077bc:	e7de      	b.n	800777c <__mdiff+0xc8>
 80077be:	3f01      	subs	r7, #1
 80077c0:	e7e8      	b.n	8007794 <__mdiff+0xe0>
 80077c2:	bf00      	nop
 80077c4:	08008c67 	.word	0x08008c67
 80077c8:	08008cf4 	.word	0x08008cf4

080077cc <__ulp>:
 80077cc:	4b11      	ldr	r3, [pc, #68]	; (8007814 <__ulp+0x48>)
 80077ce:	400b      	ands	r3, r1
 80077d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	dd02      	ble.n	80077de <__ulp+0x12>
 80077d8:	2000      	movs	r0, #0
 80077da:	4619      	mov	r1, r3
 80077dc:	4770      	bx	lr
 80077de:	425b      	negs	r3, r3
 80077e0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80077e4:	f04f 0000 	mov.w	r0, #0
 80077e8:	f04f 0100 	mov.w	r1, #0
 80077ec:	ea4f 5223 	mov.w	r2, r3, asr #20
 80077f0:	da04      	bge.n	80077fc <__ulp+0x30>
 80077f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80077f6:	fa43 f102 	asr.w	r1, r3, r2
 80077fa:	4770      	bx	lr
 80077fc:	f1a2 0314 	sub.w	r3, r2, #20
 8007800:	2b1e      	cmp	r3, #30
 8007802:	bfd6      	itet	le
 8007804:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007808:	2301      	movgt	r3, #1
 800780a:	fa22 f303 	lsrle.w	r3, r2, r3
 800780e:	4618      	mov	r0, r3
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	7ff00000 	.word	0x7ff00000

08007818 <__b2d>:
 8007818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800781c:	6907      	ldr	r7, [r0, #16]
 800781e:	f100 0914 	add.w	r9, r0, #20
 8007822:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007826:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800782a:	f1a7 0804 	sub.w	r8, r7, #4
 800782e:	4630      	mov	r0, r6
 8007830:	f7ff fd4e 	bl	80072d0 <__hi0bits>
 8007834:	f1c0 0320 	rsb	r3, r0, #32
 8007838:	280a      	cmp	r0, #10
 800783a:	600b      	str	r3, [r1, #0]
 800783c:	491f      	ldr	r1, [pc, #124]	; (80078bc <__b2d+0xa4>)
 800783e:	dc17      	bgt.n	8007870 <__b2d+0x58>
 8007840:	45c1      	cmp	r9, r8
 8007842:	bf28      	it	cs
 8007844:	2200      	movcs	r2, #0
 8007846:	f1c0 0c0b 	rsb	ip, r0, #11
 800784a:	fa26 f30c 	lsr.w	r3, r6, ip
 800784e:	bf38      	it	cc
 8007850:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007854:	ea43 0501 	orr.w	r5, r3, r1
 8007858:	f100 0315 	add.w	r3, r0, #21
 800785c:	fa06 f303 	lsl.w	r3, r6, r3
 8007860:	fa22 f20c 	lsr.w	r2, r2, ip
 8007864:	ea43 0402 	orr.w	r4, r3, r2
 8007868:	4620      	mov	r0, r4
 800786a:	4629      	mov	r1, r5
 800786c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007870:	45c1      	cmp	r9, r8
 8007872:	bf2e      	itee	cs
 8007874:	2200      	movcs	r2, #0
 8007876:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800787a:	f1a7 0808 	subcc.w	r8, r7, #8
 800787e:	f1b0 030b 	subs.w	r3, r0, #11
 8007882:	d016      	beq.n	80078b2 <__b2d+0x9a>
 8007884:	f1c3 0720 	rsb	r7, r3, #32
 8007888:	fa22 f107 	lsr.w	r1, r2, r7
 800788c:	45c8      	cmp	r8, r9
 800788e:	fa06 f603 	lsl.w	r6, r6, r3
 8007892:	ea46 0601 	orr.w	r6, r6, r1
 8007896:	bf94      	ite	ls
 8007898:	2100      	movls	r1, #0
 800789a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800789e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80078a2:	fa02 f003 	lsl.w	r0, r2, r3
 80078a6:	40f9      	lsrs	r1, r7
 80078a8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80078ac:	ea40 0401 	orr.w	r4, r0, r1
 80078b0:	e7da      	b.n	8007868 <__b2d+0x50>
 80078b2:	4614      	mov	r4, r2
 80078b4:	ea46 0501 	orr.w	r5, r6, r1
 80078b8:	e7d6      	b.n	8007868 <__b2d+0x50>
 80078ba:	bf00      	nop
 80078bc:	3ff00000 	.word	0x3ff00000

080078c0 <__d2b>:
 80078c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80078c4:	2101      	movs	r1, #1
 80078c6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80078ca:	4690      	mov	r8, r2
 80078cc:	461d      	mov	r5, r3
 80078ce:	f7ff fc0d 	bl	80070ec <_Balloc>
 80078d2:	4604      	mov	r4, r0
 80078d4:	b930      	cbnz	r0, 80078e4 <__d2b+0x24>
 80078d6:	4602      	mov	r2, r0
 80078d8:	f240 310a 	movw	r1, #778	; 0x30a
 80078dc:	4b24      	ldr	r3, [pc, #144]	; (8007970 <__d2b+0xb0>)
 80078de:	4825      	ldr	r0, [pc, #148]	; (8007974 <__d2b+0xb4>)
 80078e0:	f000 fb40 	bl	8007f64 <__assert_func>
 80078e4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80078e8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80078ec:	bb2d      	cbnz	r5, 800793a <__d2b+0x7a>
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	f1b8 0300 	subs.w	r3, r8, #0
 80078f4:	d026      	beq.n	8007944 <__d2b+0x84>
 80078f6:	4668      	mov	r0, sp
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	f7ff fd09 	bl	8007310 <__lo0bits>
 80078fe:	9900      	ldr	r1, [sp, #0]
 8007900:	b1f0      	cbz	r0, 8007940 <__d2b+0x80>
 8007902:	9a01      	ldr	r2, [sp, #4]
 8007904:	f1c0 0320 	rsb	r3, r0, #32
 8007908:	fa02 f303 	lsl.w	r3, r2, r3
 800790c:	430b      	orrs	r3, r1
 800790e:	40c2      	lsrs	r2, r0
 8007910:	6163      	str	r3, [r4, #20]
 8007912:	9201      	str	r2, [sp, #4]
 8007914:	9b01      	ldr	r3, [sp, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	bf14      	ite	ne
 800791a:	2102      	movne	r1, #2
 800791c:	2101      	moveq	r1, #1
 800791e:	61a3      	str	r3, [r4, #24]
 8007920:	6121      	str	r1, [r4, #16]
 8007922:	b1c5      	cbz	r5, 8007956 <__d2b+0x96>
 8007924:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007928:	4405      	add	r5, r0
 800792a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800792e:	603d      	str	r5, [r7, #0]
 8007930:	6030      	str	r0, [r6, #0]
 8007932:	4620      	mov	r0, r4
 8007934:	b002      	add	sp, #8
 8007936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800793a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800793e:	e7d6      	b.n	80078ee <__d2b+0x2e>
 8007940:	6161      	str	r1, [r4, #20]
 8007942:	e7e7      	b.n	8007914 <__d2b+0x54>
 8007944:	a801      	add	r0, sp, #4
 8007946:	f7ff fce3 	bl	8007310 <__lo0bits>
 800794a:	2101      	movs	r1, #1
 800794c:	9b01      	ldr	r3, [sp, #4]
 800794e:	6121      	str	r1, [r4, #16]
 8007950:	6163      	str	r3, [r4, #20]
 8007952:	3020      	adds	r0, #32
 8007954:	e7e5      	b.n	8007922 <__d2b+0x62>
 8007956:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800795a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800795e:	6038      	str	r0, [r7, #0]
 8007960:	6918      	ldr	r0, [r3, #16]
 8007962:	f7ff fcb5 	bl	80072d0 <__hi0bits>
 8007966:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800796a:	6031      	str	r1, [r6, #0]
 800796c:	e7e1      	b.n	8007932 <__d2b+0x72>
 800796e:	bf00      	nop
 8007970:	08008c67 	.word	0x08008c67
 8007974:	08008cf4 	.word	0x08008cf4

08007978 <__ratio>:
 8007978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797c:	4688      	mov	r8, r1
 800797e:	4669      	mov	r1, sp
 8007980:	4681      	mov	r9, r0
 8007982:	f7ff ff49 	bl	8007818 <__b2d>
 8007986:	460f      	mov	r7, r1
 8007988:	4604      	mov	r4, r0
 800798a:	460d      	mov	r5, r1
 800798c:	4640      	mov	r0, r8
 800798e:	a901      	add	r1, sp, #4
 8007990:	f7ff ff42 	bl	8007818 <__b2d>
 8007994:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007998:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800799c:	468b      	mov	fp, r1
 800799e:	eba3 0c02 	sub.w	ip, r3, r2
 80079a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80079a6:	1a9b      	subs	r3, r3, r2
 80079a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bfd5      	itete	le
 80079b0:	460a      	movle	r2, r1
 80079b2:	462a      	movgt	r2, r5
 80079b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80079b8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80079bc:	bfd8      	it	le
 80079be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80079c2:	465b      	mov	r3, fp
 80079c4:	4602      	mov	r2, r0
 80079c6:	4639      	mov	r1, r7
 80079c8:	4620      	mov	r0, r4
 80079ca:	f7f8 ff63 	bl	8000894 <__aeabi_ddiv>
 80079ce:	b003      	add	sp, #12
 80079d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079d4 <__copybits>:
 80079d4:	3901      	subs	r1, #1
 80079d6:	b570      	push	{r4, r5, r6, lr}
 80079d8:	1149      	asrs	r1, r1, #5
 80079da:	6914      	ldr	r4, [r2, #16]
 80079dc:	3101      	adds	r1, #1
 80079de:	f102 0314 	add.w	r3, r2, #20
 80079e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80079e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80079ea:	1f05      	subs	r5, r0, #4
 80079ec:	42a3      	cmp	r3, r4
 80079ee:	d30c      	bcc.n	8007a0a <__copybits+0x36>
 80079f0:	1aa3      	subs	r3, r4, r2
 80079f2:	3b11      	subs	r3, #17
 80079f4:	f023 0303 	bic.w	r3, r3, #3
 80079f8:	3211      	adds	r2, #17
 80079fa:	42a2      	cmp	r2, r4
 80079fc:	bf88      	it	hi
 80079fe:	2300      	movhi	r3, #0
 8007a00:	4418      	add	r0, r3
 8007a02:	2300      	movs	r3, #0
 8007a04:	4288      	cmp	r0, r1
 8007a06:	d305      	bcc.n	8007a14 <__copybits+0x40>
 8007a08:	bd70      	pop	{r4, r5, r6, pc}
 8007a0a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007a0e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007a12:	e7eb      	b.n	80079ec <__copybits+0x18>
 8007a14:	f840 3b04 	str.w	r3, [r0], #4
 8007a18:	e7f4      	b.n	8007a04 <__copybits+0x30>

08007a1a <__any_on>:
 8007a1a:	f100 0214 	add.w	r2, r0, #20
 8007a1e:	6900      	ldr	r0, [r0, #16]
 8007a20:	114b      	asrs	r3, r1, #5
 8007a22:	4298      	cmp	r0, r3
 8007a24:	b510      	push	{r4, lr}
 8007a26:	db11      	blt.n	8007a4c <__any_on+0x32>
 8007a28:	dd0a      	ble.n	8007a40 <__any_on+0x26>
 8007a2a:	f011 011f 	ands.w	r1, r1, #31
 8007a2e:	d007      	beq.n	8007a40 <__any_on+0x26>
 8007a30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a34:	fa24 f001 	lsr.w	r0, r4, r1
 8007a38:	fa00 f101 	lsl.w	r1, r0, r1
 8007a3c:	428c      	cmp	r4, r1
 8007a3e:	d10b      	bne.n	8007a58 <__any_on+0x3e>
 8007a40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d803      	bhi.n	8007a50 <__any_on+0x36>
 8007a48:	2000      	movs	r0, #0
 8007a4a:	bd10      	pop	{r4, pc}
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	e7f7      	b.n	8007a40 <__any_on+0x26>
 8007a50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a54:	2900      	cmp	r1, #0
 8007a56:	d0f5      	beq.n	8007a44 <__any_on+0x2a>
 8007a58:	2001      	movs	r0, #1
 8007a5a:	e7f6      	b.n	8007a4a <__any_on+0x30>

08007a5c <_calloc_r>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	fba1 5402 	umull	r5, r4, r1, r2
 8007a62:	b934      	cbnz	r4, 8007a72 <_calloc_r+0x16>
 8007a64:	4629      	mov	r1, r5
 8007a66:	f000 f875 	bl	8007b54 <_malloc_r>
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	b928      	cbnz	r0, 8007a7a <_calloc_r+0x1e>
 8007a6e:	4630      	mov	r0, r6
 8007a70:	bd70      	pop	{r4, r5, r6, pc}
 8007a72:	220c      	movs	r2, #12
 8007a74:	2600      	movs	r6, #0
 8007a76:	6002      	str	r2, [r0, #0]
 8007a78:	e7f9      	b.n	8007a6e <_calloc_r+0x12>
 8007a7a:	462a      	mov	r2, r5
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	f7fc fe67 	bl	8004750 <memset>
 8007a82:	e7f4      	b.n	8007a6e <_calloc_r+0x12>

08007a84 <_free_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4605      	mov	r5, r0
 8007a88:	2900      	cmp	r1, #0
 8007a8a:	d040      	beq.n	8007b0e <_free_r+0x8a>
 8007a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a90:	1f0c      	subs	r4, r1, #4
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	bfb8      	it	lt
 8007a96:	18e4      	addlt	r4, r4, r3
 8007a98:	f000 faae 	bl	8007ff8 <__malloc_lock>
 8007a9c:	4a1c      	ldr	r2, [pc, #112]	; (8007b10 <_free_r+0x8c>)
 8007a9e:	6813      	ldr	r3, [r2, #0]
 8007aa0:	b933      	cbnz	r3, 8007ab0 <_free_r+0x2c>
 8007aa2:	6063      	str	r3, [r4, #4]
 8007aa4:	6014      	str	r4, [r2, #0]
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aac:	f000 baaa 	b.w	8008004 <__malloc_unlock>
 8007ab0:	42a3      	cmp	r3, r4
 8007ab2:	d908      	bls.n	8007ac6 <_free_r+0x42>
 8007ab4:	6820      	ldr	r0, [r4, #0]
 8007ab6:	1821      	adds	r1, r4, r0
 8007ab8:	428b      	cmp	r3, r1
 8007aba:	bf01      	itttt	eq
 8007abc:	6819      	ldreq	r1, [r3, #0]
 8007abe:	685b      	ldreq	r3, [r3, #4]
 8007ac0:	1809      	addeq	r1, r1, r0
 8007ac2:	6021      	streq	r1, [r4, #0]
 8007ac4:	e7ed      	b.n	8007aa2 <_free_r+0x1e>
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	b10b      	cbz	r3, 8007ad0 <_free_r+0x4c>
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	d9fa      	bls.n	8007ac6 <_free_r+0x42>
 8007ad0:	6811      	ldr	r1, [r2, #0]
 8007ad2:	1850      	adds	r0, r2, r1
 8007ad4:	42a0      	cmp	r0, r4
 8007ad6:	d10b      	bne.n	8007af0 <_free_r+0x6c>
 8007ad8:	6820      	ldr	r0, [r4, #0]
 8007ada:	4401      	add	r1, r0
 8007adc:	1850      	adds	r0, r2, r1
 8007ade:	4283      	cmp	r3, r0
 8007ae0:	6011      	str	r1, [r2, #0]
 8007ae2:	d1e0      	bne.n	8007aa6 <_free_r+0x22>
 8007ae4:	6818      	ldr	r0, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	4401      	add	r1, r0
 8007aea:	6011      	str	r1, [r2, #0]
 8007aec:	6053      	str	r3, [r2, #4]
 8007aee:	e7da      	b.n	8007aa6 <_free_r+0x22>
 8007af0:	d902      	bls.n	8007af8 <_free_r+0x74>
 8007af2:	230c      	movs	r3, #12
 8007af4:	602b      	str	r3, [r5, #0]
 8007af6:	e7d6      	b.n	8007aa6 <_free_r+0x22>
 8007af8:	6820      	ldr	r0, [r4, #0]
 8007afa:	1821      	adds	r1, r4, r0
 8007afc:	428b      	cmp	r3, r1
 8007afe:	bf01      	itttt	eq
 8007b00:	6819      	ldreq	r1, [r3, #0]
 8007b02:	685b      	ldreq	r3, [r3, #4]
 8007b04:	1809      	addeq	r1, r1, r0
 8007b06:	6021      	streq	r1, [r4, #0]
 8007b08:	6063      	str	r3, [r4, #4]
 8007b0a:	6054      	str	r4, [r2, #4]
 8007b0c:	e7cb      	b.n	8007aa6 <_free_r+0x22>
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	200003c8 	.word	0x200003c8

08007b14 <sbrk_aligned>:
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	4e0e      	ldr	r6, [pc, #56]	; (8007b50 <sbrk_aligned+0x3c>)
 8007b18:	460c      	mov	r4, r1
 8007b1a:	6831      	ldr	r1, [r6, #0]
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	b911      	cbnz	r1, 8007b26 <sbrk_aligned+0x12>
 8007b20:	f000 f9ee 	bl	8007f00 <_sbrk_r>
 8007b24:	6030      	str	r0, [r6, #0]
 8007b26:	4621      	mov	r1, r4
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f000 f9e9 	bl	8007f00 <_sbrk_r>
 8007b2e:	1c43      	adds	r3, r0, #1
 8007b30:	d00a      	beq.n	8007b48 <sbrk_aligned+0x34>
 8007b32:	1cc4      	adds	r4, r0, #3
 8007b34:	f024 0403 	bic.w	r4, r4, #3
 8007b38:	42a0      	cmp	r0, r4
 8007b3a:	d007      	beq.n	8007b4c <sbrk_aligned+0x38>
 8007b3c:	1a21      	subs	r1, r4, r0
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f000 f9de 	bl	8007f00 <_sbrk_r>
 8007b44:	3001      	adds	r0, #1
 8007b46:	d101      	bne.n	8007b4c <sbrk_aligned+0x38>
 8007b48:	f04f 34ff 	mov.w	r4, #4294967295
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	bd70      	pop	{r4, r5, r6, pc}
 8007b50:	200003cc 	.word	0x200003cc

08007b54 <_malloc_r>:
 8007b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b58:	1ccd      	adds	r5, r1, #3
 8007b5a:	f025 0503 	bic.w	r5, r5, #3
 8007b5e:	3508      	adds	r5, #8
 8007b60:	2d0c      	cmp	r5, #12
 8007b62:	bf38      	it	cc
 8007b64:	250c      	movcc	r5, #12
 8007b66:	2d00      	cmp	r5, #0
 8007b68:	4607      	mov	r7, r0
 8007b6a:	db01      	blt.n	8007b70 <_malloc_r+0x1c>
 8007b6c:	42a9      	cmp	r1, r5
 8007b6e:	d905      	bls.n	8007b7c <_malloc_r+0x28>
 8007b70:	230c      	movs	r3, #12
 8007b72:	2600      	movs	r6, #0
 8007b74:	603b      	str	r3, [r7, #0]
 8007b76:	4630      	mov	r0, r6
 8007b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b7c:	4e2e      	ldr	r6, [pc, #184]	; (8007c38 <_malloc_r+0xe4>)
 8007b7e:	f000 fa3b 	bl	8007ff8 <__malloc_lock>
 8007b82:	6833      	ldr	r3, [r6, #0]
 8007b84:	461c      	mov	r4, r3
 8007b86:	bb34      	cbnz	r4, 8007bd6 <_malloc_r+0x82>
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4638      	mov	r0, r7
 8007b8c:	f7ff ffc2 	bl	8007b14 <sbrk_aligned>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	4604      	mov	r4, r0
 8007b94:	d14d      	bne.n	8007c32 <_malloc_r+0xde>
 8007b96:	6834      	ldr	r4, [r6, #0]
 8007b98:	4626      	mov	r6, r4
 8007b9a:	2e00      	cmp	r6, #0
 8007b9c:	d140      	bne.n	8007c20 <_malloc_r+0xcc>
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	eb04 0803 	add.w	r8, r4, r3
 8007ba8:	f000 f9aa 	bl	8007f00 <_sbrk_r>
 8007bac:	4580      	cmp	r8, r0
 8007bae:	d13a      	bne.n	8007c26 <_malloc_r+0xd2>
 8007bb0:	6821      	ldr	r1, [r4, #0]
 8007bb2:	3503      	adds	r5, #3
 8007bb4:	1a6d      	subs	r5, r5, r1
 8007bb6:	f025 0503 	bic.w	r5, r5, #3
 8007bba:	3508      	adds	r5, #8
 8007bbc:	2d0c      	cmp	r5, #12
 8007bbe:	bf38      	it	cc
 8007bc0:	250c      	movcc	r5, #12
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	f7ff ffa5 	bl	8007b14 <sbrk_aligned>
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d02b      	beq.n	8007c26 <_malloc_r+0xd2>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	442b      	add	r3, r5
 8007bd2:	6023      	str	r3, [r4, #0]
 8007bd4:	e00e      	b.n	8007bf4 <_malloc_r+0xa0>
 8007bd6:	6822      	ldr	r2, [r4, #0]
 8007bd8:	1b52      	subs	r2, r2, r5
 8007bda:	d41e      	bmi.n	8007c1a <_malloc_r+0xc6>
 8007bdc:	2a0b      	cmp	r2, #11
 8007bde:	d916      	bls.n	8007c0e <_malloc_r+0xba>
 8007be0:	1961      	adds	r1, r4, r5
 8007be2:	42a3      	cmp	r3, r4
 8007be4:	6025      	str	r5, [r4, #0]
 8007be6:	bf18      	it	ne
 8007be8:	6059      	strne	r1, [r3, #4]
 8007bea:	6863      	ldr	r3, [r4, #4]
 8007bec:	bf08      	it	eq
 8007bee:	6031      	streq	r1, [r6, #0]
 8007bf0:	5162      	str	r2, [r4, r5]
 8007bf2:	604b      	str	r3, [r1, #4]
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	f104 060b 	add.w	r6, r4, #11
 8007bfa:	f000 fa03 	bl	8008004 <__malloc_unlock>
 8007bfe:	f026 0607 	bic.w	r6, r6, #7
 8007c02:	1d23      	adds	r3, r4, #4
 8007c04:	1af2      	subs	r2, r6, r3
 8007c06:	d0b6      	beq.n	8007b76 <_malloc_r+0x22>
 8007c08:	1b9b      	subs	r3, r3, r6
 8007c0a:	50a3      	str	r3, [r4, r2]
 8007c0c:	e7b3      	b.n	8007b76 <_malloc_r+0x22>
 8007c0e:	6862      	ldr	r2, [r4, #4]
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	bf0c      	ite	eq
 8007c14:	6032      	streq	r2, [r6, #0]
 8007c16:	605a      	strne	r2, [r3, #4]
 8007c18:	e7ec      	b.n	8007bf4 <_malloc_r+0xa0>
 8007c1a:	4623      	mov	r3, r4
 8007c1c:	6864      	ldr	r4, [r4, #4]
 8007c1e:	e7b2      	b.n	8007b86 <_malloc_r+0x32>
 8007c20:	4634      	mov	r4, r6
 8007c22:	6876      	ldr	r6, [r6, #4]
 8007c24:	e7b9      	b.n	8007b9a <_malloc_r+0x46>
 8007c26:	230c      	movs	r3, #12
 8007c28:	4638      	mov	r0, r7
 8007c2a:	603b      	str	r3, [r7, #0]
 8007c2c:	f000 f9ea 	bl	8008004 <__malloc_unlock>
 8007c30:	e7a1      	b.n	8007b76 <_malloc_r+0x22>
 8007c32:	6025      	str	r5, [r4, #0]
 8007c34:	e7de      	b.n	8007bf4 <_malloc_r+0xa0>
 8007c36:	bf00      	nop
 8007c38:	200003c8 	.word	0x200003c8

08007c3c <__ssputs_r>:
 8007c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c40:	688e      	ldr	r6, [r1, #8]
 8007c42:	4682      	mov	sl, r0
 8007c44:	429e      	cmp	r6, r3
 8007c46:	460c      	mov	r4, r1
 8007c48:	4690      	mov	r8, r2
 8007c4a:	461f      	mov	r7, r3
 8007c4c:	d838      	bhi.n	8007cc0 <__ssputs_r+0x84>
 8007c4e:	898a      	ldrh	r2, [r1, #12]
 8007c50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c54:	d032      	beq.n	8007cbc <__ssputs_r+0x80>
 8007c56:	6825      	ldr	r5, [r4, #0]
 8007c58:	6909      	ldr	r1, [r1, #16]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	eba5 0901 	sub.w	r9, r5, r1
 8007c60:	6965      	ldr	r5, [r4, #20]
 8007c62:	444b      	add	r3, r9
 8007c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c6c:	106d      	asrs	r5, r5, #1
 8007c6e:	429d      	cmp	r5, r3
 8007c70:	bf38      	it	cc
 8007c72:	461d      	movcc	r5, r3
 8007c74:	0553      	lsls	r3, r2, #21
 8007c76:	d531      	bpl.n	8007cdc <__ssputs_r+0xa0>
 8007c78:	4629      	mov	r1, r5
 8007c7a:	f7ff ff6b 	bl	8007b54 <_malloc_r>
 8007c7e:	4606      	mov	r6, r0
 8007c80:	b950      	cbnz	r0, 8007c98 <__ssputs_r+0x5c>
 8007c82:	230c      	movs	r3, #12
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295
 8007c88:	f8ca 3000 	str.w	r3, [sl]
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c98:	464a      	mov	r2, r9
 8007c9a:	6921      	ldr	r1, [r4, #16]
 8007c9c:	f7ff fa18 	bl	80070d0 <memcpy>
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007caa:	81a3      	strh	r3, [r4, #12]
 8007cac:	6126      	str	r6, [r4, #16]
 8007cae:	444e      	add	r6, r9
 8007cb0:	6026      	str	r6, [r4, #0]
 8007cb2:	463e      	mov	r6, r7
 8007cb4:	6165      	str	r5, [r4, #20]
 8007cb6:	eba5 0509 	sub.w	r5, r5, r9
 8007cba:	60a5      	str	r5, [r4, #8]
 8007cbc:	42be      	cmp	r6, r7
 8007cbe:	d900      	bls.n	8007cc2 <__ssputs_r+0x86>
 8007cc0:	463e      	mov	r6, r7
 8007cc2:	4632      	mov	r2, r6
 8007cc4:	4641      	mov	r1, r8
 8007cc6:	6820      	ldr	r0, [r4, #0]
 8007cc8:	f000 f97c 	bl	8007fc4 <memmove>
 8007ccc:	68a3      	ldr	r3, [r4, #8]
 8007cce:	2000      	movs	r0, #0
 8007cd0:	1b9b      	subs	r3, r3, r6
 8007cd2:	60a3      	str	r3, [r4, #8]
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	4433      	add	r3, r6
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	e7db      	b.n	8007c94 <__ssputs_r+0x58>
 8007cdc:	462a      	mov	r2, r5
 8007cde:	f000 f997 	bl	8008010 <_realloc_r>
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d1e1      	bne.n	8007cac <__ssputs_r+0x70>
 8007ce8:	4650      	mov	r0, sl
 8007cea:	6921      	ldr	r1, [r4, #16]
 8007cec:	f7ff feca 	bl	8007a84 <_free_r>
 8007cf0:	e7c7      	b.n	8007c82 <__ssputs_r+0x46>
	...

08007cf4 <_svfiprintf_r>:
 8007cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	4698      	mov	r8, r3
 8007cfa:	898b      	ldrh	r3, [r1, #12]
 8007cfc:	4607      	mov	r7, r0
 8007cfe:	061b      	lsls	r3, r3, #24
 8007d00:	460d      	mov	r5, r1
 8007d02:	4614      	mov	r4, r2
 8007d04:	b09d      	sub	sp, #116	; 0x74
 8007d06:	d50e      	bpl.n	8007d26 <_svfiprintf_r+0x32>
 8007d08:	690b      	ldr	r3, [r1, #16]
 8007d0a:	b963      	cbnz	r3, 8007d26 <_svfiprintf_r+0x32>
 8007d0c:	2140      	movs	r1, #64	; 0x40
 8007d0e:	f7ff ff21 	bl	8007b54 <_malloc_r>
 8007d12:	6028      	str	r0, [r5, #0]
 8007d14:	6128      	str	r0, [r5, #16]
 8007d16:	b920      	cbnz	r0, 8007d22 <_svfiprintf_r+0x2e>
 8007d18:	230c      	movs	r3, #12
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	e0d1      	b.n	8007ec6 <_svfiprintf_r+0x1d2>
 8007d22:	2340      	movs	r3, #64	; 0x40
 8007d24:	616b      	str	r3, [r5, #20]
 8007d26:	2300      	movs	r3, #0
 8007d28:	9309      	str	r3, [sp, #36]	; 0x24
 8007d2a:	2320      	movs	r3, #32
 8007d2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d30:	2330      	movs	r3, #48	; 0x30
 8007d32:	f04f 0901 	mov.w	r9, #1
 8007d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007ee0 <_svfiprintf_r+0x1ec>
 8007d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d42:	4623      	mov	r3, r4
 8007d44:	469a      	mov	sl, r3
 8007d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d4a:	b10a      	cbz	r2, 8007d50 <_svfiprintf_r+0x5c>
 8007d4c:	2a25      	cmp	r2, #37	; 0x25
 8007d4e:	d1f9      	bne.n	8007d44 <_svfiprintf_r+0x50>
 8007d50:	ebba 0b04 	subs.w	fp, sl, r4
 8007d54:	d00b      	beq.n	8007d6e <_svfiprintf_r+0x7a>
 8007d56:	465b      	mov	r3, fp
 8007d58:	4622      	mov	r2, r4
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f7ff ff6d 	bl	8007c3c <__ssputs_r>
 8007d62:	3001      	adds	r0, #1
 8007d64:	f000 80aa 	beq.w	8007ebc <_svfiprintf_r+0x1c8>
 8007d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d6a:	445a      	add	r2, fp
 8007d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 80a2 	beq.w	8007ebc <_svfiprintf_r+0x1c8>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d82:	f10a 0a01 	add.w	sl, sl, #1
 8007d86:	9304      	str	r3, [sp, #16]
 8007d88:	9307      	str	r3, [sp, #28]
 8007d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8007d90:	4654      	mov	r4, sl
 8007d92:	2205      	movs	r2, #5
 8007d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d98:	4851      	ldr	r0, [pc, #324]	; (8007ee0 <_svfiprintf_r+0x1ec>)
 8007d9a:	f7ff f98b 	bl	80070b4 <memchr>
 8007d9e:	9a04      	ldr	r2, [sp, #16]
 8007da0:	b9d8      	cbnz	r0, 8007dda <_svfiprintf_r+0xe6>
 8007da2:	06d0      	lsls	r0, r2, #27
 8007da4:	bf44      	itt	mi
 8007da6:	2320      	movmi	r3, #32
 8007da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dac:	0711      	lsls	r1, r2, #28
 8007dae:	bf44      	itt	mi
 8007db0:	232b      	movmi	r3, #43	; 0x2b
 8007db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007db6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dba:	2b2a      	cmp	r3, #42	; 0x2a
 8007dbc:	d015      	beq.n	8007dea <_svfiprintf_r+0xf6>
 8007dbe:	4654      	mov	r4, sl
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	f04f 0c0a 	mov.w	ip, #10
 8007dc6:	9a07      	ldr	r2, [sp, #28]
 8007dc8:	4621      	mov	r1, r4
 8007dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dce:	3b30      	subs	r3, #48	; 0x30
 8007dd0:	2b09      	cmp	r3, #9
 8007dd2:	d94e      	bls.n	8007e72 <_svfiprintf_r+0x17e>
 8007dd4:	b1b0      	cbz	r0, 8007e04 <_svfiprintf_r+0x110>
 8007dd6:	9207      	str	r2, [sp, #28]
 8007dd8:	e014      	b.n	8007e04 <_svfiprintf_r+0x110>
 8007dda:	eba0 0308 	sub.w	r3, r0, r8
 8007dde:	fa09 f303 	lsl.w	r3, r9, r3
 8007de2:	4313      	orrs	r3, r2
 8007de4:	46a2      	mov	sl, r4
 8007de6:	9304      	str	r3, [sp, #16]
 8007de8:	e7d2      	b.n	8007d90 <_svfiprintf_r+0x9c>
 8007dea:	9b03      	ldr	r3, [sp, #12]
 8007dec:	1d19      	adds	r1, r3, #4
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	9103      	str	r1, [sp, #12]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	bfbb      	ittet	lt
 8007df6:	425b      	neglt	r3, r3
 8007df8:	f042 0202 	orrlt.w	r2, r2, #2
 8007dfc:	9307      	strge	r3, [sp, #28]
 8007dfe:	9307      	strlt	r3, [sp, #28]
 8007e00:	bfb8      	it	lt
 8007e02:	9204      	strlt	r2, [sp, #16]
 8007e04:	7823      	ldrb	r3, [r4, #0]
 8007e06:	2b2e      	cmp	r3, #46	; 0x2e
 8007e08:	d10c      	bne.n	8007e24 <_svfiprintf_r+0x130>
 8007e0a:	7863      	ldrb	r3, [r4, #1]
 8007e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e0e:	d135      	bne.n	8007e7c <_svfiprintf_r+0x188>
 8007e10:	9b03      	ldr	r3, [sp, #12]
 8007e12:	3402      	adds	r4, #2
 8007e14:	1d1a      	adds	r2, r3, #4
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	9203      	str	r2, [sp, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	bfb8      	it	lt
 8007e1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e22:	9305      	str	r3, [sp, #20]
 8007e24:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007ee4 <_svfiprintf_r+0x1f0>
 8007e28:	2203      	movs	r2, #3
 8007e2a:	4650      	mov	r0, sl
 8007e2c:	7821      	ldrb	r1, [r4, #0]
 8007e2e:	f7ff f941 	bl	80070b4 <memchr>
 8007e32:	b140      	cbz	r0, 8007e46 <_svfiprintf_r+0x152>
 8007e34:	2340      	movs	r3, #64	; 0x40
 8007e36:	eba0 000a 	sub.w	r0, r0, sl
 8007e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e3e:	9b04      	ldr	r3, [sp, #16]
 8007e40:	3401      	adds	r4, #1
 8007e42:	4303      	orrs	r3, r0
 8007e44:	9304      	str	r3, [sp, #16]
 8007e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e4a:	2206      	movs	r2, #6
 8007e4c:	4826      	ldr	r0, [pc, #152]	; (8007ee8 <_svfiprintf_r+0x1f4>)
 8007e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e52:	f7ff f92f 	bl	80070b4 <memchr>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d038      	beq.n	8007ecc <_svfiprintf_r+0x1d8>
 8007e5a:	4b24      	ldr	r3, [pc, #144]	; (8007eec <_svfiprintf_r+0x1f8>)
 8007e5c:	bb1b      	cbnz	r3, 8007ea6 <_svfiprintf_r+0x1b2>
 8007e5e:	9b03      	ldr	r3, [sp, #12]
 8007e60:	3307      	adds	r3, #7
 8007e62:	f023 0307 	bic.w	r3, r3, #7
 8007e66:	3308      	adds	r3, #8
 8007e68:	9303      	str	r3, [sp, #12]
 8007e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6c:	4433      	add	r3, r6
 8007e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e70:	e767      	b.n	8007d42 <_svfiprintf_r+0x4e>
 8007e72:	460c      	mov	r4, r1
 8007e74:	2001      	movs	r0, #1
 8007e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e7a:	e7a5      	b.n	8007dc8 <_svfiprintf_r+0xd4>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	f04f 0c0a 	mov.w	ip, #10
 8007e82:	4619      	mov	r1, r3
 8007e84:	3401      	adds	r4, #1
 8007e86:	9305      	str	r3, [sp, #20]
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e8e:	3a30      	subs	r2, #48	; 0x30
 8007e90:	2a09      	cmp	r2, #9
 8007e92:	d903      	bls.n	8007e9c <_svfiprintf_r+0x1a8>
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d0c5      	beq.n	8007e24 <_svfiprintf_r+0x130>
 8007e98:	9105      	str	r1, [sp, #20]
 8007e9a:	e7c3      	b.n	8007e24 <_svfiprintf_r+0x130>
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ea4:	e7f0      	b.n	8007e88 <_svfiprintf_r+0x194>
 8007ea6:	ab03      	add	r3, sp, #12
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	462a      	mov	r2, r5
 8007eac:	4638      	mov	r0, r7
 8007eae:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <_svfiprintf_r+0x1fc>)
 8007eb0:	a904      	add	r1, sp, #16
 8007eb2:	f7fc fcf3 	bl	800489c <_printf_float>
 8007eb6:	1c42      	adds	r2, r0, #1
 8007eb8:	4606      	mov	r6, r0
 8007eba:	d1d6      	bne.n	8007e6a <_svfiprintf_r+0x176>
 8007ebc:	89ab      	ldrh	r3, [r5, #12]
 8007ebe:	065b      	lsls	r3, r3, #25
 8007ec0:	f53f af2c 	bmi.w	8007d1c <_svfiprintf_r+0x28>
 8007ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ec6:	b01d      	add	sp, #116	; 0x74
 8007ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ecc:	ab03      	add	r3, sp, #12
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	462a      	mov	r2, r5
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <_svfiprintf_r+0x1fc>)
 8007ed6:	a904      	add	r1, sp, #16
 8007ed8:	f7fc ff7c 	bl	8004dd4 <_printf_i>
 8007edc:	e7eb      	b.n	8007eb6 <_svfiprintf_r+0x1c2>
 8007ede:	bf00      	nop
 8007ee0:	08008e4c 	.word	0x08008e4c
 8007ee4:	08008e52 	.word	0x08008e52
 8007ee8:	08008e56 	.word	0x08008e56
 8007eec:	0800489d 	.word	0x0800489d
 8007ef0:	08007c3d 	.word	0x08007c3d

08007ef4 <nan>:
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	4901      	ldr	r1, [pc, #4]	; (8007efc <nan+0x8>)
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	7ff80000 	.word	0x7ff80000

08007f00 <_sbrk_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	2300      	movs	r3, #0
 8007f04:	4d05      	ldr	r5, [pc, #20]	; (8007f1c <_sbrk_r+0x1c>)
 8007f06:	4604      	mov	r4, r0
 8007f08:	4608      	mov	r0, r1
 8007f0a:	602b      	str	r3, [r5, #0]
 8007f0c:	f7f9 fd9e 	bl	8001a4c <_sbrk>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d102      	bne.n	8007f1a <_sbrk_r+0x1a>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	b103      	cbz	r3, 8007f1a <_sbrk_r+0x1a>
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	200003d0 	.word	0x200003d0

08007f20 <strncmp>:
 8007f20:	4603      	mov	r3, r0
 8007f22:	b510      	push	{r4, lr}
 8007f24:	b172      	cbz	r2, 8007f44 <strncmp+0x24>
 8007f26:	3901      	subs	r1, #1
 8007f28:	1884      	adds	r4, r0, r2
 8007f2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007f32:	4290      	cmp	r0, r2
 8007f34:	d101      	bne.n	8007f3a <strncmp+0x1a>
 8007f36:	42a3      	cmp	r3, r4
 8007f38:	d101      	bne.n	8007f3e <strncmp+0x1e>
 8007f3a:	1a80      	subs	r0, r0, r2
 8007f3c:	bd10      	pop	{r4, pc}
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d1f3      	bne.n	8007f2a <strncmp+0xa>
 8007f42:	e7fa      	b.n	8007f3a <strncmp+0x1a>
 8007f44:	4610      	mov	r0, r2
 8007f46:	e7f9      	b.n	8007f3c <strncmp+0x1c>

08007f48 <__ascii_wctomb>:
 8007f48:	4603      	mov	r3, r0
 8007f4a:	4608      	mov	r0, r1
 8007f4c:	b141      	cbz	r1, 8007f60 <__ascii_wctomb+0x18>
 8007f4e:	2aff      	cmp	r2, #255	; 0xff
 8007f50:	d904      	bls.n	8007f5c <__ascii_wctomb+0x14>
 8007f52:	228a      	movs	r2, #138	; 0x8a
 8007f54:	f04f 30ff 	mov.w	r0, #4294967295
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	4770      	bx	lr
 8007f5c:	2001      	movs	r0, #1
 8007f5e:	700a      	strb	r2, [r1, #0]
 8007f60:	4770      	bx	lr
	...

08007f64 <__assert_func>:
 8007f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f66:	4614      	mov	r4, r2
 8007f68:	461a      	mov	r2, r3
 8007f6a:	4b09      	ldr	r3, [pc, #36]	; (8007f90 <__assert_func+0x2c>)
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68d8      	ldr	r0, [r3, #12]
 8007f72:	b14c      	cbz	r4, 8007f88 <__assert_func+0x24>
 8007f74:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <__assert_func+0x30>)
 8007f76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f7a:	9100      	str	r1, [sp, #0]
 8007f7c:	462b      	mov	r3, r5
 8007f7e:	4906      	ldr	r1, [pc, #24]	; (8007f98 <__assert_func+0x34>)
 8007f80:	f000 f80e 	bl	8007fa0 <fiprintf>
 8007f84:	f000 fa8a 	bl	800849c <abort>
 8007f88:	4b04      	ldr	r3, [pc, #16]	; (8007f9c <__assert_func+0x38>)
 8007f8a:	461c      	mov	r4, r3
 8007f8c:	e7f3      	b.n	8007f76 <__assert_func+0x12>
 8007f8e:	bf00      	nop
 8007f90:	20000014 	.word	0x20000014
 8007f94:	08008e5d 	.word	0x08008e5d
 8007f98:	08008e6a 	.word	0x08008e6a
 8007f9c:	08008e98 	.word	0x08008e98

08007fa0 <fiprintf>:
 8007fa0:	b40e      	push	{r1, r2, r3}
 8007fa2:	b503      	push	{r0, r1, lr}
 8007fa4:	4601      	mov	r1, r0
 8007fa6:	ab03      	add	r3, sp, #12
 8007fa8:	4805      	ldr	r0, [pc, #20]	; (8007fc0 <fiprintf+0x20>)
 8007faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fae:	6800      	ldr	r0, [r0, #0]
 8007fb0:	9301      	str	r3, [sp, #4]
 8007fb2:	f000 f883 	bl	80080bc <_vfiprintf_r>
 8007fb6:	b002      	add	sp, #8
 8007fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fbc:	b003      	add	sp, #12
 8007fbe:	4770      	bx	lr
 8007fc0:	20000014 	.word	0x20000014

08007fc4 <memmove>:
 8007fc4:	4288      	cmp	r0, r1
 8007fc6:	b510      	push	{r4, lr}
 8007fc8:	eb01 0402 	add.w	r4, r1, r2
 8007fcc:	d902      	bls.n	8007fd4 <memmove+0x10>
 8007fce:	4284      	cmp	r4, r0
 8007fd0:	4623      	mov	r3, r4
 8007fd2:	d807      	bhi.n	8007fe4 <memmove+0x20>
 8007fd4:	1e43      	subs	r3, r0, #1
 8007fd6:	42a1      	cmp	r1, r4
 8007fd8:	d008      	beq.n	8007fec <memmove+0x28>
 8007fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fe2:	e7f8      	b.n	8007fd6 <memmove+0x12>
 8007fe4:	4601      	mov	r1, r0
 8007fe6:	4402      	add	r2, r0
 8007fe8:	428a      	cmp	r2, r1
 8007fea:	d100      	bne.n	8007fee <memmove+0x2a>
 8007fec:	bd10      	pop	{r4, pc}
 8007fee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ff6:	e7f7      	b.n	8007fe8 <memmove+0x24>

08007ff8 <__malloc_lock>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	; (8008000 <__malloc_lock+0x8>)
 8007ffa:	f000 bc0b 	b.w	8008814 <__retarget_lock_acquire_recursive>
 8007ffe:	bf00      	nop
 8008000:	200003d4 	.word	0x200003d4

08008004 <__malloc_unlock>:
 8008004:	4801      	ldr	r0, [pc, #4]	; (800800c <__malloc_unlock+0x8>)
 8008006:	f000 bc06 	b.w	8008816 <__retarget_lock_release_recursive>
 800800a:	bf00      	nop
 800800c:	200003d4 	.word	0x200003d4

08008010 <_realloc_r>:
 8008010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008014:	4680      	mov	r8, r0
 8008016:	4614      	mov	r4, r2
 8008018:	460e      	mov	r6, r1
 800801a:	b921      	cbnz	r1, 8008026 <_realloc_r+0x16>
 800801c:	4611      	mov	r1, r2
 800801e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008022:	f7ff bd97 	b.w	8007b54 <_malloc_r>
 8008026:	b92a      	cbnz	r2, 8008034 <_realloc_r+0x24>
 8008028:	f7ff fd2c 	bl	8007a84 <_free_r>
 800802c:	4625      	mov	r5, r4
 800802e:	4628      	mov	r0, r5
 8008030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008034:	f000 fc56 	bl	80088e4 <_malloc_usable_size_r>
 8008038:	4284      	cmp	r4, r0
 800803a:	4607      	mov	r7, r0
 800803c:	d802      	bhi.n	8008044 <_realloc_r+0x34>
 800803e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008042:	d812      	bhi.n	800806a <_realloc_r+0x5a>
 8008044:	4621      	mov	r1, r4
 8008046:	4640      	mov	r0, r8
 8008048:	f7ff fd84 	bl	8007b54 <_malloc_r>
 800804c:	4605      	mov	r5, r0
 800804e:	2800      	cmp	r0, #0
 8008050:	d0ed      	beq.n	800802e <_realloc_r+0x1e>
 8008052:	42bc      	cmp	r4, r7
 8008054:	4622      	mov	r2, r4
 8008056:	4631      	mov	r1, r6
 8008058:	bf28      	it	cs
 800805a:	463a      	movcs	r2, r7
 800805c:	f7ff f838 	bl	80070d0 <memcpy>
 8008060:	4631      	mov	r1, r6
 8008062:	4640      	mov	r0, r8
 8008064:	f7ff fd0e 	bl	8007a84 <_free_r>
 8008068:	e7e1      	b.n	800802e <_realloc_r+0x1e>
 800806a:	4635      	mov	r5, r6
 800806c:	e7df      	b.n	800802e <_realloc_r+0x1e>

0800806e <__sfputc_r>:
 800806e:	6893      	ldr	r3, [r2, #8]
 8008070:	b410      	push	{r4}
 8008072:	3b01      	subs	r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	6093      	str	r3, [r2, #8]
 8008078:	da07      	bge.n	800808a <__sfputc_r+0x1c>
 800807a:	6994      	ldr	r4, [r2, #24]
 800807c:	42a3      	cmp	r3, r4
 800807e:	db01      	blt.n	8008084 <__sfputc_r+0x16>
 8008080:	290a      	cmp	r1, #10
 8008082:	d102      	bne.n	800808a <__sfputc_r+0x1c>
 8008084:	bc10      	pop	{r4}
 8008086:	f000 b949 	b.w	800831c <__swbuf_r>
 800808a:	6813      	ldr	r3, [r2, #0]
 800808c:	1c58      	adds	r0, r3, #1
 800808e:	6010      	str	r0, [r2, #0]
 8008090:	7019      	strb	r1, [r3, #0]
 8008092:	4608      	mov	r0, r1
 8008094:	bc10      	pop	{r4}
 8008096:	4770      	bx	lr

08008098 <__sfputs_r>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	4606      	mov	r6, r0
 800809c:	460f      	mov	r7, r1
 800809e:	4614      	mov	r4, r2
 80080a0:	18d5      	adds	r5, r2, r3
 80080a2:	42ac      	cmp	r4, r5
 80080a4:	d101      	bne.n	80080aa <__sfputs_r+0x12>
 80080a6:	2000      	movs	r0, #0
 80080a8:	e007      	b.n	80080ba <__sfputs_r+0x22>
 80080aa:	463a      	mov	r2, r7
 80080ac:	4630      	mov	r0, r6
 80080ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b2:	f7ff ffdc 	bl	800806e <__sfputc_r>
 80080b6:	1c43      	adds	r3, r0, #1
 80080b8:	d1f3      	bne.n	80080a2 <__sfputs_r+0xa>
 80080ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080bc <_vfiprintf_r>:
 80080bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c0:	460d      	mov	r5, r1
 80080c2:	4614      	mov	r4, r2
 80080c4:	4698      	mov	r8, r3
 80080c6:	4606      	mov	r6, r0
 80080c8:	b09d      	sub	sp, #116	; 0x74
 80080ca:	b118      	cbz	r0, 80080d4 <_vfiprintf_r+0x18>
 80080cc:	6983      	ldr	r3, [r0, #24]
 80080ce:	b90b      	cbnz	r3, 80080d4 <_vfiprintf_r+0x18>
 80080d0:	f000 fb02 	bl	80086d8 <__sinit>
 80080d4:	4b89      	ldr	r3, [pc, #548]	; (80082fc <_vfiprintf_r+0x240>)
 80080d6:	429d      	cmp	r5, r3
 80080d8:	d11b      	bne.n	8008112 <_vfiprintf_r+0x56>
 80080da:	6875      	ldr	r5, [r6, #4]
 80080dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080de:	07d9      	lsls	r1, r3, #31
 80080e0:	d405      	bmi.n	80080ee <_vfiprintf_r+0x32>
 80080e2:	89ab      	ldrh	r3, [r5, #12]
 80080e4:	059a      	lsls	r2, r3, #22
 80080e6:	d402      	bmi.n	80080ee <_vfiprintf_r+0x32>
 80080e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080ea:	f000 fb93 	bl	8008814 <__retarget_lock_acquire_recursive>
 80080ee:	89ab      	ldrh	r3, [r5, #12]
 80080f0:	071b      	lsls	r3, r3, #28
 80080f2:	d501      	bpl.n	80080f8 <_vfiprintf_r+0x3c>
 80080f4:	692b      	ldr	r3, [r5, #16]
 80080f6:	b9eb      	cbnz	r3, 8008134 <_vfiprintf_r+0x78>
 80080f8:	4629      	mov	r1, r5
 80080fa:	4630      	mov	r0, r6
 80080fc:	f000 f960 	bl	80083c0 <__swsetup_r>
 8008100:	b1c0      	cbz	r0, 8008134 <_vfiprintf_r+0x78>
 8008102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008104:	07dc      	lsls	r4, r3, #31
 8008106:	d50e      	bpl.n	8008126 <_vfiprintf_r+0x6a>
 8008108:	f04f 30ff 	mov.w	r0, #4294967295
 800810c:	b01d      	add	sp, #116	; 0x74
 800810e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008112:	4b7b      	ldr	r3, [pc, #492]	; (8008300 <_vfiprintf_r+0x244>)
 8008114:	429d      	cmp	r5, r3
 8008116:	d101      	bne.n	800811c <_vfiprintf_r+0x60>
 8008118:	68b5      	ldr	r5, [r6, #8]
 800811a:	e7df      	b.n	80080dc <_vfiprintf_r+0x20>
 800811c:	4b79      	ldr	r3, [pc, #484]	; (8008304 <_vfiprintf_r+0x248>)
 800811e:	429d      	cmp	r5, r3
 8008120:	bf08      	it	eq
 8008122:	68f5      	ldreq	r5, [r6, #12]
 8008124:	e7da      	b.n	80080dc <_vfiprintf_r+0x20>
 8008126:	89ab      	ldrh	r3, [r5, #12]
 8008128:	0598      	lsls	r0, r3, #22
 800812a:	d4ed      	bmi.n	8008108 <_vfiprintf_r+0x4c>
 800812c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800812e:	f000 fb72 	bl	8008816 <__retarget_lock_release_recursive>
 8008132:	e7e9      	b.n	8008108 <_vfiprintf_r+0x4c>
 8008134:	2300      	movs	r3, #0
 8008136:	9309      	str	r3, [sp, #36]	; 0x24
 8008138:	2320      	movs	r3, #32
 800813a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800813e:	2330      	movs	r3, #48	; 0x30
 8008140:	f04f 0901 	mov.w	r9, #1
 8008144:	f8cd 800c 	str.w	r8, [sp, #12]
 8008148:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008308 <_vfiprintf_r+0x24c>
 800814c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008150:	4623      	mov	r3, r4
 8008152:	469a      	mov	sl, r3
 8008154:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008158:	b10a      	cbz	r2, 800815e <_vfiprintf_r+0xa2>
 800815a:	2a25      	cmp	r2, #37	; 0x25
 800815c:	d1f9      	bne.n	8008152 <_vfiprintf_r+0x96>
 800815e:	ebba 0b04 	subs.w	fp, sl, r4
 8008162:	d00b      	beq.n	800817c <_vfiprintf_r+0xc0>
 8008164:	465b      	mov	r3, fp
 8008166:	4622      	mov	r2, r4
 8008168:	4629      	mov	r1, r5
 800816a:	4630      	mov	r0, r6
 800816c:	f7ff ff94 	bl	8008098 <__sfputs_r>
 8008170:	3001      	adds	r0, #1
 8008172:	f000 80aa 	beq.w	80082ca <_vfiprintf_r+0x20e>
 8008176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008178:	445a      	add	r2, fp
 800817a:	9209      	str	r2, [sp, #36]	; 0x24
 800817c:	f89a 3000 	ldrb.w	r3, [sl]
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 80a2 	beq.w	80082ca <_vfiprintf_r+0x20e>
 8008186:	2300      	movs	r3, #0
 8008188:	f04f 32ff 	mov.w	r2, #4294967295
 800818c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008190:	f10a 0a01 	add.w	sl, sl, #1
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	9307      	str	r3, [sp, #28]
 8008198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800819c:	931a      	str	r3, [sp, #104]	; 0x68
 800819e:	4654      	mov	r4, sl
 80081a0:	2205      	movs	r2, #5
 80081a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a6:	4858      	ldr	r0, [pc, #352]	; (8008308 <_vfiprintf_r+0x24c>)
 80081a8:	f7fe ff84 	bl	80070b4 <memchr>
 80081ac:	9a04      	ldr	r2, [sp, #16]
 80081ae:	b9d8      	cbnz	r0, 80081e8 <_vfiprintf_r+0x12c>
 80081b0:	06d1      	lsls	r1, r2, #27
 80081b2:	bf44      	itt	mi
 80081b4:	2320      	movmi	r3, #32
 80081b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ba:	0713      	lsls	r3, r2, #28
 80081bc:	bf44      	itt	mi
 80081be:	232b      	movmi	r3, #43	; 0x2b
 80081c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c4:	f89a 3000 	ldrb.w	r3, [sl]
 80081c8:	2b2a      	cmp	r3, #42	; 0x2a
 80081ca:	d015      	beq.n	80081f8 <_vfiprintf_r+0x13c>
 80081cc:	4654      	mov	r4, sl
 80081ce:	2000      	movs	r0, #0
 80081d0:	f04f 0c0a 	mov.w	ip, #10
 80081d4:	9a07      	ldr	r2, [sp, #28]
 80081d6:	4621      	mov	r1, r4
 80081d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081dc:	3b30      	subs	r3, #48	; 0x30
 80081de:	2b09      	cmp	r3, #9
 80081e0:	d94e      	bls.n	8008280 <_vfiprintf_r+0x1c4>
 80081e2:	b1b0      	cbz	r0, 8008212 <_vfiprintf_r+0x156>
 80081e4:	9207      	str	r2, [sp, #28]
 80081e6:	e014      	b.n	8008212 <_vfiprintf_r+0x156>
 80081e8:	eba0 0308 	sub.w	r3, r0, r8
 80081ec:	fa09 f303 	lsl.w	r3, r9, r3
 80081f0:	4313      	orrs	r3, r2
 80081f2:	46a2      	mov	sl, r4
 80081f4:	9304      	str	r3, [sp, #16]
 80081f6:	e7d2      	b.n	800819e <_vfiprintf_r+0xe2>
 80081f8:	9b03      	ldr	r3, [sp, #12]
 80081fa:	1d19      	adds	r1, r3, #4
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	9103      	str	r1, [sp, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	bfbb      	ittet	lt
 8008204:	425b      	neglt	r3, r3
 8008206:	f042 0202 	orrlt.w	r2, r2, #2
 800820a:	9307      	strge	r3, [sp, #28]
 800820c:	9307      	strlt	r3, [sp, #28]
 800820e:	bfb8      	it	lt
 8008210:	9204      	strlt	r2, [sp, #16]
 8008212:	7823      	ldrb	r3, [r4, #0]
 8008214:	2b2e      	cmp	r3, #46	; 0x2e
 8008216:	d10c      	bne.n	8008232 <_vfiprintf_r+0x176>
 8008218:	7863      	ldrb	r3, [r4, #1]
 800821a:	2b2a      	cmp	r3, #42	; 0x2a
 800821c:	d135      	bne.n	800828a <_vfiprintf_r+0x1ce>
 800821e:	9b03      	ldr	r3, [sp, #12]
 8008220:	3402      	adds	r4, #2
 8008222:	1d1a      	adds	r2, r3, #4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	9203      	str	r2, [sp, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	bfb8      	it	lt
 800822c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008230:	9305      	str	r3, [sp, #20]
 8008232:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800830c <_vfiprintf_r+0x250>
 8008236:	2203      	movs	r2, #3
 8008238:	4650      	mov	r0, sl
 800823a:	7821      	ldrb	r1, [r4, #0]
 800823c:	f7fe ff3a 	bl	80070b4 <memchr>
 8008240:	b140      	cbz	r0, 8008254 <_vfiprintf_r+0x198>
 8008242:	2340      	movs	r3, #64	; 0x40
 8008244:	eba0 000a 	sub.w	r0, r0, sl
 8008248:	fa03 f000 	lsl.w	r0, r3, r0
 800824c:	9b04      	ldr	r3, [sp, #16]
 800824e:	3401      	adds	r4, #1
 8008250:	4303      	orrs	r3, r0
 8008252:	9304      	str	r3, [sp, #16]
 8008254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008258:	2206      	movs	r2, #6
 800825a:	482d      	ldr	r0, [pc, #180]	; (8008310 <_vfiprintf_r+0x254>)
 800825c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008260:	f7fe ff28 	bl	80070b4 <memchr>
 8008264:	2800      	cmp	r0, #0
 8008266:	d03f      	beq.n	80082e8 <_vfiprintf_r+0x22c>
 8008268:	4b2a      	ldr	r3, [pc, #168]	; (8008314 <_vfiprintf_r+0x258>)
 800826a:	bb1b      	cbnz	r3, 80082b4 <_vfiprintf_r+0x1f8>
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	3307      	adds	r3, #7
 8008270:	f023 0307 	bic.w	r3, r3, #7
 8008274:	3308      	adds	r3, #8
 8008276:	9303      	str	r3, [sp, #12]
 8008278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827a:	443b      	add	r3, r7
 800827c:	9309      	str	r3, [sp, #36]	; 0x24
 800827e:	e767      	b.n	8008150 <_vfiprintf_r+0x94>
 8008280:	460c      	mov	r4, r1
 8008282:	2001      	movs	r0, #1
 8008284:	fb0c 3202 	mla	r2, ip, r2, r3
 8008288:	e7a5      	b.n	80081d6 <_vfiprintf_r+0x11a>
 800828a:	2300      	movs	r3, #0
 800828c:	f04f 0c0a 	mov.w	ip, #10
 8008290:	4619      	mov	r1, r3
 8008292:	3401      	adds	r4, #1
 8008294:	9305      	str	r3, [sp, #20]
 8008296:	4620      	mov	r0, r4
 8008298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800829c:	3a30      	subs	r2, #48	; 0x30
 800829e:	2a09      	cmp	r2, #9
 80082a0:	d903      	bls.n	80082aa <_vfiprintf_r+0x1ee>
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0c5      	beq.n	8008232 <_vfiprintf_r+0x176>
 80082a6:	9105      	str	r1, [sp, #20]
 80082a8:	e7c3      	b.n	8008232 <_vfiprintf_r+0x176>
 80082aa:	4604      	mov	r4, r0
 80082ac:	2301      	movs	r3, #1
 80082ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80082b2:	e7f0      	b.n	8008296 <_vfiprintf_r+0x1da>
 80082b4:	ab03      	add	r3, sp, #12
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	462a      	mov	r2, r5
 80082ba:	4630      	mov	r0, r6
 80082bc:	4b16      	ldr	r3, [pc, #88]	; (8008318 <_vfiprintf_r+0x25c>)
 80082be:	a904      	add	r1, sp, #16
 80082c0:	f7fc faec 	bl	800489c <_printf_float>
 80082c4:	4607      	mov	r7, r0
 80082c6:	1c78      	adds	r0, r7, #1
 80082c8:	d1d6      	bne.n	8008278 <_vfiprintf_r+0x1bc>
 80082ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082cc:	07d9      	lsls	r1, r3, #31
 80082ce:	d405      	bmi.n	80082dc <_vfiprintf_r+0x220>
 80082d0:	89ab      	ldrh	r3, [r5, #12]
 80082d2:	059a      	lsls	r2, r3, #22
 80082d4:	d402      	bmi.n	80082dc <_vfiprintf_r+0x220>
 80082d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082d8:	f000 fa9d 	bl	8008816 <__retarget_lock_release_recursive>
 80082dc:	89ab      	ldrh	r3, [r5, #12]
 80082de:	065b      	lsls	r3, r3, #25
 80082e0:	f53f af12 	bmi.w	8008108 <_vfiprintf_r+0x4c>
 80082e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082e6:	e711      	b.n	800810c <_vfiprintf_r+0x50>
 80082e8:	ab03      	add	r3, sp, #12
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	462a      	mov	r2, r5
 80082ee:	4630      	mov	r0, r6
 80082f0:	4b09      	ldr	r3, [pc, #36]	; (8008318 <_vfiprintf_r+0x25c>)
 80082f2:	a904      	add	r1, sp, #16
 80082f4:	f7fc fd6e 	bl	8004dd4 <_printf_i>
 80082f8:	e7e4      	b.n	80082c4 <_vfiprintf_r+0x208>
 80082fa:	bf00      	nop
 80082fc:	08008fbc 	.word	0x08008fbc
 8008300:	08008fdc 	.word	0x08008fdc
 8008304:	08008f9c 	.word	0x08008f9c
 8008308:	08008e4c 	.word	0x08008e4c
 800830c:	08008e52 	.word	0x08008e52
 8008310:	08008e56 	.word	0x08008e56
 8008314:	0800489d 	.word	0x0800489d
 8008318:	08008099 	.word	0x08008099

0800831c <__swbuf_r>:
 800831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831e:	460e      	mov	r6, r1
 8008320:	4614      	mov	r4, r2
 8008322:	4605      	mov	r5, r0
 8008324:	b118      	cbz	r0, 800832e <__swbuf_r+0x12>
 8008326:	6983      	ldr	r3, [r0, #24]
 8008328:	b90b      	cbnz	r3, 800832e <__swbuf_r+0x12>
 800832a:	f000 f9d5 	bl	80086d8 <__sinit>
 800832e:	4b21      	ldr	r3, [pc, #132]	; (80083b4 <__swbuf_r+0x98>)
 8008330:	429c      	cmp	r4, r3
 8008332:	d12b      	bne.n	800838c <__swbuf_r+0x70>
 8008334:	686c      	ldr	r4, [r5, #4]
 8008336:	69a3      	ldr	r3, [r4, #24]
 8008338:	60a3      	str	r3, [r4, #8]
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	071a      	lsls	r2, r3, #28
 800833e:	d52f      	bpl.n	80083a0 <__swbuf_r+0x84>
 8008340:	6923      	ldr	r3, [r4, #16]
 8008342:	b36b      	cbz	r3, 80083a0 <__swbuf_r+0x84>
 8008344:	6923      	ldr	r3, [r4, #16]
 8008346:	6820      	ldr	r0, [r4, #0]
 8008348:	b2f6      	uxtb	r6, r6
 800834a:	1ac0      	subs	r0, r0, r3
 800834c:	6963      	ldr	r3, [r4, #20]
 800834e:	4637      	mov	r7, r6
 8008350:	4283      	cmp	r3, r0
 8008352:	dc04      	bgt.n	800835e <__swbuf_r+0x42>
 8008354:	4621      	mov	r1, r4
 8008356:	4628      	mov	r0, r5
 8008358:	f000 f92a 	bl	80085b0 <_fflush_r>
 800835c:	bb30      	cbnz	r0, 80083ac <__swbuf_r+0x90>
 800835e:	68a3      	ldr	r3, [r4, #8]
 8008360:	3001      	adds	r0, #1
 8008362:	3b01      	subs	r3, #1
 8008364:	60a3      	str	r3, [r4, #8]
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	6022      	str	r2, [r4, #0]
 800836c:	701e      	strb	r6, [r3, #0]
 800836e:	6963      	ldr	r3, [r4, #20]
 8008370:	4283      	cmp	r3, r0
 8008372:	d004      	beq.n	800837e <__swbuf_r+0x62>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	07db      	lsls	r3, r3, #31
 8008378:	d506      	bpl.n	8008388 <__swbuf_r+0x6c>
 800837a:	2e0a      	cmp	r6, #10
 800837c:	d104      	bne.n	8008388 <__swbuf_r+0x6c>
 800837e:	4621      	mov	r1, r4
 8008380:	4628      	mov	r0, r5
 8008382:	f000 f915 	bl	80085b0 <_fflush_r>
 8008386:	b988      	cbnz	r0, 80083ac <__swbuf_r+0x90>
 8008388:	4638      	mov	r0, r7
 800838a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800838c:	4b0a      	ldr	r3, [pc, #40]	; (80083b8 <__swbuf_r+0x9c>)
 800838e:	429c      	cmp	r4, r3
 8008390:	d101      	bne.n	8008396 <__swbuf_r+0x7a>
 8008392:	68ac      	ldr	r4, [r5, #8]
 8008394:	e7cf      	b.n	8008336 <__swbuf_r+0x1a>
 8008396:	4b09      	ldr	r3, [pc, #36]	; (80083bc <__swbuf_r+0xa0>)
 8008398:	429c      	cmp	r4, r3
 800839a:	bf08      	it	eq
 800839c:	68ec      	ldreq	r4, [r5, #12]
 800839e:	e7ca      	b.n	8008336 <__swbuf_r+0x1a>
 80083a0:	4621      	mov	r1, r4
 80083a2:	4628      	mov	r0, r5
 80083a4:	f000 f80c 	bl	80083c0 <__swsetup_r>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d0cb      	beq.n	8008344 <__swbuf_r+0x28>
 80083ac:	f04f 37ff 	mov.w	r7, #4294967295
 80083b0:	e7ea      	b.n	8008388 <__swbuf_r+0x6c>
 80083b2:	bf00      	nop
 80083b4:	08008fbc 	.word	0x08008fbc
 80083b8:	08008fdc 	.word	0x08008fdc
 80083bc:	08008f9c 	.word	0x08008f9c

080083c0 <__swsetup_r>:
 80083c0:	4b32      	ldr	r3, [pc, #200]	; (800848c <__swsetup_r+0xcc>)
 80083c2:	b570      	push	{r4, r5, r6, lr}
 80083c4:	681d      	ldr	r5, [r3, #0]
 80083c6:	4606      	mov	r6, r0
 80083c8:	460c      	mov	r4, r1
 80083ca:	b125      	cbz	r5, 80083d6 <__swsetup_r+0x16>
 80083cc:	69ab      	ldr	r3, [r5, #24]
 80083ce:	b913      	cbnz	r3, 80083d6 <__swsetup_r+0x16>
 80083d0:	4628      	mov	r0, r5
 80083d2:	f000 f981 	bl	80086d8 <__sinit>
 80083d6:	4b2e      	ldr	r3, [pc, #184]	; (8008490 <__swsetup_r+0xd0>)
 80083d8:	429c      	cmp	r4, r3
 80083da:	d10f      	bne.n	80083fc <__swsetup_r+0x3c>
 80083dc:	686c      	ldr	r4, [r5, #4]
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083e4:	0719      	lsls	r1, r3, #28
 80083e6:	d42c      	bmi.n	8008442 <__swsetup_r+0x82>
 80083e8:	06dd      	lsls	r5, r3, #27
 80083ea:	d411      	bmi.n	8008410 <__swsetup_r+0x50>
 80083ec:	2309      	movs	r3, #9
 80083ee:	6033      	str	r3, [r6, #0]
 80083f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083f4:	f04f 30ff 	mov.w	r0, #4294967295
 80083f8:	81a3      	strh	r3, [r4, #12]
 80083fa:	e03e      	b.n	800847a <__swsetup_r+0xba>
 80083fc:	4b25      	ldr	r3, [pc, #148]	; (8008494 <__swsetup_r+0xd4>)
 80083fe:	429c      	cmp	r4, r3
 8008400:	d101      	bne.n	8008406 <__swsetup_r+0x46>
 8008402:	68ac      	ldr	r4, [r5, #8]
 8008404:	e7eb      	b.n	80083de <__swsetup_r+0x1e>
 8008406:	4b24      	ldr	r3, [pc, #144]	; (8008498 <__swsetup_r+0xd8>)
 8008408:	429c      	cmp	r4, r3
 800840a:	bf08      	it	eq
 800840c:	68ec      	ldreq	r4, [r5, #12]
 800840e:	e7e6      	b.n	80083de <__swsetup_r+0x1e>
 8008410:	0758      	lsls	r0, r3, #29
 8008412:	d512      	bpl.n	800843a <__swsetup_r+0x7a>
 8008414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008416:	b141      	cbz	r1, 800842a <__swsetup_r+0x6a>
 8008418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800841c:	4299      	cmp	r1, r3
 800841e:	d002      	beq.n	8008426 <__swsetup_r+0x66>
 8008420:	4630      	mov	r0, r6
 8008422:	f7ff fb2f 	bl	8007a84 <_free_r>
 8008426:	2300      	movs	r3, #0
 8008428:	6363      	str	r3, [r4, #52]	; 0x34
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008430:	81a3      	strh	r3, [r4, #12]
 8008432:	2300      	movs	r3, #0
 8008434:	6063      	str	r3, [r4, #4]
 8008436:	6923      	ldr	r3, [r4, #16]
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	f043 0308 	orr.w	r3, r3, #8
 8008440:	81a3      	strh	r3, [r4, #12]
 8008442:	6923      	ldr	r3, [r4, #16]
 8008444:	b94b      	cbnz	r3, 800845a <__swsetup_r+0x9a>
 8008446:	89a3      	ldrh	r3, [r4, #12]
 8008448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800844c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008450:	d003      	beq.n	800845a <__swsetup_r+0x9a>
 8008452:	4621      	mov	r1, r4
 8008454:	4630      	mov	r0, r6
 8008456:	f000 fa05 	bl	8008864 <__smakebuf_r>
 800845a:	89a0      	ldrh	r0, [r4, #12]
 800845c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008460:	f010 0301 	ands.w	r3, r0, #1
 8008464:	d00a      	beq.n	800847c <__swsetup_r+0xbc>
 8008466:	2300      	movs	r3, #0
 8008468:	60a3      	str	r3, [r4, #8]
 800846a:	6963      	ldr	r3, [r4, #20]
 800846c:	425b      	negs	r3, r3
 800846e:	61a3      	str	r3, [r4, #24]
 8008470:	6923      	ldr	r3, [r4, #16]
 8008472:	b943      	cbnz	r3, 8008486 <__swsetup_r+0xc6>
 8008474:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008478:	d1ba      	bne.n	80083f0 <__swsetup_r+0x30>
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	0781      	lsls	r1, r0, #30
 800847e:	bf58      	it	pl
 8008480:	6963      	ldrpl	r3, [r4, #20]
 8008482:	60a3      	str	r3, [r4, #8]
 8008484:	e7f4      	b.n	8008470 <__swsetup_r+0xb0>
 8008486:	2000      	movs	r0, #0
 8008488:	e7f7      	b.n	800847a <__swsetup_r+0xba>
 800848a:	bf00      	nop
 800848c:	20000014 	.word	0x20000014
 8008490:	08008fbc 	.word	0x08008fbc
 8008494:	08008fdc 	.word	0x08008fdc
 8008498:	08008f9c 	.word	0x08008f9c

0800849c <abort>:
 800849c:	2006      	movs	r0, #6
 800849e:	b508      	push	{r3, lr}
 80084a0:	f000 fa50 	bl	8008944 <raise>
 80084a4:	2001      	movs	r0, #1
 80084a6:	f7f9 fa5e 	bl	8001966 <_exit>
	...

080084ac <__sflush_r>:
 80084ac:	898a      	ldrh	r2, [r1, #12]
 80084ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b0:	4605      	mov	r5, r0
 80084b2:	0710      	lsls	r0, r2, #28
 80084b4:	460c      	mov	r4, r1
 80084b6:	d457      	bmi.n	8008568 <__sflush_r+0xbc>
 80084b8:	684b      	ldr	r3, [r1, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dc04      	bgt.n	80084c8 <__sflush_r+0x1c>
 80084be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	dc01      	bgt.n	80084c8 <__sflush_r+0x1c>
 80084c4:	2000      	movs	r0, #0
 80084c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084ca:	2e00      	cmp	r6, #0
 80084cc:	d0fa      	beq.n	80084c4 <__sflush_r+0x18>
 80084ce:	2300      	movs	r3, #0
 80084d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084d4:	682f      	ldr	r7, [r5, #0]
 80084d6:	602b      	str	r3, [r5, #0]
 80084d8:	d032      	beq.n	8008540 <__sflush_r+0x94>
 80084da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	075a      	lsls	r2, r3, #29
 80084e0:	d505      	bpl.n	80084ee <__sflush_r+0x42>
 80084e2:	6863      	ldr	r3, [r4, #4]
 80084e4:	1ac0      	subs	r0, r0, r3
 80084e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084e8:	b10b      	cbz	r3, 80084ee <__sflush_r+0x42>
 80084ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084ec:	1ac0      	subs	r0, r0, r3
 80084ee:	2300      	movs	r3, #0
 80084f0:	4602      	mov	r2, r0
 80084f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084f4:	4628      	mov	r0, r5
 80084f6:	6a21      	ldr	r1, [r4, #32]
 80084f8:	47b0      	blx	r6
 80084fa:	1c43      	adds	r3, r0, #1
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	d106      	bne.n	800850e <__sflush_r+0x62>
 8008500:	6829      	ldr	r1, [r5, #0]
 8008502:	291d      	cmp	r1, #29
 8008504:	d82c      	bhi.n	8008560 <__sflush_r+0xb4>
 8008506:	4a29      	ldr	r2, [pc, #164]	; (80085ac <__sflush_r+0x100>)
 8008508:	40ca      	lsrs	r2, r1
 800850a:	07d6      	lsls	r6, r2, #31
 800850c:	d528      	bpl.n	8008560 <__sflush_r+0xb4>
 800850e:	2200      	movs	r2, #0
 8008510:	6062      	str	r2, [r4, #4]
 8008512:	6922      	ldr	r2, [r4, #16]
 8008514:	04d9      	lsls	r1, r3, #19
 8008516:	6022      	str	r2, [r4, #0]
 8008518:	d504      	bpl.n	8008524 <__sflush_r+0x78>
 800851a:	1c42      	adds	r2, r0, #1
 800851c:	d101      	bne.n	8008522 <__sflush_r+0x76>
 800851e:	682b      	ldr	r3, [r5, #0]
 8008520:	b903      	cbnz	r3, 8008524 <__sflush_r+0x78>
 8008522:	6560      	str	r0, [r4, #84]	; 0x54
 8008524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008526:	602f      	str	r7, [r5, #0]
 8008528:	2900      	cmp	r1, #0
 800852a:	d0cb      	beq.n	80084c4 <__sflush_r+0x18>
 800852c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008530:	4299      	cmp	r1, r3
 8008532:	d002      	beq.n	800853a <__sflush_r+0x8e>
 8008534:	4628      	mov	r0, r5
 8008536:	f7ff faa5 	bl	8007a84 <_free_r>
 800853a:	2000      	movs	r0, #0
 800853c:	6360      	str	r0, [r4, #52]	; 0x34
 800853e:	e7c2      	b.n	80084c6 <__sflush_r+0x1a>
 8008540:	6a21      	ldr	r1, [r4, #32]
 8008542:	2301      	movs	r3, #1
 8008544:	4628      	mov	r0, r5
 8008546:	47b0      	blx	r6
 8008548:	1c41      	adds	r1, r0, #1
 800854a:	d1c7      	bne.n	80084dc <__sflush_r+0x30>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0c4      	beq.n	80084dc <__sflush_r+0x30>
 8008552:	2b1d      	cmp	r3, #29
 8008554:	d001      	beq.n	800855a <__sflush_r+0xae>
 8008556:	2b16      	cmp	r3, #22
 8008558:	d101      	bne.n	800855e <__sflush_r+0xb2>
 800855a:	602f      	str	r7, [r5, #0]
 800855c:	e7b2      	b.n	80084c4 <__sflush_r+0x18>
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	e7ae      	b.n	80084c6 <__sflush_r+0x1a>
 8008568:	690f      	ldr	r7, [r1, #16]
 800856a:	2f00      	cmp	r7, #0
 800856c:	d0aa      	beq.n	80084c4 <__sflush_r+0x18>
 800856e:	0793      	lsls	r3, r2, #30
 8008570:	bf18      	it	ne
 8008572:	2300      	movne	r3, #0
 8008574:	680e      	ldr	r6, [r1, #0]
 8008576:	bf08      	it	eq
 8008578:	694b      	ldreq	r3, [r1, #20]
 800857a:	1bf6      	subs	r6, r6, r7
 800857c:	600f      	str	r7, [r1, #0]
 800857e:	608b      	str	r3, [r1, #8]
 8008580:	2e00      	cmp	r6, #0
 8008582:	dd9f      	ble.n	80084c4 <__sflush_r+0x18>
 8008584:	4633      	mov	r3, r6
 8008586:	463a      	mov	r2, r7
 8008588:	4628      	mov	r0, r5
 800858a:	6a21      	ldr	r1, [r4, #32]
 800858c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008590:	47e0      	blx	ip
 8008592:	2800      	cmp	r0, #0
 8008594:	dc06      	bgt.n	80085a4 <__sflush_r+0xf8>
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a0:	81a3      	strh	r3, [r4, #12]
 80085a2:	e790      	b.n	80084c6 <__sflush_r+0x1a>
 80085a4:	4407      	add	r7, r0
 80085a6:	1a36      	subs	r6, r6, r0
 80085a8:	e7ea      	b.n	8008580 <__sflush_r+0xd4>
 80085aa:	bf00      	nop
 80085ac:	20400001 	.word	0x20400001

080085b0 <_fflush_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	690b      	ldr	r3, [r1, #16]
 80085b4:	4605      	mov	r5, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	b913      	cbnz	r3, 80085c0 <_fflush_r+0x10>
 80085ba:	2500      	movs	r5, #0
 80085bc:	4628      	mov	r0, r5
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	b118      	cbz	r0, 80085ca <_fflush_r+0x1a>
 80085c2:	6983      	ldr	r3, [r0, #24]
 80085c4:	b90b      	cbnz	r3, 80085ca <_fflush_r+0x1a>
 80085c6:	f000 f887 	bl	80086d8 <__sinit>
 80085ca:	4b14      	ldr	r3, [pc, #80]	; (800861c <_fflush_r+0x6c>)
 80085cc:	429c      	cmp	r4, r3
 80085ce:	d11b      	bne.n	8008608 <_fflush_r+0x58>
 80085d0:	686c      	ldr	r4, [r5, #4]
 80085d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d0ef      	beq.n	80085ba <_fflush_r+0xa>
 80085da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085dc:	07d0      	lsls	r0, r2, #31
 80085de:	d404      	bmi.n	80085ea <_fflush_r+0x3a>
 80085e0:	0599      	lsls	r1, r3, #22
 80085e2:	d402      	bmi.n	80085ea <_fflush_r+0x3a>
 80085e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085e6:	f000 f915 	bl	8008814 <__retarget_lock_acquire_recursive>
 80085ea:	4628      	mov	r0, r5
 80085ec:	4621      	mov	r1, r4
 80085ee:	f7ff ff5d 	bl	80084ac <__sflush_r>
 80085f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085f4:	4605      	mov	r5, r0
 80085f6:	07da      	lsls	r2, r3, #31
 80085f8:	d4e0      	bmi.n	80085bc <_fflush_r+0xc>
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	059b      	lsls	r3, r3, #22
 80085fe:	d4dd      	bmi.n	80085bc <_fflush_r+0xc>
 8008600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008602:	f000 f908 	bl	8008816 <__retarget_lock_release_recursive>
 8008606:	e7d9      	b.n	80085bc <_fflush_r+0xc>
 8008608:	4b05      	ldr	r3, [pc, #20]	; (8008620 <_fflush_r+0x70>)
 800860a:	429c      	cmp	r4, r3
 800860c:	d101      	bne.n	8008612 <_fflush_r+0x62>
 800860e:	68ac      	ldr	r4, [r5, #8]
 8008610:	e7df      	b.n	80085d2 <_fflush_r+0x22>
 8008612:	4b04      	ldr	r3, [pc, #16]	; (8008624 <_fflush_r+0x74>)
 8008614:	429c      	cmp	r4, r3
 8008616:	bf08      	it	eq
 8008618:	68ec      	ldreq	r4, [r5, #12]
 800861a:	e7da      	b.n	80085d2 <_fflush_r+0x22>
 800861c:	08008fbc 	.word	0x08008fbc
 8008620:	08008fdc 	.word	0x08008fdc
 8008624:	08008f9c 	.word	0x08008f9c

08008628 <std>:
 8008628:	2300      	movs	r3, #0
 800862a:	b510      	push	{r4, lr}
 800862c:	4604      	mov	r4, r0
 800862e:	e9c0 3300 	strd	r3, r3, [r0]
 8008632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008636:	6083      	str	r3, [r0, #8]
 8008638:	8181      	strh	r1, [r0, #12]
 800863a:	6643      	str	r3, [r0, #100]	; 0x64
 800863c:	81c2      	strh	r2, [r0, #14]
 800863e:	6183      	str	r3, [r0, #24]
 8008640:	4619      	mov	r1, r3
 8008642:	2208      	movs	r2, #8
 8008644:	305c      	adds	r0, #92	; 0x5c
 8008646:	f7fc f883 	bl	8004750 <memset>
 800864a:	4b05      	ldr	r3, [pc, #20]	; (8008660 <std+0x38>)
 800864c:	6224      	str	r4, [r4, #32]
 800864e:	6263      	str	r3, [r4, #36]	; 0x24
 8008650:	4b04      	ldr	r3, [pc, #16]	; (8008664 <std+0x3c>)
 8008652:	62a3      	str	r3, [r4, #40]	; 0x28
 8008654:	4b04      	ldr	r3, [pc, #16]	; (8008668 <std+0x40>)
 8008656:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008658:	4b04      	ldr	r3, [pc, #16]	; (800866c <std+0x44>)
 800865a:	6323      	str	r3, [r4, #48]	; 0x30
 800865c:	bd10      	pop	{r4, pc}
 800865e:	bf00      	nop
 8008660:	0800897d 	.word	0x0800897d
 8008664:	0800899f 	.word	0x0800899f
 8008668:	080089d7 	.word	0x080089d7
 800866c:	080089fb 	.word	0x080089fb

08008670 <_cleanup_r>:
 8008670:	4901      	ldr	r1, [pc, #4]	; (8008678 <_cleanup_r+0x8>)
 8008672:	f000 b8af 	b.w	80087d4 <_fwalk_reent>
 8008676:	bf00      	nop
 8008678:	080085b1 	.word	0x080085b1

0800867c <__sfmoreglue>:
 800867c:	2268      	movs	r2, #104	; 0x68
 800867e:	b570      	push	{r4, r5, r6, lr}
 8008680:	1e4d      	subs	r5, r1, #1
 8008682:	4355      	muls	r5, r2
 8008684:	460e      	mov	r6, r1
 8008686:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800868a:	f7ff fa63 	bl	8007b54 <_malloc_r>
 800868e:	4604      	mov	r4, r0
 8008690:	b140      	cbz	r0, 80086a4 <__sfmoreglue+0x28>
 8008692:	2100      	movs	r1, #0
 8008694:	e9c0 1600 	strd	r1, r6, [r0]
 8008698:	300c      	adds	r0, #12
 800869a:	60a0      	str	r0, [r4, #8]
 800869c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086a0:	f7fc f856 	bl	8004750 <memset>
 80086a4:	4620      	mov	r0, r4
 80086a6:	bd70      	pop	{r4, r5, r6, pc}

080086a8 <__sfp_lock_acquire>:
 80086a8:	4801      	ldr	r0, [pc, #4]	; (80086b0 <__sfp_lock_acquire+0x8>)
 80086aa:	f000 b8b3 	b.w	8008814 <__retarget_lock_acquire_recursive>
 80086ae:	bf00      	nop
 80086b0:	200003d5 	.word	0x200003d5

080086b4 <__sfp_lock_release>:
 80086b4:	4801      	ldr	r0, [pc, #4]	; (80086bc <__sfp_lock_release+0x8>)
 80086b6:	f000 b8ae 	b.w	8008816 <__retarget_lock_release_recursive>
 80086ba:	bf00      	nop
 80086bc:	200003d5 	.word	0x200003d5

080086c0 <__sinit_lock_acquire>:
 80086c0:	4801      	ldr	r0, [pc, #4]	; (80086c8 <__sinit_lock_acquire+0x8>)
 80086c2:	f000 b8a7 	b.w	8008814 <__retarget_lock_acquire_recursive>
 80086c6:	bf00      	nop
 80086c8:	200003d6 	.word	0x200003d6

080086cc <__sinit_lock_release>:
 80086cc:	4801      	ldr	r0, [pc, #4]	; (80086d4 <__sinit_lock_release+0x8>)
 80086ce:	f000 b8a2 	b.w	8008816 <__retarget_lock_release_recursive>
 80086d2:	bf00      	nop
 80086d4:	200003d6 	.word	0x200003d6

080086d8 <__sinit>:
 80086d8:	b510      	push	{r4, lr}
 80086da:	4604      	mov	r4, r0
 80086dc:	f7ff fff0 	bl	80086c0 <__sinit_lock_acquire>
 80086e0:	69a3      	ldr	r3, [r4, #24]
 80086e2:	b11b      	cbz	r3, 80086ec <__sinit+0x14>
 80086e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086e8:	f7ff bff0 	b.w	80086cc <__sinit_lock_release>
 80086ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80086f0:	6523      	str	r3, [r4, #80]	; 0x50
 80086f2:	4b13      	ldr	r3, [pc, #76]	; (8008740 <__sinit+0x68>)
 80086f4:	4a13      	ldr	r2, [pc, #76]	; (8008744 <__sinit+0x6c>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80086fa:	42a3      	cmp	r3, r4
 80086fc:	bf08      	it	eq
 80086fe:	2301      	moveq	r3, #1
 8008700:	4620      	mov	r0, r4
 8008702:	bf08      	it	eq
 8008704:	61a3      	streq	r3, [r4, #24]
 8008706:	f000 f81f 	bl	8008748 <__sfp>
 800870a:	6060      	str	r0, [r4, #4]
 800870c:	4620      	mov	r0, r4
 800870e:	f000 f81b 	bl	8008748 <__sfp>
 8008712:	60a0      	str	r0, [r4, #8]
 8008714:	4620      	mov	r0, r4
 8008716:	f000 f817 	bl	8008748 <__sfp>
 800871a:	2200      	movs	r2, #0
 800871c:	2104      	movs	r1, #4
 800871e:	60e0      	str	r0, [r4, #12]
 8008720:	6860      	ldr	r0, [r4, #4]
 8008722:	f7ff ff81 	bl	8008628 <std>
 8008726:	2201      	movs	r2, #1
 8008728:	2109      	movs	r1, #9
 800872a:	68a0      	ldr	r0, [r4, #8]
 800872c:	f7ff ff7c 	bl	8008628 <std>
 8008730:	2202      	movs	r2, #2
 8008732:	2112      	movs	r1, #18
 8008734:	68e0      	ldr	r0, [r4, #12]
 8008736:	f7ff ff77 	bl	8008628 <std>
 800873a:	2301      	movs	r3, #1
 800873c:	61a3      	str	r3, [r4, #24]
 800873e:	e7d1      	b.n	80086e4 <__sinit+0xc>
 8008740:	08008b5c 	.word	0x08008b5c
 8008744:	08008671 	.word	0x08008671

08008748 <__sfp>:
 8008748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874a:	4607      	mov	r7, r0
 800874c:	f7ff ffac 	bl	80086a8 <__sfp_lock_acquire>
 8008750:	4b1e      	ldr	r3, [pc, #120]	; (80087cc <__sfp+0x84>)
 8008752:	681e      	ldr	r6, [r3, #0]
 8008754:	69b3      	ldr	r3, [r6, #24]
 8008756:	b913      	cbnz	r3, 800875e <__sfp+0x16>
 8008758:	4630      	mov	r0, r6
 800875a:	f7ff ffbd 	bl	80086d8 <__sinit>
 800875e:	3648      	adds	r6, #72	; 0x48
 8008760:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008764:	3b01      	subs	r3, #1
 8008766:	d503      	bpl.n	8008770 <__sfp+0x28>
 8008768:	6833      	ldr	r3, [r6, #0]
 800876a:	b30b      	cbz	r3, 80087b0 <__sfp+0x68>
 800876c:	6836      	ldr	r6, [r6, #0]
 800876e:	e7f7      	b.n	8008760 <__sfp+0x18>
 8008770:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008774:	b9d5      	cbnz	r5, 80087ac <__sfp+0x64>
 8008776:	4b16      	ldr	r3, [pc, #88]	; (80087d0 <__sfp+0x88>)
 8008778:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800877c:	60e3      	str	r3, [r4, #12]
 800877e:	6665      	str	r5, [r4, #100]	; 0x64
 8008780:	f000 f847 	bl	8008812 <__retarget_lock_init_recursive>
 8008784:	f7ff ff96 	bl	80086b4 <__sfp_lock_release>
 8008788:	2208      	movs	r2, #8
 800878a:	4629      	mov	r1, r5
 800878c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008790:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008794:	6025      	str	r5, [r4, #0]
 8008796:	61a5      	str	r5, [r4, #24]
 8008798:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800879c:	f7fb ffd8 	bl	8004750 <memset>
 80087a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087a8:	4620      	mov	r0, r4
 80087aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ac:	3468      	adds	r4, #104	; 0x68
 80087ae:	e7d9      	b.n	8008764 <__sfp+0x1c>
 80087b0:	2104      	movs	r1, #4
 80087b2:	4638      	mov	r0, r7
 80087b4:	f7ff ff62 	bl	800867c <__sfmoreglue>
 80087b8:	4604      	mov	r4, r0
 80087ba:	6030      	str	r0, [r6, #0]
 80087bc:	2800      	cmp	r0, #0
 80087be:	d1d5      	bne.n	800876c <__sfp+0x24>
 80087c0:	f7ff ff78 	bl	80086b4 <__sfp_lock_release>
 80087c4:	230c      	movs	r3, #12
 80087c6:	603b      	str	r3, [r7, #0]
 80087c8:	e7ee      	b.n	80087a8 <__sfp+0x60>
 80087ca:	bf00      	nop
 80087cc:	08008b5c 	.word	0x08008b5c
 80087d0:	ffff0001 	.word	0xffff0001

080087d4 <_fwalk_reent>:
 80087d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d8:	4606      	mov	r6, r0
 80087da:	4688      	mov	r8, r1
 80087dc:	2700      	movs	r7, #0
 80087de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087e6:	f1b9 0901 	subs.w	r9, r9, #1
 80087ea:	d505      	bpl.n	80087f8 <_fwalk_reent+0x24>
 80087ec:	6824      	ldr	r4, [r4, #0]
 80087ee:	2c00      	cmp	r4, #0
 80087f0:	d1f7      	bne.n	80087e2 <_fwalk_reent+0xe>
 80087f2:	4638      	mov	r0, r7
 80087f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087f8:	89ab      	ldrh	r3, [r5, #12]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d907      	bls.n	800880e <_fwalk_reent+0x3a>
 80087fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008802:	3301      	adds	r3, #1
 8008804:	d003      	beq.n	800880e <_fwalk_reent+0x3a>
 8008806:	4629      	mov	r1, r5
 8008808:	4630      	mov	r0, r6
 800880a:	47c0      	blx	r8
 800880c:	4307      	orrs	r7, r0
 800880e:	3568      	adds	r5, #104	; 0x68
 8008810:	e7e9      	b.n	80087e6 <_fwalk_reent+0x12>

08008812 <__retarget_lock_init_recursive>:
 8008812:	4770      	bx	lr

08008814 <__retarget_lock_acquire_recursive>:
 8008814:	4770      	bx	lr

08008816 <__retarget_lock_release_recursive>:
 8008816:	4770      	bx	lr

08008818 <__swhatbuf_r>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	460e      	mov	r6, r1
 800881c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008820:	4614      	mov	r4, r2
 8008822:	2900      	cmp	r1, #0
 8008824:	461d      	mov	r5, r3
 8008826:	b096      	sub	sp, #88	; 0x58
 8008828:	da08      	bge.n	800883c <__swhatbuf_r+0x24>
 800882a:	2200      	movs	r2, #0
 800882c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008830:	602a      	str	r2, [r5, #0]
 8008832:	061a      	lsls	r2, r3, #24
 8008834:	d410      	bmi.n	8008858 <__swhatbuf_r+0x40>
 8008836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800883a:	e00e      	b.n	800885a <__swhatbuf_r+0x42>
 800883c:	466a      	mov	r2, sp
 800883e:	f000 f903 	bl	8008a48 <_fstat_r>
 8008842:	2800      	cmp	r0, #0
 8008844:	dbf1      	blt.n	800882a <__swhatbuf_r+0x12>
 8008846:	9a01      	ldr	r2, [sp, #4]
 8008848:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800884c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008850:	425a      	negs	r2, r3
 8008852:	415a      	adcs	r2, r3
 8008854:	602a      	str	r2, [r5, #0]
 8008856:	e7ee      	b.n	8008836 <__swhatbuf_r+0x1e>
 8008858:	2340      	movs	r3, #64	; 0x40
 800885a:	2000      	movs	r0, #0
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	b016      	add	sp, #88	; 0x58
 8008860:	bd70      	pop	{r4, r5, r6, pc}
	...

08008864 <__smakebuf_r>:
 8008864:	898b      	ldrh	r3, [r1, #12]
 8008866:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008868:	079d      	lsls	r5, r3, #30
 800886a:	4606      	mov	r6, r0
 800886c:	460c      	mov	r4, r1
 800886e:	d507      	bpl.n	8008880 <__smakebuf_r+0x1c>
 8008870:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	6123      	str	r3, [r4, #16]
 8008878:	2301      	movs	r3, #1
 800887a:	6163      	str	r3, [r4, #20]
 800887c:	b002      	add	sp, #8
 800887e:	bd70      	pop	{r4, r5, r6, pc}
 8008880:	466a      	mov	r2, sp
 8008882:	ab01      	add	r3, sp, #4
 8008884:	f7ff ffc8 	bl	8008818 <__swhatbuf_r>
 8008888:	9900      	ldr	r1, [sp, #0]
 800888a:	4605      	mov	r5, r0
 800888c:	4630      	mov	r0, r6
 800888e:	f7ff f961 	bl	8007b54 <_malloc_r>
 8008892:	b948      	cbnz	r0, 80088a8 <__smakebuf_r+0x44>
 8008894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008898:	059a      	lsls	r2, r3, #22
 800889a:	d4ef      	bmi.n	800887c <__smakebuf_r+0x18>
 800889c:	f023 0303 	bic.w	r3, r3, #3
 80088a0:	f043 0302 	orr.w	r3, r3, #2
 80088a4:	81a3      	strh	r3, [r4, #12]
 80088a6:	e7e3      	b.n	8008870 <__smakebuf_r+0xc>
 80088a8:	4b0d      	ldr	r3, [pc, #52]	; (80088e0 <__smakebuf_r+0x7c>)
 80088aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80088ac:	89a3      	ldrh	r3, [r4, #12]
 80088ae:	6020      	str	r0, [r4, #0]
 80088b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	9b00      	ldr	r3, [sp, #0]
 80088b8:	6120      	str	r0, [r4, #16]
 80088ba:	6163      	str	r3, [r4, #20]
 80088bc:	9b01      	ldr	r3, [sp, #4]
 80088be:	b15b      	cbz	r3, 80088d8 <__smakebuf_r+0x74>
 80088c0:	4630      	mov	r0, r6
 80088c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088c6:	f000 f8d1 	bl	8008a6c <_isatty_r>
 80088ca:	b128      	cbz	r0, 80088d8 <__smakebuf_r+0x74>
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	f023 0303 	bic.w	r3, r3, #3
 80088d2:	f043 0301 	orr.w	r3, r3, #1
 80088d6:	81a3      	strh	r3, [r4, #12]
 80088d8:	89a0      	ldrh	r0, [r4, #12]
 80088da:	4305      	orrs	r5, r0
 80088dc:	81a5      	strh	r5, [r4, #12]
 80088de:	e7cd      	b.n	800887c <__smakebuf_r+0x18>
 80088e0:	08008671 	.word	0x08008671

080088e4 <_malloc_usable_size_r>:
 80088e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088e8:	1f18      	subs	r0, r3, #4
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bfbc      	itt	lt
 80088ee:	580b      	ldrlt	r3, [r1, r0]
 80088f0:	18c0      	addlt	r0, r0, r3
 80088f2:	4770      	bx	lr

080088f4 <_raise_r>:
 80088f4:	291f      	cmp	r1, #31
 80088f6:	b538      	push	{r3, r4, r5, lr}
 80088f8:	4604      	mov	r4, r0
 80088fa:	460d      	mov	r5, r1
 80088fc:	d904      	bls.n	8008908 <_raise_r+0x14>
 80088fe:	2316      	movs	r3, #22
 8008900:	6003      	str	r3, [r0, #0]
 8008902:	f04f 30ff 	mov.w	r0, #4294967295
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800890a:	b112      	cbz	r2, 8008912 <_raise_r+0x1e>
 800890c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008910:	b94b      	cbnz	r3, 8008926 <_raise_r+0x32>
 8008912:	4620      	mov	r0, r4
 8008914:	f000 f830 	bl	8008978 <_getpid_r>
 8008918:	462a      	mov	r2, r5
 800891a:	4601      	mov	r1, r0
 800891c:	4620      	mov	r0, r4
 800891e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008922:	f000 b817 	b.w	8008954 <_kill_r>
 8008926:	2b01      	cmp	r3, #1
 8008928:	d00a      	beq.n	8008940 <_raise_r+0x4c>
 800892a:	1c59      	adds	r1, r3, #1
 800892c:	d103      	bne.n	8008936 <_raise_r+0x42>
 800892e:	2316      	movs	r3, #22
 8008930:	6003      	str	r3, [r0, #0]
 8008932:	2001      	movs	r0, #1
 8008934:	e7e7      	b.n	8008906 <_raise_r+0x12>
 8008936:	2400      	movs	r4, #0
 8008938:	4628      	mov	r0, r5
 800893a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800893e:	4798      	blx	r3
 8008940:	2000      	movs	r0, #0
 8008942:	e7e0      	b.n	8008906 <_raise_r+0x12>

08008944 <raise>:
 8008944:	4b02      	ldr	r3, [pc, #8]	; (8008950 <raise+0xc>)
 8008946:	4601      	mov	r1, r0
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	f7ff bfd3 	b.w	80088f4 <_raise_r>
 800894e:	bf00      	nop
 8008950:	20000014 	.word	0x20000014

08008954 <_kill_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	2300      	movs	r3, #0
 8008958:	4d06      	ldr	r5, [pc, #24]	; (8008974 <_kill_r+0x20>)
 800895a:	4604      	mov	r4, r0
 800895c:	4608      	mov	r0, r1
 800895e:	4611      	mov	r1, r2
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	f7f8 fff0 	bl	8001946 <_kill>
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	d102      	bne.n	8008970 <_kill_r+0x1c>
 800896a:	682b      	ldr	r3, [r5, #0]
 800896c:	b103      	cbz	r3, 8008970 <_kill_r+0x1c>
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	bd38      	pop	{r3, r4, r5, pc}
 8008972:	bf00      	nop
 8008974:	200003d0 	.word	0x200003d0

08008978 <_getpid_r>:
 8008978:	f7f8 bfde 	b.w	8001938 <_getpid>

0800897c <__sread>:
 800897c:	b510      	push	{r4, lr}
 800897e:	460c      	mov	r4, r1
 8008980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008984:	f000 f894 	bl	8008ab0 <_read_r>
 8008988:	2800      	cmp	r0, #0
 800898a:	bfab      	itete	ge
 800898c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800898e:	89a3      	ldrhlt	r3, [r4, #12]
 8008990:	181b      	addge	r3, r3, r0
 8008992:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008996:	bfac      	ite	ge
 8008998:	6563      	strge	r3, [r4, #84]	; 0x54
 800899a:	81a3      	strhlt	r3, [r4, #12]
 800899c:	bd10      	pop	{r4, pc}

0800899e <__swrite>:
 800899e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a2:	461f      	mov	r7, r3
 80089a4:	898b      	ldrh	r3, [r1, #12]
 80089a6:	4605      	mov	r5, r0
 80089a8:	05db      	lsls	r3, r3, #23
 80089aa:	460c      	mov	r4, r1
 80089ac:	4616      	mov	r6, r2
 80089ae:	d505      	bpl.n	80089bc <__swrite+0x1e>
 80089b0:	2302      	movs	r3, #2
 80089b2:	2200      	movs	r2, #0
 80089b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b8:	f000 f868 	bl	8008a8c <_lseek_r>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	4632      	mov	r2, r6
 80089c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	4628      	mov	r0, r5
 80089c8:	463b      	mov	r3, r7
 80089ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089d2:	f000 b817 	b.w	8008a04 <_write_r>

080089d6 <__sseek>:
 80089d6:	b510      	push	{r4, lr}
 80089d8:	460c      	mov	r4, r1
 80089da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089de:	f000 f855 	bl	8008a8c <_lseek_r>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	bf15      	itete	ne
 80089e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80089ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089f2:	81a3      	strheq	r3, [r4, #12]
 80089f4:	bf18      	it	ne
 80089f6:	81a3      	strhne	r3, [r4, #12]
 80089f8:	bd10      	pop	{r4, pc}

080089fa <__sclose>:
 80089fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089fe:	f000 b813 	b.w	8008a28 <_close_r>
	...

08008a04 <_write_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4604      	mov	r4, r0
 8008a08:	4608      	mov	r0, r1
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	4d05      	ldr	r5, [pc, #20]	; (8008a24 <_write_r+0x20>)
 8008a10:	602a      	str	r2, [r5, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	f7f8 ffce 	bl	80019b4 <_write>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_write_r+0x1e>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_write_r+0x1e>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	200003d0 	.word	0x200003d0

08008a28 <_close_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	4d05      	ldr	r5, [pc, #20]	; (8008a44 <_close_r+0x1c>)
 8008a2e:	4604      	mov	r4, r0
 8008a30:	4608      	mov	r0, r1
 8008a32:	602b      	str	r3, [r5, #0]
 8008a34:	f7f8 ffda 	bl	80019ec <_close>
 8008a38:	1c43      	adds	r3, r0, #1
 8008a3a:	d102      	bne.n	8008a42 <_close_r+0x1a>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	b103      	cbz	r3, 8008a42 <_close_r+0x1a>
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	bd38      	pop	{r3, r4, r5, pc}
 8008a44:	200003d0 	.word	0x200003d0

08008a48 <_fstat_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	4d06      	ldr	r5, [pc, #24]	; (8008a68 <_fstat_r+0x20>)
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4608      	mov	r0, r1
 8008a52:	4611      	mov	r1, r2
 8008a54:	602b      	str	r3, [r5, #0]
 8008a56:	f7f8 ffd4 	bl	8001a02 <_fstat>
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	d102      	bne.n	8008a64 <_fstat_r+0x1c>
 8008a5e:	682b      	ldr	r3, [r5, #0]
 8008a60:	b103      	cbz	r3, 8008a64 <_fstat_r+0x1c>
 8008a62:	6023      	str	r3, [r4, #0]
 8008a64:	bd38      	pop	{r3, r4, r5, pc}
 8008a66:	bf00      	nop
 8008a68:	200003d0 	.word	0x200003d0

08008a6c <_isatty_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	2300      	movs	r3, #0
 8008a70:	4d05      	ldr	r5, [pc, #20]	; (8008a88 <_isatty_r+0x1c>)
 8008a72:	4604      	mov	r4, r0
 8008a74:	4608      	mov	r0, r1
 8008a76:	602b      	str	r3, [r5, #0]
 8008a78:	f7f8 ffd2 	bl	8001a20 <_isatty>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d102      	bne.n	8008a86 <_isatty_r+0x1a>
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	b103      	cbz	r3, 8008a86 <_isatty_r+0x1a>
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	bd38      	pop	{r3, r4, r5, pc}
 8008a88:	200003d0 	.word	0x200003d0

08008a8c <_lseek_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4608      	mov	r0, r1
 8008a92:	4611      	mov	r1, r2
 8008a94:	2200      	movs	r2, #0
 8008a96:	4d05      	ldr	r5, [pc, #20]	; (8008aac <_lseek_r+0x20>)
 8008a98:	602a      	str	r2, [r5, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	f7f8 ffca 	bl	8001a34 <_lseek>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d102      	bne.n	8008aaa <_lseek_r+0x1e>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	b103      	cbz	r3, 8008aaa <_lseek_r+0x1e>
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	200003d0 	.word	0x200003d0

08008ab0 <_read_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4608      	mov	r0, r1
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4d05      	ldr	r5, [pc, #20]	; (8008ad0 <_read_r+0x20>)
 8008abc:	602a      	str	r2, [r5, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f7f8 ff5b 	bl	800197a <_read>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d102      	bne.n	8008ace <_read_r+0x1e>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	b103      	cbz	r3, 8008ace <_read_r+0x1e>
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	200003d0 	.word	0x200003d0

08008ad4 <_init>:
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad6:	bf00      	nop
 8008ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ada:	bc08      	pop	{r3}
 8008adc:	469e      	mov	lr, r3
 8008ade:	4770      	bx	lr

08008ae0 <_fini>:
 8008ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae2:	bf00      	nop
 8008ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae6:	bc08      	pop	{r3}
 8008ae8:	469e      	mov	lr, r3
 8008aea:	4770      	bx	lr
