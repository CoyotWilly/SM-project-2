
clean.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000beb4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800bfc8  0800bfc8  0001bfc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4f4  0800c4f4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4f4  0800c4f4  0001c4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4fc  0800c4fc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4fc  0800c4fc  0001c4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c500  0800c500  0001c500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200001e8  0800c6ec  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  0800c6ec  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c53  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029fc  00000000  00000000  00031e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00034860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00035a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2c6  00000000  00000000  00036b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142f0  00000000  00000000  00050de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095965  00000000  00000000  000650d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c9  00000000  00000000  000faa3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063f0  00000000  00000000  000fab04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000064  00000000  00000000  00100ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bfac 	.word	0x0800bfac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800bfac 	.word	0x0800bfac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2uiz>:
 800113c:	0042      	lsls	r2, r0, #1
 800113e:	d20e      	bcs.n	800115e <__aeabi_f2uiz+0x22>
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30b      	bcc.n	800115e <__aeabi_f2uiz+0x22>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d409      	bmi.n	8001164 <__aeabi_f2uiz+0x28>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	fa23 f002 	lsr.w	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2uiz+0x32>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d102      	bne.n	8001174 <__aeabi_f2uiz+0x38>
 800116e:	f04f 30ff 	mov.w	r0, #4294967295
 8001172:	4770      	bx	lr
 8001174:	f04f 0000 	mov.w	r0, #0
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <__aeabi_ldivmod>:
 800117c:	b97b      	cbnz	r3, 800119e <__aeabi_ldivmod+0x22>
 800117e:	b972      	cbnz	r2, 800119e <__aeabi_ldivmod+0x22>
 8001180:	2900      	cmp	r1, #0
 8001182:	bfbe      	ittt	lt
 8001184:	2000      	movlt	r0, #0
 8001186:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800118a:	e006      	blt.n	800119a <__aeabi_ldivmod+0x1e>
 800118c:	bf08      	it	eq
 800118e:	2800      	cmpeq	r0, #0
 8001190:	bf1c      	itt	ne
 8001192:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8001196:	f04f 30ff 	movne.w	r0, #4294967295
 800119a:	f000 b9e1 	b.w	8001560 <__aeabi_idiv0>
 800119e:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011a6:	2900      	cmp	r1, #0
 80011a8:	db09      	blt.n	80011be <__aeabi_ldivmod+0x42>
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db1a      	blt.n	80011e4 <__aeabi_ldivmod+0x68>
 80011ae:	f000 f86d 	bl	800128c <__udivmoddi4>
 80011b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011ba:	b004      	add	sp, #16
 80011bc:	4770      	bx	lr
 80011be:	4240      	negs	r0, r0
 80011c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db1b      	blt.n	8001200 <__aeabi_ldivmod+0x84>
 80011c8:	f000 f860 	bl	800128c <__udivmoddi4>
 80011cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011d4:	b004      	add	sp, #16
 80011d6:	4240      	negs	r0, r0
 80011d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011dc:	4252      	negs	r2, r2
 80011de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011e2:	4770      	bx	lr
 80011e4:	4252      	negs	r2, r2
 80011e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ea:	f000 f84f 	bl	800128c <__udivmoddi4>
 80011ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f6:	b004      	add	sp, #16
 80011f8:	4240      	negs	r0, r0
 80011fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011fe:	4770      	bx	lr
 8001200:	4252      	negs	r2, r2
 8001202:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001206:	f000 f841 	bl	800128c <__udivmoddi4>
 800120a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800120e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001212:	b004      	add	sp, #16
 8001214:	4252      	negs	r2, r2
 8001216:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800121a:	4770      	bx	lr

0800121c <__aeabi_d2lz>:
 800121c:	b538      	push	{r3, r4, r5, lr}
 800121e:	4605      	mov	r5, r0
 8001220:	460c      	mov	r4, r1
 8001222:	2200      	movs	r2, #0
 8001224:	2300      	movs	r3, #0
 8001226:	4628      	mov	r0, r5
 8001228:	4621      	mov	r1, r4
 800122a:	f7ff fbc7 	bl	80009bc <__aeabi_dcmplt>
 800122e:	b928      	cbnz	r0, 800123c <__aeabi_d2lz+0x20>
 8001230:	4628      	mov	r0, r5
 8001232:	4621      	mov	r1, r4
 8001234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001238:	f000 b80a 	b.w	8001250 <__aeabi_d2ulz>
 800123c:	4628      	mov	r0, r5
 800123e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001242:	f000 f805 	bl	8001250 <__aeabi_d2ulz>
 8001246:	4240      	negs	r0, r0
 8001248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800124c:	bd38      	pop	{r3, r4, r5, pc}
 800124e:	bf00      	nop

08001250 <__aeabi_d2ulz>:
 8001250:	b5d0      	push	{r4, r6, r7, lr}
 8001252:	2200      	movs	r2, #0
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <__aeabi_d2ulz+0x34>)
 8001256:	4606      	mov	r6, r0
 8001258:	460f      	mov	r7, r1
 800125a:	f7ff f93d 	bl	80004d8 <__aeabi_dmul>
 800125e:	f7ff fc13 	bl	8000a88 <__aeabi_d2uiz>
 8001262:	4604      	mov	r4, r0
 8001264:	f7ff f8be 	bl	80003e4 <__aeabi_ui2d>
 8001268:	2200      	movs	r2, #0
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <__aeabi_d2ulz+0x38>)
 800126c:	f7ff f934 	bl	80004d8 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4630      	mov	r0, r6
 8001276:	4639      	mov	r1, r7
 8001278:	f7fe ff76 	bl	8000168 <__aeabi_dsub>
 800127c:	f7ff fc04 	bl	8000a88 <__aeabi_d2uiz>
 8001280:	4621      	mov	r1, r4
 8001282:	bdd0      	pop	{r4, r6, r7, pc}
 8001284:	3df00000 	.word	0x3df00000
 8001288:	41f00000 	.word	0x41f00000

0800128c <__udivmoddi4>:
 800128c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001290:	9e08      	ldr	r6, [sp, #32]
 8001292:	460d      	mov	r5, r1
 8001294:	4604      	mov	r4, r0
 8001296:	4688      	mov	r8, r1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d14d      	bne.n	8001338 <__udivmoddi4+0xac>
 800129c:	428a      	cmp	r2, r1
 800129e:	4694      	mov	ip, r2
 80012a0:	d968      	bls.n	8001374 <__udivmoddi4+0xe8>
 80012a2:	fab2 f282 	clz	r2, r2
 80012a6:	b152      	cbz	r2, 80012be <__udivmoddi4+0x32>
 80012a8:	fa01 f302 	lsl.w	r3, r1, r2
 80012ac:	f1c2 0120 	rsb	r1, r2, #32
 80012b0:	fa20 f101 	lsr.w	r1, r0, r1
 80012b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80012b8:	ea41 0803 	orr.w	r8, r1, r3
 80012bc:	4094      	lsls	r4, r2
 80012be:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80012c2:	fbb8 f7f1 	udiv	r7, r8, r1
 80012c6:	fa1f fe8c 	uxth.w	lr, ip
 80012ca:	fb01 8817 	mls	r8, r1, r7, r8
 80012ce:	fb07 f00e 	mul.w	r0, r7, lr
 80012d2:	0c23      	lsrs	r3, r4, #16
 80012d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80012d8:	4298      	cmp	r0, r3
 80012da:	d90a      	bls.n	80012f2 <__udivmoddi4+0x66>
 80012dc:	eb1c 0303 	adds.w	r3, ip, r3
 80012e0:	f107 35ff 	add.w	r5, r7, #4294967295
 80012e4:	f080 811e 	bcs.w	8001524 <__udivmoddi4+0x298>
 80012e8:	4298      	cmp	r0, r3
 80012ea:	f240 811b 	bls.w	8001524 <__udivmoddi4+0x298>
 80012ee:	3f02      	subs	r7, #2
 80012f0:	4463      	add	r3, ip
 80012f2:	1a1b      	subs	r3, r3, r0
 80012f4:	fbb3 f0f1 	udiv	r0, r3, r1
 80012f8:	fb01 3310 	mls	r3, r1, r0, r3
 80012fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8001300:	b2a4      	uxth	r4, r4
 8001302:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001306:	45a6      	cmp	lr, r4
 8001308:	d90a      	bls.n	8001320 <__udivmoddi4+0x94>
 800130a:	eb1c 0404 	adds.w	r4, ip, r4
 800130e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001312:	f080 8109 	bcs.w	8001528 <__udivmoddi4+0x29c>
 8001316:	45a6      	cmp	lr, r4
 8001318:	f240 8106 	bls.w	8001528 <__udivmoddi4+0x29c>
 800131c:	4464      	add	r4, ip
 800131e:	3802      	subs	r0, #2
 8001320:	2100      	movs	r1, #0
 8001322:	eba4 040e 	sub.w	r4, r4, lr
 8001326:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800132a:	b11e      	cbz	r6, 8001334 <__udivmoddi4+0xa8>
 800132c:	2300      	movs	r3, #0
 800132e:	40d4      	lsrs	r4, r2
 8001330:	e9c6 4300 	strd	r4, r3, [r6]
 8001334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001338:	428b      	cmp	r3, r1
 800133a:	d908      	bls.n	800134e <__udivmoddi4+0xc2>
 800133c:	2e00      	cmp	r6, #0
 800133e:	f000 80ee 	beq.w	800151e <__udivmoddi4+0x292>
 8001342:	2100      	movs	r1, #0
 8001344:	e9c6 0500 	strd	r0, r5, [r6]
 8001348:	4608      	mov	r0, r1
 800134a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800134e:	fab3 f183 	clz	r1, r3
 8001352:	2900      	cmp	r1, #0
 8001354:	d14a      	bne.n	80013ec <__udivmoddi4+0x160>
 8001356:	42ab      	cmp	r3, r5
 8001358:	d302      	bcc.n	8001360 <__udivmoddi4+0xd4>
 800135a:	4282      	cmp	r2, r0
 800135c:	f200 80fc 	bhi.w	8001558 <__udivmoddi4+0x2cc>
 8001360:	1a84      	subs	r4, r0, r2
 8001362:	eb65 0303 	sbc.w	r3, r5, r3
 8001366:	2001      	movs	r0, #1
 8001368:	4698      	mov	r8, r3
 800136a:	2e00      	cmp	r6, #0
 800136c:	d0e2      	beq.n	8001334 <__udivmoddi4+0xa8>
 800136e:	e9c6 4800 	strd	r4, r8, [r6]
 8001372:	e7df      	b.n	8001334 <__udivmoddi4+0xa8>
 8001374:	b902      	cbnz	r2, 8001378 <__udivmoddi4+0xec>
 8001376:	deff      	udf	#255	; 0xff
 8001378:	fab2 f282 	clz	r2, r2
 800137c:	2a00      	cmp	r2, #0
 800137e:	f040 8091 	bne.w	80014a4 <__udivmoddi4+0x218>
 8001382:	eba1 000c 	sub.w	r0, r1, ip
 8001386:	2101      	movs	r1, #1
 8001388:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800138c:	fa1f fe8c 	uxth.w	lr, ip
 8001390:	fbb0 f3f7 	udiv	r3, r0, r7
 8001394:	fb07 0013 	mls	r0, r7, r3, r0
 8001398:	0c25      	lsrs	r5, r4, #16
 800139a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800139e:	fb0e f003 	mul.w	r0, lr, r3
 80013a2:	42a8      	cmp	r0, r5
 80013a4:	d908      	bls.n	80013b8 <__udivmoddi4+0x12c>
 80013a6:	eb1c 0505 	adds.w	r5, ip, r5
 80013aa:	f103 38ff 	add.w	r8, r3, #4294967295
 80013ae:	d202      	bcs.n	80013b6 <__udivmoddi4+0x12a>
 80013b0:	42a8      	cmp	r0, r5
 80013b2:	f200 80ce 	bhi.w	8001552 <__udivmoddi4+0x2c6>
 80013b6:	4643      	mov	r3, r8
 80013b8:	1a2d      	subs	r5, r5, r0
 80013ba:	fbb5 f0f7 	udiv	r0, r5, r7
 80013be:	fb07 5510 	mls	r5, r7, r0, r5
 80013c2:	fb0e fe00 	mul.w	lr, lr, r0
 80013c6:	b2a4      	uxth	r4, r4
 80013c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80013cc:	45a6      	cmp	lr, r4
 80013ce:	d908      	bls.n	80013e2 <__udivmoddi4+0x156>
 80013d0:	eb1c 0404 	adds.w	r4, ip, r4
 80013d4:	f100 35ff 	add.w	r5, r0, #4294967295
 80013d8:	d202      	bcs.n	80013e0 <__udivmoddi4+0x154>
 80013da:	45a6      	cmp	lr, r4
 80013dc:	f200 80b6 	bhi.w	800154c <__udivmoddi4+0x2c0>
 80013e0:	4628      	mov	r0, r5
 80013e2:	eba4 040e 	sub.w	r4, r4, lr
 80013e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013ea:	e79e      	b.n	800132a <__udivmoddi4+0x9e>
 80013ec:	f1c1 0720 	rsb	r7, r1, #32
 80013f0:	408b      	lsls	r3, r1
 80013f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013fa:	fa25 fa07 	lsr.w	sl, r5, r7
 80013fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001402:	fbba f8f9 	udiv	r8, sl, r9
 8001406:	fa20 f307 	lsr.w	r3, r0, r7
 800140a:	fb09 aa18 	mls	sl, r9, r8, sl
 800140e:	408d      	lsls	r5, r1
 8001410:	fa1f fe8c 	uxth.w	lr, ip
 8001414:	431d      	orrs	r5, r3
 8001416:	fa00 f301 	lsl.w	r3, r0, r1
 800141a:	fb08 f00e 	mul.w	r0, r8, lr
 800141e:	0c2c      	lsrs	r4, r5, #16
 8001420:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001424:	42a0      	cmp	r0, r4
 8001426:	fa02 f201 	lsl.w	r2, r2, r1
 800142a:	d90b      	bls.n	8001444 <__udivmoddi4+0x1b8>
 800142c:	eb1c 0404 	adds.w	r4, ip, r4
 8001430:	f108 3aff 	add.w	sl, r8, #4294967295
 8001434:	f080 8088 	bcs.w	8001548 <__udivmoddi4+0x2bc>
 8001438:	42a0      	cmp	r0, r4
 800143a:	f240 8085 	bls.w	8001548 <__udivmoddi4+0x2bc>
 800143e:	f1a8 0802 	sub.w	r8, r8, #2
 8001442:	4464      	add	r4, ip
 8001444:	1a24      	subs	r4, r4, r0
 8001446:	fbb4 f0f9 	udiv	r0, r4, r9
 800144a:	fb09 4410 	mls	r4, r9, r0, r4
 800144e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001452:	b2ad      	uxth	r5, r5
 8001454:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001458:	45a6      	cmp	lr, r4
 800145a:	d908      	bls.n	800146e <__udivmoddi4+0x1e2>
 800145c:	eb1c 0404 	adds.w	r4, ip, r4
 8001460:	f100 35ff 	add.w	r5, r0, #4294967295
 8001464:	d26c      	bcs.n	8001540 <__udivmoddi4+0x2b4>
 8001466:	45a6      	cmp	lr, r4
 8001468:	d96a      	bls.n	8001540 <__udivmoddi4+0x2b4>
 800146a:	3802      	subs	r0, #2
 800146c:	4464      	add	r4, ip
 800146e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001472:	fba0 9502 	umull	r9, r5, r0, r2
 8001476:	eba4 040e 	sub.w	r4, r4, lr
 800147a:	42ac      	cmp	r4, r5
 800147c:	46c8      	mov	r8, r9
 800147e:	46ae      	mov	lr, r5
 8001480:	d356      	bcc.n	8001530 <__udivmoddi4+0x2a4>
 8001482:	d053      	beq.n	800152c <__udivmoddi4+0x2a0>
 8001484:	2e00      	cmp	r6, #0
 8001486:	d069      	beq.n	800155c <__udivmoddi4+0x2d0>
 8001488:	ebb3 0208 	subs.w	r2, r3, r8
 800148c:	eb64 040e 	sbc.w	r4, r4, lr
 8001490:	fa22 f301 	lsr.w	r3, r2, r1
 8001494:	fa04 f707 	lsl.w	r7, r4, r7
 8001498:	431f      	orrs	r7, r3
 800149a:	40cc      	lsrs	r4, r1
 800149c:	e9c6 7400 	strd	r7, r4, [r6]
 80014a0:	2100      	movs	r1, #0
 80014a2:	e747      	b.n	8001334 <__udivmoddi4+0xa8>
 80014a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80014a8:	f1c2 0120 	rsb	r1, r2, #32
 80014ac:	fa25 f301 	lsr.w	r3, r5, r1
 80014b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80014b4:	fa20 f101 	lsr.w	r1, r0, r1
 80014b8:	4095      	lsls	r5, r2
 80014ba:	430d      	orrs	r5, r1
 80014bc:	fbb3 f1f7 	udiv	r1, r3, r7
 80014c0:	fb07 3311 	mls	r3, r7, r1, r3
 80014c4:	fa1f fe8c 	uxth.w	lr, ip
 80014c8:	0c28      	lsrs	r0, r5, #16
 80014ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80014ce:	fb01 f30e 	mul.w	r3, r1, lr
 80014d2:	4283      	cmp	r3, r0
 80014d4:	fa04 f402 	lsl.w	r4, r4, r2
 80014d8:	d908      	bls.n	80014ec <__udivmoddi4+0x260>
 80014da:	eb1c 0000 	adds.w	r0, ip, r0
 80014de:	f101 38ff 	add.w	r8, r1, #4294967295
 80014e2:	d22f      	bcs.n	8001544 <__udivmoddi4+0x2b8>
 80014e4:	4283      	cmp	r3, r0
 80014e6:	d92d      	bls.n	8001544 <__udivmoddi4+0x2b8>
 80014e8:	3902      	subs	r1, #2
 80014ea:	4460      	add	r0, ip
 80014ec:	1ac0      	subs	r0, r0, r3
 80014ee:	fbb0 f3f7 	udiv	r3, r0, r7
 80014f2:	fb07 0013 	mls	r0, r7, r3, r0
 80014f6:	b2ad      	uxth	r5, r5
 80014f8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014fc:	fb03 f00e 	mul.w	r0, r3, lr
 8001500:	42a8      	cmp	r0, r5
 8001502:	d908      	bls.n	8001516 <__udivmoddi4+0x28a>
 8001504:	eb1c 0505 	adds.w	r5, ip, r5
 8001508:	f103 38ff 	add.w	r8, r3, #4294967295
 800150c:	d216      	bcs.n	800153c <__udivmoddi4+0x2b0>
 800150e:	42a8      	cmp	r0, r5
 8001510:	d914      	bls.n	800153c <__udivmoddi4+0x2b0>
 8001512:	3b02      	subs	r3, #2
 8001514:	4465      	add	r5, ip
 8001516:	1a28      	subs	r0, r5, r0
 8001518:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800151c:	e738      	b.n	8001390 <__udivmoddi4+0x104>
 800151e:	4631      	mov	r1, r6
 8001520:	4630      	mov	r0, r6
 8001522:	e707      	b.n	8001334 <__udivmoddi4+0xa8>
 8001524:	462f      	mov	r7, r5
 8001526:	e6e4      	b.n	80012f2 <__udivmoddi4+0x66>
 8001528:	4618      	mov	r0, r3
 800152a:	e6f9      	b.n	8001320 <__udivmoddi4+0x94>
 800152c:	454b      	cmp	r3, r9
 800152e:	d2a9      	bcs.n	8001484 <__udivmoddi4+0x1f8>
 8001530:	ebb9 0802 	subs.w	r8, r9, r2
 8001534:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001538:	3801      	subs	r0, #1
 800153a:	e7a3      	b.n	8001484 <__udivmoddi4+0x1f8>
 800153c:	4643      	mov	r3, r8
 800153e:	e7ea      	b.n	8001516 <__udivmoddi4+0x28a>
 8001540:	4628      	mov	r0, r5
 8001542:	e794      	b.n	800146e <__udivmoddi4+0x1e2>
 8001544:	4641      	mov	r1, r8
 8001546:	e7d1      	b.n	80014ec <__udivmoddi4+0x260>
 8001548:	46d0      	mov	r8, sl
 800154a:	e77b      	b.n	8001444 <__udivmoddi4+0x1b8>
 800154c:	4464      	add	r4, ip
 800154e:	3802      	subs	r0, #2
 8001550:	e747      	b.n	80013e2 <__udivmoddi4+0x156>
 8001552:	3b02      	subs	r3, #2
 8001554:	4465      	add	r5, ip
 8001556:	e72f      	b.n	80013b8 <__udivmoddi4+0x12c>
 8001558:	4608      	mov	r0, r1
 800155a:	e706      	b.n	800136a <__udivmoddi4+0xde>
 800155c:	4631      	mov	r1, r6
 800155e:	e6e9      	b.n	8001334 <__udivmoddi4+0xa8>

08001560 <__aeabi_idiv0>:
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop

08001564 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af04      	add	r7, sp, #16
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <BMP280_Read8+0x38>)
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	b29a      	uxth	r2, r3
 800157a:	230a      	movs	r3, #10
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	2301      	movs	r3, #1
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	f107 030f 	add.w	r3, r7, #15
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2301      	movs	r3, #1
 800158a:	21ec      	movs	r1, #236	; 0xec
 800158c:	f002 fe9c 	bl	80042c8 <HAL_I2C_Mem_Read>
  return tmp;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000204 	.word	0x20000204

080015a0 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af04      	add	r7, sp, #16
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <BMP280_Read16+0x40>)
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	230a      	movs	r3, #10
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	2302      	movs	r3, #2
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2301      	movs	r3, #1
 80015c2:	21ec      	movs	r1, #236	; 0xec
 80015c4:	f002 fe80 	bl	80042c8 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 80015c8:	7b3b      	ldrb	r3, [r7, #12]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	7b7b      	ldrb	r3, [r7, #13]
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000204 	.word	0x20000204

080015e4 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ffd5 	bl	80015a0 <BMP280_Read16>
 80015f6:	4603      	mov	r3, r0
 80015f8:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80015fa:	89fb      	ldrh	r3, [r7, #14]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	b29b      	uxth	r3, r3
 8001600:	b21a      	sxth	r2, r3
 8001602:	89fb      	ldrh	r3, [r7, #14]
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	b21b      	sxth	r3, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	b21b      	sxth	r3, r3
 800160c:	b29b      	uxth	r3, r3
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af04      	add	r7, sp, #16
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	4613      	mov	r3, r2
 8001626:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <BMP280_Write8+0x34>)
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	b29a      	uxth	r2, r3
 8001630:	230a      	movs	r3, #10
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2301      	movs	r3, #1
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	1dbb      	adds	r3, r7, #6
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	21ec      	movs	r1, #236	; 0xec
 8001640:	f002 fd48 	bl	80040d4 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000204 	.word	0x20000204

08001650 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af04      	add	r7, sp, #16
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <BMP280_Read24+0x40>)
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	b29a      	uxth	r2, r3
 8001662:	230a      	movs	r3, #10
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	2303      	movs	r3, #3
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2301      	movs	r3, #1
 8001672:	21ec      	movs	r1, #236	; 0xec
 8001674:	f002 fe28 	bl	80042c8 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001678:	7b3b      	ldrb	r3, [r7, #12]
 800167a:	041a      	lsls	r2, r3, #16
 800167c:	7b7b      	ldrb	r3, [r7, #13]
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	4313      	orrs	r3, r2
 8001682:	7bba      	ldrb	r2, [r7, #14]
 8001684:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000204 	.word	0x20000204

08001694 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	4608      	mov	r0, r1
 800169e:	4611      	mov	r1, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	70fb      	strb	r3, [r7, #3]
 80016a6:	460b      	mov	r3, r1
 80016a8:	70bb      	strb	r3, [r7, #2]
 80016aa:	4613      	mov	r3, r2
 80016ac:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80016ae:	4a48      	ldr	r2, [pc, #288]	; (80017d0 <BMP280_Init+0x13c>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80016b4:	787b      	ldrb	r3, [r7, #1]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d901      	bls.n	80016be <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80016ba:	2303      	movs	r3, #3
 80016bc:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80016be:	4a45      	ldr	r2, [pc, #276]	; (80017d4 <BMP280_Init+0x140>)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	d901      	bls.n	80016d8 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80016d4:	2305      	movs	r3, #5
 80016d6:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80016d8:	4a3f      	ldr	r2, [pc, #252]	; (80017d8 <BMP280_Init+0x144>)
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80016de:	78bb      	ldrb	r3, [r7, #2]
 80016e0:	2b05      	cmp	r3, #5
 80016e2:	d901      	bls.n	80016e8 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80016e4:	2305      	movs	r3, #5
 80016e6:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80016e8:	4a3c      	ldr	r2, [pc, #240]	; (80017dc <BMP280_Init+0x148>)
 80016ea:	78bb      	ldrb	r3, [r7, #2]
 80016ec:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80016ee:	bf00      	nop
 80016f0:	20d0      	movs	r0, #208	; 0xd0
 80016f2:	f7ff ff37 	bl	8001564 <BMP280_Read8>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b58      	cmp	r3, #88	; 0x58
 80016fa:	d1f9      	bne.n	80016f0 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80016fc:	2088      	movs	r0, #136	; 0x88
 80016fe:	f7ff ff71 	bl	80015e4 <BMP280_Read16LE>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <BMP280_Init+0x14c>)
 8001708:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 800170a:	208a      	movs	r0, #138	; 0x8a
 800170c:	f7ff ff6a 	bl	80015e4 <BMP280_Read16LE>
 8001710:	4603      	mov	r3, r0
 8001712:	b21a      	sxth	r2, r3
 8001714:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <BMP280_Init+0x150>)
 8001716:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001718:	208c      	movs	r0, #140	; 0x8c
 800171a:	f7ff ff63 	bl	80015e4 <BMP280_Read16LE>
 800171e:	4603      	mov	r3, r0
 8001720:	b21a      	sxth	r2, r3
 8001722:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <BMP280_Init+0x154>)
 8001724:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001726:	208e      	movs	r0, #142	; 0x8e
 8001728:	f7ff ff5c 	bl	80015e4 <BMP280_Read16LE>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <BMP280_Init+0x158>)
 8001732:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8001734:	2090      	movs	r0, #144	; 0x90
 8001736:	f7ff ff55 	bl	80015e4 <BMP280_Read16LE>
 800173a:	4603      	mov	r3, r0
 800173c:	b21a      	sxth	r2, r3
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <BMP280_Init+0x15c>)
 8001740:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001742:	2092      	movs	r0, #146	; 0x92
 8001744:	f7ff ff4e 	bl	80015e4 <BMP280_Read16LE>
 8001748:	4603      	mov	r3, r0
 800174a:	b21a      	sxth	r2, r3
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <BMP280_Init+0x160>)
 800174e:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001750:	2094      	movs	r0, #148	; 0x94
 8001752:	f7ff ff47 	bl	80015e4 <BMP280_Read16LE>
 8001756:	4603      	mov	r3, r0
 8001758:	b21a      	sxth	r2, r3
 800175a:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <BMP280_Init+0x164>)
 800175c:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800175e:	2096      	movs	r0, #150	; 0x96
 8001760:	f7ff ff40 	bl	80015e4 <BMP280_Read16LE>
 8001764:	4603      	mov	r3, r0
 8001766:	b21a      	sxth	r2, r3
 8001768:	4b24      	ldr	r3, [pc, #144]	; (80017fc <BMP280_Init+0x168>)
 800176a:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 800176c:	2098      	movs	r0, #152	; 0x98
 800176e:	f7ff ff39 	bl	80015e4 <BMP280_Read16LE>
 8001772:	4603      	mov	r3, r0
 8001774:	b21a      	sxth	r2, r3
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <BMP280_Init+0x16c>)
 8001778:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 800177a:	209a      	movs	r0, #154	; 0x9a
 800177c:	f7ff ff32 	bl	80015e4 <BMP280_Read16LE>
 8001780:	4603      	mov	r3, r0
 8001782:	b21a      	sxth	r2, r3
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <BMP280_Init+0x170>)
 8001786:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001788:	209c      	movs	r0, #156	; 0x9c
 800178a:	f7ff ff2b 	bl	80015e4 <BMP280_Read16LE>
 800178e:	4603      	mov	r3, r0
 8001790:	b21a      	sxth	r2, r3
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <BMP280_Init+0x174>)
 8001794:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001796:	209e      	movs	r0, #158	; 0x9e
 8001798:	f7ff ff24 	bl	80015e4 <BMP280_Read16LE>
 800179c:	4603      	mov	r3, r0
 800179e:	b21a      	sxth	r2, r3
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <BMP280_Init+0x178>)
 80017a2:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	015b      	lsls	r3, r3, #5
 80017a8:	b25a      	sxtb	r2, r3
 80017aa:	78bb      	ldrb	r3, [r7, #2]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b25a      	sxtb	r2, r3
 80017b4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	4619      	mov	r1, r3
 80017c0:	20f4      	movs	r0, #244	; 0xf4
 80017c2:	f7ff ff29 	bl	8001618 <BMP280_Write8>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000204 	.word	0x20000204
 80017d4:	2000020a 	.word	0x2000020a
 80017d8:	20000208 	.word	0x20000208
 80017dc:	20000209 	.word	0x20000209
 80017e0:	20000220 	.word	0x20000220
 80017e4:	2000020c 	.word	0x2000020c
 80017e8:	2000020e 	.word	0x2000020e
 80017ec:	20000222 	.word	0x20000222
 80017f0:	20000210 	.word	0x20000210
 80017f4:	20000212 	.word	0x20000212
 80017f8:	20000214 	.word	0x20000214
 80017fc:	20000216 	.word	0x20000216
 8001800:	20000218 	.word	0x20000218
 8001804:	2000021a 	.word	0x2000021a
 8001808:	2000021c 	.word	0x2000021c
 800180c:	2000021e 	.word	0x2000021e

08001810 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
  int32_t var1, var2;
  if(_mode == BMP280_FORCEDMODE)
 8001816:	4b3a      	ldr	r3, [pc, #232]	; (8001900 <BMP280_ReadTemperature+0xf0>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d16b      	bne.n	80018f6 <BMP280_ReadTemperature+0xe6>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800181e:	20f4      	movs	r0, #244	; 0xf4
 8001820:	f7ff fea0 	bl	8001564 <BMP280_Read8>
 8001824:	4603      	mov	r3, r0
 8001826:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001828:	7dfb      	ldrb	r3, [r7, #23]
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001830:	7dfb      	ldrb	r3, [r7, #23]
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	4619      	mov	r1, r3
 800183c:	20f4      	movs	r0, #244	; 0xf4
 800183e:	f7ff feeb 	bl	8001618 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8001842:	20f4      	movs	r0, #244	; 0xf4
 8001844:	f7ff fe8e 	bl	8001564 <BMP280_Read8>
 8001848:	4603      	mov	r3, r0
 800184a:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 800184c:	7dbb      	ldrb	r3, [r7, #22]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001854:	7dbb      	ldrb	r3, [r7, #22]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d14d      	bne.n	80018f6 <BMP280_ReadTemperature+0xe6>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800185a:	20f4      	movs	r0, #244	; 0xf4
 800185c:	f7ff fe82 	bl	8001564 <BMP280_Read8>
 8001860:	4603      	mov	r3, r0
 8001862:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001864:	7dbb      	ldrb	r3, [r7, #22]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 800186c:	7dbb      	ldrb	r3, [r7, #22]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d000      	beq.n	8001874 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001872:	e7f2      	b.n	800185a <BMP280_ReadTemperature+0x4a>
				  break;
 8001874:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001876:	20fa      	movs	r0, #250	; 0xfa
 8001878:	f7ff feea 	bl	8001650 <BMP280_Read24>
 800187c:	4603      	mov	r3, r0
 800187e:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	111b      	asrs	r3, r3, #4
 8001884:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	10da      	asrs	r2, r3, #3
 800188a:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <BMP280_ReadTemperature+0xf4>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 8001892:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <BMP280_ReadTemperature+0xf8>)
 8001894:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	12db      	asrs	r3, r3, #11
 800189e:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	111b      	asrs	r3, r3, #4
 80018a4:	4a17      	ldr	r2, [pc, #92]	; (8001904 <BMP280_ReadTemperature+0xf4>)
 80018a6:	8812      	ldrh	r2, [r2, #0]
 80018a8:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	1112      	asrs	r2, r2, #4
 80018ae:	4915      	ldr	r1, [pc, #84]	; (8001904 <BMP280_ReadTemperature+0xf4>)
 80018b0:	8809      	ldrh	r1, [r1, #0]
 80018b2:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80018b8:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80018ba:	4a14      	ldr	r2, [pc, #80]	; (800190c <BMP280_ReadTemperature+0xfc>)
 80018bc:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80018c4:	139b      	asrs	r3, r3, #14
 80018c6:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	4413      	add	r3, r2
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <BMP280_ReadTemperature+0x100>)
 80018d0:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <BMP280_ReadTemperature+0x100>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	3380      	adds	r3, #128	; 0x80
 80018de:	121b      	asrs	r3, r3, #8
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff f9fb 	bl	8000cdc <__aeabi_i2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	607b      	str	r3, [r7, #4]
		  return T/100;
 80018ea:	490a      	ldr	r1, [pc, #40]	; (8001914 <BMP280_ReadTemperature+0x104>)
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fafd 	bl	8000eec <__aeabi_fdiv>
 80018f2:	4603      	mov	r3, r0
 80018f4:	e000      	b.n	80018f8 <BMP280_ReadTemperature+0xe8>
	  }
  }

  return -99;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <BMP280_ReadTemperature+0x108>)
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2000020a 	.word	0x2000020a
 8001904:	20000220 	.word	0x20000220
 8001908:	2000020c 	.word	0x2000020c
 800190c:	2000020e 	.word	0x2000020e
 8001910:	20000224 	.word	0x20000224
 8001914:	42c80000 	.word	0x42c80000
 8001918:	c2c60000 	.word	0xc2c60000

0800191c <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 800191c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001920:	b0cc      	sub	sp, #304	; 0x130
 8001922:	af00      	add	r7, sp, #0
 8001924:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8001928:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 800192c:	f7ff ff70 	bl	8001810 <BMP280_ReadTemperature>
 8001930:	4602      	mov	r2, r0
 8001932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001936:	601a      	str	r2, [r3, #0]

	  if(*temperature == -99)
 8001938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	49b3      	ldr	r1, [pc, #716]	; (8001c0c <BMP280_ReadTemperatureAndPressure+0x2f0>)
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fbb3 	bl	80010ac <__aeabi_fcmpeq>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <BMP280_ReadTemperatureAndPressure+0x34>
		  return -1;
 800194c:	23ff      	movs	r3, #255	; 0xff
 800194e:	e2bc      	b.n	8001eca <BMP280_ReadTemperatureAndPressure+0x5ae>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001950:	20f7      	movs	r0, #247	; 0xf7
 8001952:	f7ff fe7d 	bl	8001650 <BMP280_Read24>
 8001956:	4603      	mov	r3, r0
 8001958:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 800195c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001960:	111b      	asrs	r3, r3, #4
 8001962:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001966:	4baa      	ldr	r3, [pc, #680]	; (8001c10 <BMP280_ReadTemperatureAndPressure+0x2f4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	17da      	asrs	r2, r3, #31
 800196c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001970:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001974:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001978:	4611      	mov	r1, r2
 800197a:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
 800197e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001980:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001984:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001986:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800198a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 800198e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001992:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001996:	fb03 f102 	mul.w	r1, r3, r2
 800199a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800199e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	18ca      	adds	r2, r1, r3
 80019a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019ac:	fba3 4503 	umull	r4, r5, r3, r3
 80019b0:	1953      	adds	r3, r2, r5
 80019b2:	461d      	mov	r5, r3
 80019b4:	4b97      	ldr	r3, [pc, #604]	; (8001c14 <BMP280_ReadTemperatureAndPressure+0x2f8>)
 80019b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	17da      	asrs	r2, r3, #31
 80019be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80019c2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80019c6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80019ca:	4603      	mov	r3, r0
 80019cc:	fb03 f205 	mul.w	r2, r3, r5
 80019d0:	460b      	mov	r3, r1
 80019d2:	fb04 f303 	mul.w	r3, r4, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	4602      	mov	r2, r0
 80019da:	fba4 8902 	umull	r8, r9, r4, r2
 80019de:	444b      	add	r3, r9
 80019e0:	4699      	mov	r9, r3
 80019e2:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 80019e6:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80019ea:	4b8b      	ldr	r3, [pc, #556]	; (8001c18 <BMP280_ReadTemperatureAndPressure+0x2fc>)
 80019ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	17da      	asrs	r2, r3, #31
 80019f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80019f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80019fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a00:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001a04:	462a      	mov	r2, r5
 8001a06:	fb02 f203 	mul.w	r2, r2, r3
 8001a0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a0e:	4621      	mov	r1, r4
 8001a10:	fb01 f303 	mul.w	r3, r1, r3
 8001a14:	441a      	add	r2, r3
 8001a16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	fba3 ab01 	umull	sl, fp, r3, r1
 8001a20:	eb02 030b 	add.w	r3, r2, fp
 8001a24:	469b      	mov	fp, r3
 8001a26:	f04f 0000 	mov.w	r0, #0
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001a32:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001a36:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001a3a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a3e:	1814      	adds	r4, r2, r0
 8001a40:	643c      	str	r4, [r7, #64]	; 0x40
 8001a42:	414b      	adcs	r3, r1
 8001a44:	647b      	str	r3, [r7, #68]	; 0x44
 8001a46:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001a4a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 8001a4e:	4b73      	ldr	r3, [pc, #460]	; (8001c1c <BMP280_ReadTemperatureAndPressure+0x300>)
 8001a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	17da      	asrs	r2, r3, #31
 8001a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001a5c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001a60:	f04f 0000 	mov.w	r0, #0
 8001a64:	f04f 0100 	mov.w	r1, #0
 8001a68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a6c:	00d9      	lsls	r1, r3, #3
 8001a6e:	2000      	movs	r0, #0
 8001a70:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a74:	1814      	adds	r4, r2, r0
 8001a76:	63bc      	str	r4, [r7, #56]	; 0x38
 8001a78:	414b      	adcs	r3, r1
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a7c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001a80:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001a84:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001a88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a8c:	fb03 f102 	mul.w	r1, r3, r2
 8001a90:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001a94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	18ca      	adds	r2, r1, r3
 8001a9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001aa2:	fba3 3103 	umull	r3, r1, r3, r3
 8001aa6:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001aaa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001ab2:	18d3      	adds	r3, r2, r3
 8001ab4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ab8:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <BMP280_ReadTemperatureAndPressure+0x304>)
 8001aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	17da      	asrs	r2, r3, #31
 8001ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ac6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001aca:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8001ace:	4622      	mov	r2, r4
 8001ad0:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001ad4:	4641      	mov	r1, r8
 8001ad6:	fb01 f202 	mul.w	r2, r1, r2
 8001ada:	464d      	mov	r5, r9
 8001adc:	4618      	mov	r0, r3
 8001ade:	4621      	mov	r1, r4
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	fb03 f305 	mul.w	r3, r3, r5
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4641      	mov	r1, r8
 8001aec:	fba2 2101 	umull	r2, r1, r2, r1
 8001af0:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001af4:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001af8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001afc:	4413      	add	r3, r2
 8001afe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f04f 0100 	mov.w	r1, #0
 8001b0a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001b0e:	4623      	mov	r3, r4
 8001b10:	0a18      	lsrs	r0, r3, #8
 8001b12:	462a      	mov	r2, r5
 8001b14:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001b18:	462b      	mov	r3, r5
 8001b1a:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001b1c:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <BMP280_ReadTemperatureAndPressure+0x308>)
 8001b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	17da      	asrs	r2, r3, #31
 8001b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001b2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001b2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001b36:	464a      	mov	r2, r9
 8001b38:	fb02 f203 	mul.w	r2, r2, r3
 8001b3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b40:	4644      	mov	r4, r8
 8001b42:	fb04 f303 	mul.w	r3, r4, r3
 8001b46:	441a      	add	r2, r3
 8001b48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b4c:	4644      	mov	r4, r8
 8001b4e:	fba3 3404 	umull	r3, r4, r3, r4
 8001b52:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
 8001b56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b5e:	18d3      	adds	r3, r2, r3
 8001b60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001b70:	464c      	mov	r4, r9
 8001b72:	0323      	lsls	r3, r4, #12
 8001b74:	46c4      	mov	ip, r8
 8001b76:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001b7a:	4644      	mov	r4, r8
 8001b7c:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001b7e:	1884      	adds	r4, r0, r2
 8001b80:	633c      	str	r4, [r7, #48]	; 0x30
 8001b82:	eb41 0303 	adc.w	r3, r1, r3
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
 8001b88:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001b8c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001b90:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001b94:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001b98:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8001b9c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001ba0:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <BMP280_ReadTemperatureAndPressure+0x30c>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001bac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001bb0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001bba:	4641      	mov	r1, r8
 8001bbc:	fb01 f202 	mul.w	r2, r1, r2
 8001bc0:	464d      	mov	r5, r9
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	fb03 f305 	mul.w	r3, r3, r5
 8001bcc:	4413      	add	r3, r2
 8001bce:	4602      	mov	r2, r0
 8001bd0:	4641      	mov	r1, r8
 8001bd2:	fba2 2101 	umull	r2, r1, r2, r1
 8001bd6:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8001bda:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001bde:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001be2:	4413      	add	r3, r2
 8001be4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	104a      	asrs	r2, r1, #1
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	17cb      	asrs	r3, r1, #31
 8001bfc:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 8001c00:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001c04:	4313      	orrs	r3, r2
 8001c06:	d111      	bne.n	8001c2c <BMP280_ReadTemperatureAndPressure+0x310>
	    return 0;  // avoid exception caused by division by zero
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e15e      	b.n	8001eca <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001c0c:	c2c60000 	.word	0xc2c60000
 8001c10:	20000224 	.word	0x20000224
 8001c14:	20000218 	.word	0x20000218
 8001c18:	20000216 	.word	0x20000216
 8001c1c:	20000214 	.word	0x20000214
 8001c20:	20000212 	.word	0x20000212
 8001c24:	20000210 	.word	0x20000210
 8001c28:	20000222 	.word	0x20000222
	  }
	  p = 1048576 - adc_P;
 8001c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c30:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001c34:	17da      	asrs	r2, r3, #31
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c3a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001c3e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 8001c42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c46:	105b      	asrs	r3, r3, #1
 8001c48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c50:	07db      	lsls	r3, r3, #31
 8001c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c56:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001c5a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001c5e:	4604      	mov	r4, r0
 8001c60:	1aa4      	subs	r4, r4, r2
 8001c62:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8001c66:	eb61 0303 	sbc.w	r3, r1, r3
 8001c6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c6e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001c72:	4622      	mov	r2, r4
 8001c74:	462b      	mov	r3, r5
 8001c76:	1891      	adds	r1, r2, r2
 8001c78:	6239      	str	r1, [r7, #32]
 8001c7a:	415b      	adcs	r3, r3
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c82:	4621      	mov	r1, r4
 8001c84:	1851      	adds	r1, r2, r1
 8001c86:	61b9      	str	r1, [r7, #24]
 8001c88:	4629      	mov	r1, r5
 8001c8a:	414b      	adcs	r3, r1
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c9a:	4649      	mov	r1, r9
 8001c9c:	018b      	lsls	r3, r1, #6
 8001c9e:	4641      	mov	r1, r8
 8001ca0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca4:	4641      	mov	r1, r8
 8001ca6:	018a      	lsls	r2, r1, #6
 8001ca8:	4641      	mov	r1, r8
 8001caa:	1889      	adds	r1, r1, r2
 8001cac:	6139      	str	r1, [r7, #16]
 8001cae:	4649      	mov	r1, r9
 8001cb0:	eb43 0101 	adc.w	r1, r3, r1
 8001cb4:	6179      	str	r1, [r7, #20]
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001cc2:	4649      	mov	r1, r9
 8001cc4:	008b      	lsls	r3, r1, #2
 8001cc6:	46c4      	mov	ip, r8
 8001cc8:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001ccc:	4641      	mov	r1, r8
 8001cce:	008a      	lsls	r2, r1, #2
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4622      	mov	r2, r4
 8001cd8:	189b      	adds	r3, r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	462a      	mov	r2, r5
 8001ce0:	eb42 0303 	adc.w	r3, r2, r3
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	008b      	lsls	r3, r1, #2
 8001cf6:	46c4      	mov	ip, r8
 8001cf8:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	008a      	lsls	r2, r1, #2
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	4622      	mov	r2, r4
 8001d08:	189b      	adds	r3, r3, r2
 8001d0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d0c:	462b      	mov	r3, r5
 8001d0e:	460a      	mov	r2, r1
 8001d10:	eb42 0303 	adc.w	r3, r2, r3
 8001d14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d16:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001d1a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d1e:	f7ff fa2d 	bl	800117c <__aeabi_ldivmod>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001d2a:	4b6b      	ldr	r3, [pc, #428]	; (8001ed8 <BMP280_ReadTemperatureAndPressure+0x5bc>)
 8001d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	17da      	asrs	r2, r3, #31
 8001d34:	673b      	str	r3, [r7, #112]	; 0x70
 8001d36:	677a      	str	r2, [r7, #116]	; 0x74
 8001d38:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001d3c:	f04f 0000 	mov.w	r0, #0
 8001d40:	f04f 0100 	mov.w	r1, #0
 8001d44:	0b50      	lsrs	r0, r2, #13
 8001d46:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d4a:	1359      	asrs	r1, r3, #13
 8001d4c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001d50:	462b      	mov	r3, r5
 8001d52:	fb00 f203 	mul.w	r2, r0, r3
 8001d56:	4623      	mov	r3, r4
 8001d58:	fb03 f301 	mul.w	r3, r3, r1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4622      	mov	r2, r4
 8001d60:	fba2 2100 	umull	r2, r1, r2, r0
 8001d64:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001d68:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001d6c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001d70:	4413      	add	r3, r2
 8001d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d76:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001d7a:	f04f 0000 	mov.w	r0, #0
 8001d7e:	f04f 0100 	mov.w	r1, #0
 8001d82:	0b50      	lsrs	r0, r2, #13
 8001d84:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d88:	1359      	asrs	r1, r3, #13
 8001d8a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001d8e:	462b      	mov	r3, r5
 8001d90:	fb00 f203 	mul.w	r2, r0, r3
 8001d94:	4623      	mov	r3, r4
 8001d96:	fb03 f301 	mul.w	r3, r3, r1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4622      	mov	r2, r4
 8001d9e:	fba2 2100 	umull	r2, r1, r2, r0
 8001da2:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001da6:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001daa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001dae:	4413      	add	r3, r2
 8001db0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	0e4a      	lsrs	r2, r1, #25
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	460c      	mov	r4, r1
 8001dca:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001dce:	164b      	asrs	r3, r1, #25
 8001dd0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8001dd4:	4b41      	ldr	r3, [pc, #260]	; (8001edc <BMP280_ReadTemperatureAndPressure+0x5c0>)
 8001dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	17da      	asrs	r2, r3, #31
 8001dde:	66bb      	str	r3, [r7, #104]	; 0x68
 8001de0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001de2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001de6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001dea:	462a      	mov	r2, r5
 8001dec:	fb02 f203 	mul.w	r2, r2, r3
 8001df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001df4:	4621      	mov	r1, r4
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001e00:	4621      	mov	r1, r4
 8001e02:	fba2 2101 	umull	r2, r1, r2, r1
 8001e06:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001e0a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001e0e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001e12:	4413      	add	r3, r2
 8001e14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001e24:	4621      	mov	r1, r4
 8001e26:	0cca      	lsrs	r2, r1, #19
 8001e28:	4620      	mov	r0, r4
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	460c      	mov	r4, r1
 8001e2e:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001e32:	14cb      	asrs	r3, r1, #19
 8001e34:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001e38:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001e3c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001e40:	1884      	adds	r4, r0, r2
 8001e42:	663c      	str	r4, [r7, #96]	; 0x60
 8001e44:	eb41 0303 	adc.w	r3, r1, r3
 8001e48:	667b      	str	r3, [r7, #100]	; 0x64
 8001e4a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001e4e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001e52:	4621      	mov	r1, r4
 8001e54:	1889      	adds	r1, r1, r2
 8001e56:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e58:	4629      	mov	r1, r5
 8001e5a:	eb43 0101 	adc.w	r1, r3, r1
 8001e5e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001e60:	f04f 0000 	mov.w	r0, #0
 8001e64:	f04f 0100 	mov.w	r1, #0
 8001e68:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001e6c:	4623      	mov	r3, r4
 8001e6e:	0a18      	lsrs	r0, r3, #8
 8001e70:	462a      	mov	r2, r5
 8001e72:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001e76:	462b      	mov	r3, r5
 8001e78:	1219      	asrs	r1, r3, #8
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <BMP280_ReadTemperatureAndPressure+0x5c4>)
 8001e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e80:	b21b      	sxth	r3, r3
 8001e82:	17da      	asrs	r2, r3, #31
 8001e84:	653b      	str	r3, [r7, #80]	; 0x50
 8001e86:	657a      	str	r2, [r7, #84]	; 0x54
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001e94:	464c      	mov	r4, r9
 8001e96:	0123      	lsls	r3, r4, #4
 8001e98:	46c4      	mov	ip, r8
 8001e9a:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001e9e:	4644      	mov	r4, r8
 8001ea0:	0122      	lsls	r2, r4, #4
 8001ea2:	1884      	adds	r4, r0, r2
 8001ea4:	603c      	str	r4, [r7, #0]
 8001ea6:	eb41 0303 	adc.w	r3, r1, r3
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001eb0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 8001eb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da00      	bge.n	8001ebe <BMP280_ReadTemperatureAndPressure+0x5a2>
 8001ebc:	33ff      	adds	r3, #255	; 0xff
 8001ebe:	121b      	asrs	r3, r3, #8
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ec6:	601a      	str	r2, [r3, #0]

	  return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000021e 	.word	0x2000021e
 8001edc:	2000021c 	.word	0x2000021c
 8001ee0:	2000021a 	.word	0x2000021a

08001ee4 <saturation>:
/* USER CODE BEGIN 0 */
// PID controller creation instance
arm_pid_instance_f32 PID_controller;

//duty saturation in range(0,1000)
void saturation(uint32_t duty_value){
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	if (duty_value > WINDUP_UB){
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef2:	d903      	bls.n	8001efc <saturation+0x18>
		duty = 1000;
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <saturation+0x24>)
 8001ef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001efa:	601a      	str	r2, [r3, #0]
	}else if (duty_value < WINDUP_LB) {
		duty = 0;
	}
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000004 	.word	0x20000004

08001f0c <absf>:

float absf(float value){
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	if (value > 0.0){
 8001f14:	f04f 0100 	mov.w	r1, #0
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff f8ef 	bl	80010fc <__aeabi_fcmpgt>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <absf+0x1c>
		return value;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	e00d      	b.n	8001f44 <absf+0x38>
	}else if (value < 0.0){
 8001f28:	f04f 0100 	mov.w	r1, #0
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff f8c7 	bl	80010c0 <__aeabi_fcmplt>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <absf+0x34>
		return value * -1;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f3e:	e001      	b.n	8001f44 <absf+0x38>
	}
	return 0.0;
 8001f40:	f04f 0300 	mov.w	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//PID gains assignment
	PID_controller.Kp = PID_KP;
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <main+0x6c>)
 8001f52:	4a1a      	ldr	r2, [pc, #104]	; (8001fbc <main+0x70>)
 8001f54:	619a      	str	r2, [r3, #24]
	PID_controller.Ki = PID_KI;
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <main+0x6c>)
 8001f58:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <main+0x74>)
 8001f5a:	61da      	str	r2, [r3, #28]
	PID_controller.Kd = PID_KD;
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <main+0x6c>)
 8001f5e:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <main+0x78>)
 8001f60:	621a      	str	r2, [r3, #32]

	//PID Init
	arm_pid_init_f32(&PID_controller, 1);
 8001f62:	2101      	movs	r1, #1
 8001f64:	4814      	ldr	r0, [pc, #80]	; (8001fb8 <main+0x6c>)
 8001f66:	f005 f997 	bl	8007298 <arm_pid_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f6a:	f000 fe89 	bl	8002c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f6e:	f000 f837 	bl	8001fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f72:	f000 f9e5 	bl	8002340 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f76:	f000 f9b9 	bl	80022ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001f7a:	f000 f8c7 	bl	800210c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001f7e:	f000 f8f1 	bl	8002164 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f82:	f000 f93d 	bl	8002200 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001f86:	f000 f883 	bl	8002090 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//   temperature sensor initialization
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <main+0x7c>)
 8001f92:	f7ff fb7f 	bl	8001694 <BMP280_Init>

  //UART interrupts initialization
  HAL_UART_Receive_IT(&huart2, (uint8_t*)input, 4);
 8001f96:	2204      	movs	r2, #4
 8001f98:	490c      	ldr	r1, [pc, #48]	; (8001fcc <main+0x80>)
 8001f9a:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <main+0x84>)
 8001f9c:	f004 fd23 	bl	80069e6 <HAL_UART_Receive_IT>

//  Timer start for PWM generation and PID control logic
  HAL_TIM_Base_Start_IT(&htim2);
 8001fa0:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <main+0x88>)
 8001fa2:	f003 fd33 	bl	8005a0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <main+0x8c>)
 8001faa:	f003 fdd9 	bl	8005b60 <HAL_TIM_PWM_Start>

//  LET THE FORCE BE WITH YOU mode start
  HAL_ADC_Start_IT(&hadc1);
 8001fae:	480b      	ldr	r0, [pc, #44]	; (8001fdc <main+0x90>)
 8001fb0:	f001 f8a6 	bl	8003100 <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <main+0x68>
 8001fb6:	bf00      	nop
 8001fb8:	200003fc 	.word	0x200003fc
 8001fbc:	3f74c72a 	.word	0x3f74c72a
 8001fc0:	3b144ed7 	.word	0x3b144ed7
 8001fc4:	c152c8b4 	.word	0xc152c8b4
 8001fc8:	20000258 	.word	0x20000258
 8001fcc:	200003f8 	.word	0x200003f8
 8001fd0:	2000033c 	.word	0x2000033c
 8001fd4:	200002ac 	.word	0x200002ac
 8001fd8:	200002f4 	.word	0x200002f4
 8001fdc:	20000228 	.word	0x20000228

08001fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b094      	sub	sp, #80	; 0x50
 8001fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fea:	2228      	movs	r2, #40	; 0x28
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f005 f9a0 	bl	8007334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002010:	2302      	movs	r3, #2
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002014:	2301      	movs	r3, #1
 8002016:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002018:	2310      	movs	r3, #16
 800201a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800201c:	2302      	movs	r3, #2
 800201e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002020:	2300      	movs	r3, #0
 8002022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002024:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002028:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800202e:	4618      	mov	r0, r3
 8002030:	f002 ff0c 	bl	8004e4c <HAL_RCC_OscConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800203a:	f000 fb7d 	bl	8002738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203e:	230f      	movs	r3, #15
 8002040:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002042:	2302      	movs	r3, #2
 8002044:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	2102      	movs	r1, #2
 800205a:	4618      	mov	r0, r3
 800205c:	f003 f978 	bl	8005350 <HAL_RCC_ClockConfig>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002066:	f000 fb67 	bl	8002738 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800206a:	2302      	movs	r3, #2
 800206c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800206e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002072:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	4618      	mov	r0, r3
 8002078:	f003 fb02 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002082:	f000 fb59 	bl	8002738 <Error_Handler>
  }
}
 8002086:	bf00      	nop
 8002088:	3750      	adds	r7, #80	; 0x50
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <MX_ADC1_Init+0x74>)
 80020a2:	4a19      	ldr	r2, [pc, #100]	; (8002108 <MX_ADC1_Init+0x78>)
 80020a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <MX_ADC1_Init+0x74>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020ac:	4b15      	ldr	r3, [pc, #84]	; (8002104 <MX_ADC1_Init+0x74>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020b2:	4b14      	ldr	r3, [pc, #80]	; (8002104 <MX_ADC1_Init+0x74>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <MX_ADC1_Init+0x74>)
 80020ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80020be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <MX_ADC1_Init+0x74>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80020c6:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <MX_ADC1_Init+0x74>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020cc:	480d      	ldr	r0, [pc, #52]	; (8002104 <MX_ADC1_Init+0x74>)
 80020ce:	f000 fe39 	bl	8002d44 <HAL_ADC_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80020d8:	f000 fb2e 	bl	8002738 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020dc:	2304      	movs	r3, #4
 80020de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020e0:	2301      	movs	r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_ADC1_Init+0x74>)
 80020ee:	f001 f995 	bl	800341c <HAL_ADC_ConfigChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80020f8:	f000 fb1e 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000228 	.word	0x20000228
 8002108:	40012400 	.word	0x40012400

0800210c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <MX_I2C1_Init+0x50>)
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <MX_I2C1_Init+0x54>)
 8002114:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100;
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <MX_I2C1_Init+0x50>)
 8002118:	2264      	movs	r2, #100	; 0x64
 800211a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <MX_I2C1_Init+0x50>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MX_I2C1_Init+0x50>)
 8002124:	2200      	movs	r2, #0
 8002126:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <MX_I2C1_Init+0x50>)
 800212a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800212e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002130:	4b0a      	ldr	r3, [pc, #40]	; (800215c <MX_I2C1_Init+0x50>)
 8002132:	2200      	movs	r2, #0
 8002134:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <MX_I2C1_Init+0x50>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <MX_I2C1_Init+0x50>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <MX_I2C1_Init+0x50>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002148:	4804      	ldr	r0, [pc, #16]	; (800215c <MX_I2C1_Init+0x50>)
 800214a:	f001 fe7f 	bl	8003e4c <HAL_I2C_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002154:	f000 faf0 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000258 	.word	0x20000258
 8002160:	40005400 	.word	0x40005400

08002164 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	463b      	mov	r3, r7
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002180:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <MX_TIM2_Init+0x98>)
 8002182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002186:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6300;
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <MX_TIM2_Init+0x98>)
 800218a:	f641 029c 	movw	r2, #6300	; 0x189c
 800218e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <MX_TIM2_Init+0x98>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <MX_TIM2_Init+0x98>)
 8002198:	f242 7210 	movw	r2, #10000	; 0x2710
 800219c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <MX_TIM2_Init+0x98>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <MX_TIM2_Init+0x98>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021aa:	4814      	ldr	r0, [pc, #80]	; (80021fc <MX_TIM2_Init+0x98>)
 80021ac:	f003 fbde 	bl	800596c <HAL_TIM_Base_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80021b6:	f000 fabf 	bl	8002738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021c0:	f107 0308 	add.w	r3, r7, #8
 80021c4:	4619      	mov	r1, r3
 80021c6:	480d      	ldr	r0, [pc, #52]	; (80021fc <MX_TIM2_Init+0x98>)
 80021c8:	f003 ff32 	bl	8006030 <HAL_TIM_ConfigClockSource>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80021d2:	f000 fab1 	bl	8002738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d6:	2300      	movs	r3, #0
 80021d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021de:	463b      	mov	r3, r7
 80021e0:	4619      	mov	r1, r3
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <MX_TIM2_Init+0x98>)
 80021e4:	f004 fab0 	bl	8006748 <HAL_TIMEx_MasterConfigSynchronization>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80021ee:	f000 faa3 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200002ac 	.word	0x200002ac

08002200 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08e      	sub	sp, #56	; 0x38
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002214:	f107 0320 	add.w	r3, r7, #32
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
 800222c:	615a      	str	r2, [r3, #20]
 800222e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002230:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <MX_TIM3_Init+0xe4>)
 8002232:	4a2d      	ldr	r2, [pc, #180]	; (80022e8 <MX_TIM3_Init+0xe8>)
 8002234:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8002236:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <MX_TIM3_Init+0xe4>)
 8002238:	223f      	movs	r2, #63	; 0x3f
 800223a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223c:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <MX_TIM3_Init+0xe4>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <MX_TIM3_Init+0xe4>)
 8002244:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002248:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <MX_TIM3_Init+0xe4>)
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002250:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <MX_TIM3_Init+0xe4>)
 8002252:	2200      	movs	r2, #0
 8002254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002256:	4823      	ldr	r0, [pc, #140]	; (80022e4 <MX_TIM3_Init+0xe4>)
 8002258:	f003 fb88 	bl	800596c <HAL_TIM_Base_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002262:	f000 fa69 	bl	8002738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800226c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002270:	4619      	mov	r1, r3
 8002272:	481c      	ldr	r0, [pc, #112]	; (80022e4 <MX_TIM3_Init+0xe4>)
 8002274:	f003 fedc 	bl	8006030 <HAL_TIM_ConfigClockSource>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800227e:	f000 fa5b 	bl	8002738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002282:	4818      	ldr	r0, [pc, #96]	; (80022e4 <MX_TIM3_Init+0xe4>)
 8002284:	f003 fc14 	bl	8005ab0 <HAL_TIM_PWM_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800228e:	f000 fa53 	bl	8002738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800229a:	f107 0320 	add.w	r3, r7, #32
 800229e:	4619      	mov	r1, r3
 80022a0:	4810      	ldr	r0, [pc, #64]	; (80022e4 <MX_TIM3_Init+0xe4>)
 80022a2:	f004 fa51 	bl	8006748 <HAL_TIMEx_MasterConfigSynchronization>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80022ac:	f000 fa44 	bl	8002738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022b0:	2360      	movs	r3, #96	; 0x60
 80022b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	2200      	movs	r2, #0
 80022c4:	4619      	mov	r1, r3
 80022c6:	4807      	ldr	r0, [pc, #28]	; (80022e4 <MX_TIM3_Init+0xe4>)
 80022c8:	f003 fdf4 	bl	8005eb4 <HAL_TIM_PWM_ConfigChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80022d2:	f000 fa31 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022d6:	4803      	ldr	r0, [pc, #12]	; (80022e4 <MX_TIM3_Init+0xe4>)
 80022d8:	f000 fb20 	bl	800291c <HAL_TIM_MspPostInit>

}
 80022dc:	bf00      	nop
 80022de:	3738      	adds	r7, #56	; 0x38
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200002f4 	.word	0x200002f4
 80022e8:	40000400 	.word	0x40000400

080022ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_USART2_UART_Init+0x4c>)
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <MX_USART2_UART_Init+0x50>)
 80022f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <MX_USART2_UART_Init+0x4c>)
 80022f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <MX_USART2_UART_Init+0x4c>)
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <MX_USART2_UART_Init+0x4c>)
 8002306:	2200      	movs	r2, #0
 8002308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <MX_USART2_UART_Init+0x4c>)
 800230c:	2200      	movs	r2, #0
 800230e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <MX_USART2_UART_Init+0x4c>)
 8002312:	220c      	movs	r2, #12
 8002314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <MX_USART2_UART_Init+0x4c>)
 8002318:	2200      	movs	r2, #0
 800231a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <MX_USART2_UART_Init+0x4c>)
 800231e:	2200      	movs	r2, #0
 8002320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <MX_USART2_UART_Init+0x4c>)
 8002324:	f004 fa80 	bl	8006828 <HAL_UART_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800232e:	f000 fa03 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	2000033c 	.word	0x2000033c
 800233c:	40004400 	.word	0x40004400

08002340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002346:	f107 0310 	add.w	r3, r7, #16
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002354:	4b2d      	ldr	r3, [pc, #180]	; (800240c <MX_GPIO_Init+0xcc>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	4a2c      	ldr	r2, [pc, #176]	; (800240c <MX_GPIO_Init+0xcc>)
 800235a:	f043 0310 	orr.w	r3, r3, #16
 800235e:	6193      	str	r3, [r2, #24]
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <MX_GPIO_Init+0xcc>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <MX_GPIO_Init+0xcc>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	4a26      	ldr	r2, [pc, #152]	; (800240c <MX_GPIO_Init+0xcc>)
 8002372:	f043 0320 	orr.w	r3, r3, #32
 8002376:	6193      	str	r3, [r2, #24]
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <MX_GPIO_Init+0xcc>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <MX_GPIO_Init+0xcc>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4a20      	ldr	r2, [pc, #128]	; (800240c <MX_GPIO_Init+0xcc>)
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	6193      	str	r3, [r2, #24]
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <MX_GPIO_Init+0xcc>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <MX_GPIO_Init+0xcc>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	4a1a      	ldr	r2, [pc, #104]	; (800240c <MX_GPIO_Init+0xcc>)
 80023a2:	f043 0308 	orr.w	r3, r3, #8
 80023a6:	6193      	str	r3, [r2, #24]
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <MX_GPIO_Init+0xcc>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2120      	movs	r1, #32
 80023b8:	4815      	ldr	r0, [pc, #84]	; (8002410 <MX_GPIO_Init+0xd0>)
 80023ba:	f001 fd0d 	bl	8003dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <MX_GPIO_Init+0xd4>)
 80023c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	4619      	mov	r1, r3
 80023d2:	4811      	ldr	r0, [pc, #68]	; (8002418 <MX_GPIO_Init+0xd8>)
 80023d4:	f001 fb7c 	bl	8003ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023d8:	2320      	movs	r3, #32
 80023da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023dc:	2301      	movs	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2302      	movs	r3, #2
 80023e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	4619      	mov	r1, r3
 80023ee:	4808      	ldr	r0, [pc, #32]	; (8002410 <MX_GPIO_Init+0xd0>)
 80023f0:	f001 fb6e 	bl	8003ad0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	2028      	movs	r0, #40	; 0x28
 80023fa:	f001 fa82 	bl	8003902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023fe:	2028      	movs	r0, #40	; 0x28
 8002400:	f001 fa9b 	bl	800393a <HAL_NVIC_EnableIRQ>

}
 8002404:	bf00      	nop
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	40010800 	.word	0x40010800
 8002414:	10110000 	.word	0x10110000
 8002418:	40011000 	.word	0x40011000

0800241c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// CONST measurement and data sending every 1s
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800241c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002420:	b08e      	sub	sp, #56	; 0x38
 8002422:	af08      	add	r7, sp, #32
 8002424:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242e:	f040 80bc 	bne.w	80025aa <HAL_TIM_PeriodElapsedCallback+0x18e>
		BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8002432:	4960      	ldr	r1, [pc, #384]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002434:	4860      	ldr	r0, [pc, #384]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002436:	f7ff fa71 	bl	800191c <BMP280_ReadTemperatureAndPressure>
		if (force_control[0] == 1){
 800243a:	4b60      	ldr	r3, [pc, #384]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d103      	bne.n	800244a <HAL_TIM_PeriodElapsedCallback+0x2e>
			HAL_ADC_Start_IT(&hadc1);
 8002442:	485f      	ldr	r0, [pc, #380]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002444:	f000 fe5c 	bl	8003100 <HAL_ADC_Start_IT>
 8002448:	e065      	b.n	8002516 <HAL_TIM_PeriodElapsedCallback+0xfa>
		} else {
			error = absf(temp_requested - temperature);
 800244a:	4b5e      	ldr	r3, [pc, #376]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a5a      	ldr	r2, [pc, #360]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fb8b 	bl	8000b70 <__aeabi_fsub>
 800245a:	4603      	mov	r3, r0
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fd55 	bl	8001f0c <absf>
 8002462:	4603      	mov	r3, r0
 8002464:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002466:	6013      	str	r3, [r2, #0]
			if (error == 0.0){
 8002468:	4b57      	ldr	r3, [pc, #348]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f04f 0100 	mov.w	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe fe1b 	bl	80010ac <__aeabi_fcmpeq>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_TIM_PeriodElapsedCallback+0x68>
				duty = 0;
 800247c:	4b53      	ldr	r3, [pc, #332]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e048      	b.n	8002516 <HAL_TIM_PeriodElapsedCallback+0xfa>
			}else {
				duty = (uint32_t) 100 * arm_pid_f32(&PID_controller, error);
 8002484:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a51      	ldr	r2, [pc, #324]	; (80025d0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800248a:	617a      	str	r2, [r7, #20]
 800248c:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6939      	ldr	r1, [r7, #16]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fc75 	bl	8000d84 <__aeabi_fmul>
 800249a:	4603      	mov	r3, r0
 800249c:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	4619      	mov	r1, r3
 80024a8:	4610      	mov	r0, r2
 80024aa:	f7fe fc6b 	bl	8000d84 <__aeabi_fmul>
 80024ae:	4603      	mov	r3, r0
    out = (S->A0 * in) +
 80024b0:	4619      	mov	r1, r3
 80024b2:	4620      	mov	r0, r4
 80024b4:	f7fe fb5e 	bl	8000b74 <__addsf3>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	4619      	mov	r1, r3
 80024c6:	4610      	mov	r0, r2
 80024c8:	f7fe fc5c 	bl	8000d84 <__aeabi_fmul>
 80024cc:	4603      	mov	r3, r0
 80024ce:	4619      	mov	r1, r3
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7fe fb4f 	bl	8000b74 <__addsf3>
 80024d6:	4603      	mov	r3, r0
 80024d8:	461a      	mov	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	695b      	ldr	r3, [r3, #20]
    out = (S->A0 * in) +
 80024de:	4619      	mov	r1, r3
 80024e0:	4610      	mov	r0, r2
 80024e2:	f7fe fb47 	bl	8000b74 <__addsf3>
 80024e6:	4603      	mov	r3, r0
 80024e8:	60fb      	str	r3, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4934      	ldr	r1, [pc, #208]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fc3e 	bl	8000d84 <__aeabi_fmul>
 8002508:	4603      	mov	r3, r0
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fe16 	bl	800113c <__aeabi_f2uiz>
 8002510:	4603      	mov	r3, r0
 8002512:	4a2e      	ldr	r2, [pc, #184]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002514:	6013      	str	r3, [r2, #0]
			}
		}
		saturation(duty);
 8002516:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fce2 	bl	8001ee4 <saturation>

		//UART data sending for logging
		snprintf(text, sizeof(text), "{\"temperature\":\"%.2f\",\"ref\":\"%.2f\",\"u\":\"%.f\",\"error\":\"%.4f\"}\n\r", temperature, temp_requested,(float) 0.1 * duty, error);
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fd ff7f 	bl	8000428 <__aeabi_f2d>
 800252a:	4604      	mov	r4, r0
 800252c:	460d      	mov	r5, r1
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd ff78 	bl	8000428 <__aeabi_f2d>
 8002538:	4680      	mov	r8, r0
 800253a:	4689      	mov	r9, r1
 800253c:	4b23      	ldr	r3, [pc, #140]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fbc7 	bl	8000cd4 <__aeabi_ui2f>
 8002546:	4603      	mov	r3, r0
 8002548:	4923      	ldr	r1, [pc, #140]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fc1a 	bl	8000d84 <__aeabi_fmul>
 8002550:	4603      	mov	r3, r0
 8002552:	4618      	mov	r0, r3
 8002554:	f7fd ff68 	bl	8000428 <__aeabi_f2d>
 8002558:	4682      	mov	sl, r0
 800255a:	468b      	mov	fp, r1
 800255c:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fd ff61 	bl	8000428 <__aeabi_f2d>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800256e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002572:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002576:	e9cd 4500 	strd	r4, r5, [sp]
 800257a:	4a18      	ldr	r2, [pc, #96]	; (80025dc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800257c:	2164      	movs	r1, #100	; 0x64
 800257e:	4818      	ldr	r0, [pc, #96]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002580:	f005 fb40 	bl	8007c04 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)text, strlen(text), 1000);
 8002584:	4816      	ldr	r0, [pc, #88]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002586:	f7fd fde3 	bl	8000150 <strlen>
 800258a:	4603      	mov	r3, r0
 800258c:	b29a      	uxth	r2, r3
 800258e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002592:	4913      	ldr	r1, [pc, #76]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002594:	4813      	ldr	r0, [pc, #76]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002596:	f004 f994 	bl	80068c2 <HAL_UART_Transmit>
		text[0] = 0;
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty);
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a09      	ldr	r2, [pc, #36]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80025aa:	bf00      	nop
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b4:	20000390 	.word	0x20000390
 80025b8:	20000380 	.word	0x20000380
 80025bc:	2000038c 	.word	0x2000038c
 80025c0:	20000228 	.word	0x20000228
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000384 	.word	0x20000384
 80025cc:	20000004 	.word	0x20000004
 80025d0:	200003fc 	.word	0x200003fc
 80025d4:	42c80000 	.word	0x42c80000
 80025d8:	3dcccccd 	.word	0x3dcccccd
 80025dc:	0800bfc8 	.word	0x0800bfc8
 80025e0:	20000394 	.word	0x20000394
 80025e4:	2000033c 	.word	0x2000033c
 80025e8:	200002f4 	.word	0x200002f4
 80025ec:	00000000 	.word	0x00000000

080025f0 <HAL_UART_RxCpltCallback>:

// set temperature via UART implementation
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	float given = 0.01 * atof(input);
 80025f8:	4821      	ldr	r0, [pc, #132]	; (8002680 <HAL_UART_RxCpltCallback+0x90>)
 80025fa:	f004 fe6d 	bl	80072d8 <atof>
 80025fe:	a31c      	add	r3, pc, #112	; (adr r3, 8002670 <HAL_UART_RxCpltCallback+0x80>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fd ff68 	bl	80004d8 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	f7fe fa5a 	bl	8000ac8 <__aeabi_d2f>
 8002614:	4603      	mov	r3, r0
 8002616:	60fb      	str	r3, [r7, #12]

	if (given > 99.985){
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7fd ff05 	bl	8000428 <__aeabi_f2d>
 800261e:	a316      	add	r3, pc, #88	; (adr r3, 8002678 <HAL_UART_RxCpltCallback+0x88>)
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	f7fe f9e8 	bl	80009f8 <__aeabi_dcmpgt>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_UART_RxCpltCallback+0x56>
		if (force_control[0] == 1){
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <HAL_UART_RxCpltCallback+0x94>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d103      	bne.n	800263e <HAL_UART_RxCpltCallback+0x4e>
			force_control[0] = 0;
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <HAL_UART_RxCpltCallback+0x94>)
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	e00e      	b.n	800265c <HAL_UART_RxCpltCallback+0x6c>
		}else{
			force_control[0] = 1;
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_UART_RxCpltCallback+0x94>)
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e00a      	b.n	800265c <HAL_UART_RxCpltCallback+0x6c>
		}
	}else if (given > 0.0){
 8002646:	f04f 0100 	mov.w	r1, #0
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f7fe fd56 	bl	80010fc <__aeabi_fcmpgt>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_UART_RxCpltCallback+0x6c>
		temp_requested = given;
 8002656:	4a0c      	ldr	r2, [pc, #48]	; (8002688 <HAL_UART_RxCpltCallback+0x98>)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6013      	str	r3, [r2, #0]
	}

	HAL_UART_Receive_IT(&huart2, (uint8_t*)input, 4);
 800265c:	2204      	movs	r2, #4
 800265e:	4908      	ldr	r1, [pc, #32]	; (8002680 <HAL_UART_RxCpltCallback+0x90>)
 8002660:	480a      	ldr	r0, [pc, #40]	; (800268c <HAL_UART_RxCpltCallback+0x9c>)
 8002662:	f004 f9c0 	bl	80069e6 <HAL_UART_Receive_IT>
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	47ae147b 	.word	0x47ae147b
 8002674:	3f847ae1 	.word	0x3f847ae1
 8002678:	3d70a3d7 	.word	0x3d70a3d7
 800267c:	4058ff0a 	.word	0x4058ff0a
 8002680:	200003f8 	.word	0x200003f8
 8002684:	2000038c 	.word	0x2000038c
 8002688:	20000000 	.word	0x20000000
 800268c:	2000033c 	.word	0x2000033c

08002690 <HAL_ADC_ConvCpltCallback>:

// distance based control of PWM duty [LET THE FORCE BE WITH YOU MODE]
void HAL_ADC_ConvCpltCallback ( ADC_HandleTypeDef * hadc ){
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	4820      	ldr	r0, [pc, #128]	; (8002720 <HAL_ADC_ConvCpltCallback+0x90>)
 800269e:	f000 fc29 	bl	8002ef4 <HAL_ADC_PollForConversion>

	float AdcValue = HAL_ADC_GetValue(&hadc1);
 80026a2:	481f      	ldr	r0, [pc, #124]	; (8002720 <HAL_ADC_ConvCpltCallback+0x90>)
 80026a4:	f000 fde2 	bl	800326c <HAL_ADC_GetValue>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fb12 	bl	8000cd4 <__aeabi_ui2f>
 80026b0:	4603      	mov	r3, r0
 80026b2:	60fb      	str	r3, [r7, #12]

	AdcValue /=  1000;
 80026b4:	491b      	ldr	r1, [pc, #108]	; (8002724 <HAL_ADC_ConvCpltCallback+0x94>)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f7fe fc18 	bl	8000eec <__aeabi_fdiv>
 80026bc:	4603      	mov	r3, r0
 80026be:	60fb      	str	r3, [r7, #12]
	distance = 27.82 * powf(AdcValue, -1.081);
 80026c0:	4919      	ldr	r1, [pc, #100]	; (8002728 <HAL_ADC_ConvCpltCallback+0x98>)
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f008 fff6 	bl	800b6b4 <powf>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd feac 	bl	8000428 <__aeabi_f2d>
 80026d0:	a311      	add	r3, pc, #68	; (adr r3, 8002718 <HAL_ADC_ConvCpltCallback+0x88>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f7fd feff 	bl	80004d8 <__aeabi_dmul>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	f7fe f9f1 	bl	8000ac8 <__aeabi_d2f>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4a10      	ldr	r2, [pc, #64]	; (800272c <HAL_ADC_ConvCpltCallback+0x9c>)
 80026ea:	6013      	str	r3, [r2, #0]

	duty = distance * 25;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <HAL_ADC_ConvCpltCallback+0x9c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	490f      	ldr	r1, [pc, #60]	; (8002730 <HAL_ADC_ConvCpltCallback+0xa0>)
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fb46 	bl	8000d84 <__aeabi_fmul>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fd1e 	bl	800113c <__aeabi_f2uiz>
 8002700:	4603      	mov	r3, r0
 8002702:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002704:	6013      	str	r3, [r2, #0]
	saturation(duty);
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fbea 	bl	8001ee4 <saturation>
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	851eb852 	.word	0x851eb852
 800271c:	403bd1eb 	.word	0x403bd1eb
 8002720:	20000228 	.word	0x20000228
 8002724:	447a0000 	.word	0x447a0000
 8002728:	bf8a5e35 	.word	0xbf8a5e35
 800272c:	20000388 	.word	0x20000388
 8002730:	41c80000 	.word	0x41c80000
 8002734:	20000004 	.word	0x20000004

08002738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800273c:	b672      	cpsid	i
}
 800273e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002740:	e7fe      	b.n	8002740 <Error_Handler+0x8>
	...

08002744 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <HAL_MspInit+0x5c>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <HAL_MspInit+0x5c>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6193      	str	r3, [r2, #24]
 8002756:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_MspInit+0x5c>)
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <HAL_MspInit+0x5c>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <HAL_MspInit+0x5c>)
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276c:	61d3      	str	r3, [r2, #28]
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <HAL_MspInit+0x5c>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_MspInit+0x60>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <HAL_MspInit+0x60>)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40010000 	.word	0x40010000

080027a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a18      	ldr	r2, [pc, #96]	; (8002824 <HAL_ADC_MspInit+0x7c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d129      	bne.n	800281c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027c8:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_ADC_MspInit+0x80>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	4a16      	ldr	r2, [pc, #88]	; (8002828 <HAL_ADC_MspInit+0x80>)
 80027ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d2:	6193      	str	r3, [r2, #24]
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_ADC_MspInit+0x80>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_ADC_MspInit+0x80>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	4a10      	ldr	r2, [pc, #64]	; (8002828 <HAL_ADC_MspInit+0x80>)
 80027e6:	f043 0304 	orr.w	r3, r3, #4
 80027ea:	6193      	str	r3, [r2, #24]
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HAL_ADC_MspInit+0x80>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027f8:	2310      	movs	r3, #16
 80027fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027fc:	2303      	movs	r3, #3
 80027fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002800:	f107 0310 	add.w	r3, r7, #16
 8002804:	4619      	mov	r1, r3
 8002806:	4809      	ldr	r0, [pc, #36]	; (800282c <HAL_ADC_MspInit+0x84>)
 8002808:	f001 f962 	bl	8003ad0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	2100      	movs	r1, #0
 8002810:	2012      	movs	r0, #18
 8002812:	f001 f876 	bl	8003902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002816:	2012      	movs	r0, #18
 8002818:	f001 f88f 	bl	800393a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800281c:	bf00      	nop
 800281e:	3720      	adds	r7, #32
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40012400 	.word	0x40012400
 8002828:	40021000 	.word	0x40021000
 800282c:	40010800 	.word	0x40010800

08002830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0310 	add.w	r3, r7, #16
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a15      	ldr	r2, [pc, #84]	; (80028a0 <HAL_I2C_MspInit+0x70>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d123      	bne.n	8002898 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <HAL_I2C_MspInit+0x74>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4a13      	ldr	r2, [pc, #76]	; (80028a4 <HAL_I2C_MspInit+0x74>)
 8002856:	f043 0308 	orr.w	r3, r3, #8
 800285a:	6193      	str	r3, [r2, #24]
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_I2C_MspInit+0x74>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002868:	23c0      	movs	r3, #192	; 0xc0
 800286a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800286c:	2312      	movs	r3, #18
 800286e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	4619      	mov	r1, r3
 800287a:	480b      	ldr	r0, [pc, #44]	; (80028a8 <HAL_I2C_MspInit+0x78>)
 800287c:	f001 f928 	bl	8003ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_I2C_MspInit+0x74>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <HAL_I2C_MspInit+0x74>)
 8002886:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800288a:	61d3      	str	r3, [r2, #28]
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_I2C_MspInit+0x74>)
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002898:	bf00      	nop
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40005400 	.word	0x40005400
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40010c00 	.word	0x40010c00

080028ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028bc:	d114      	bne.n	80028e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_TIM_Base_MspInit+0x68>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4a14      	ldr	r2, [pc, #80]	; (8002914 <HAL_TIM_Base_MspInit+0x68>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	61d3      	str	r3, [r2, #28]
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_TIM_Base_MspInit+0x68>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2100      	movs	r1, #0
 80028da:	201c      	movs	r0, #28
 80028dc:	f001 f811 	bl	8003902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028e0:	201c      	movs	r0, #28
 80028e2:	f001 f82a 	bl	800393a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028e6:	e010      	b.n	800290a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <HAL_TIM_Base_MspInit+0x6c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10b      	bne.n	800290a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_TIM_Base_MspInit+0x68>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	4a07      	ldr	r2, [pc, #28]	; (8002914 <HAL_TIM_Base_MspInit+0x68>)
 80028f8:	f043 0302 	orr.w	r3, r3, #2
 80028fc:	61d3      	str	r3, [r2, #28]
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_TIM_Base_MspInit+0x68>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	40000400 	.word	0x40000400

0800291c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0310 	add.w	r3, r7, #16
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a0f      	ldr	r2, [pc, #60]	; (8002974 <HAL_TIM_MspPostInit+0x58>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d117      	bne.n	800296c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293c:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_TIM_MspPostInit+0x5c>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <HAL_TIM_MspPostInit+0x5c>)
 8002942:	f043 0304 	orr.w	r3, r3, #4
 8002946:	6193      	str	r3, [r2, #24]
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_TIM_MspPostInit+0x5c>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002954:	2340      	movs	r3, #64	; 0x40
 8002956:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	2302      	movs	r3, #2
 800295e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	f107 0310 	add.w	r3, r7, #16
 8002964:	4619      	mov	r1, r3
 8002966:	4805      	ldr	r0, [pc, #20]	; (800297c <HAL_TIM_MspPostInit+0x60>)
 8002968:	f001 f8b2 	bl	8003ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800296c:	bf00      	nop
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40000400 	.word	0x40000400
 8002978:	40021000 	.word	0x40021000
 800297c:	40010800 	.word	0x40010800

08002980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0310 	add.w	r3, r7, #16
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <HAL_UART_MspInit+0x80>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d12b      	bne.n	80029f8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029a0:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <HAL_UART_MspInit+0x84>)
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <HAL_UART_MspInit+0x84>)
 80029a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029aa:	61d3      	str	r3, [r2, #28]
 80029ac:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <HAL_UART_MspInit+0x84>)
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_UART_MspInit+0x84>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a11      	ldr	r2, [pc, #68]	; (8002a04 <HAL_UART_MspInit+0x84>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <HAL_UART_MspInit+0x84>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029d0:	230c      	movs	r3, #12
 80029d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d4:	2302      	movs	r3, #2
 80029d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d8:	2302      	movs	r3, #2
 80029da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	f107 0310 	add.w	r3, r7, #16
 80029e0:	4619      	mov	r1, r3
 80029e2:	4809      	ldr	r0, [pc, #36]	; (8002a08 <HAL_UART_MspInit+0x88>)
 80029e4:	f001 f874 	bl	8003ad0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029e8:	2200      	movs	r2, #0
 80029ea:	2100      	movs	r1, #0
 80029ec:	2026      	movs	r0, #38	; 0x26
 80029ee:	f000 ff88 	bl	8003902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029f2:	2026      	movs	r0, #38	; 0x26
 80029f4:	f000 ffa1 	bl	800393a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029f8:	bf00      	nop
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40004400 	.word	0x40004400
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40010800 	.word	0x40010800

08002a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a10:	e7fe      	b.n	8002a10 <NMI_Handler+0x4>

08002a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a16:	e7fe      	b.n	8002a16 <HardFault_Handler+0x4>

08002a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <MemManage_Handler+0x4>

08002a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <BusFault_Handler+0x4>

08002a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <UsageFault_Handler+0x4>

08002a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a52:	f000 f95b 	bl	8002d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <ADC1_2_IRQHandler+0x10>)
 8002a62:	f000 fc0f 	bl	8003284 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000228 	.word	0x20000228

08002a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a74:	4802      	ldr	r0, [pc, #8]	; (8002a80 <TIM2_IRQHandler+0x10>)
 8002a76:	f003 f915 	bl	8005ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200002ac 	.word	0x200002ac

08002a84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a88:	4802      	ldr	r0, [pc, #8]	; (8002a94 <USART2_IRQHandler+0x10>)
 8002a8a:	f003 ffdd 	bl	8006a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2000033c 	.word	0x2000033c

08002a98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002a9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002aa0:	f001 f9b2 	bl	8003e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return 1;
 8002aac:	2301      	movs	r3, #1
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <_kill>:

int _kill(int pid, int sig)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ac0:	f004 fc0e 	bl	80072e0 <__errno>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2216      	movs	r2, #22
 8002ac8:	601a      	str	r2, [r3, #0]
  return -1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <_exit>:

void _exit (int status)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ade:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ffe7 	bl	8002ab6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ae8:	e7fe      	b.n	8002ae8 <_exit+0x12>

08002aea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e00a      	b.n	8002b12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002afc:	f3af 8000 	nop.w
 8002b00:	4601      	mov	r1, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	60ba      	str	r2, [r7, #8]
 8002b08:	b2ca      	uxtb	r2, r1
 8002b0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	dbf0      	blt.n	8002afc <_read+0x12>
  }

  return len;
 8002b1a:	687b      	ldr	r3, [r7, #4]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	e009      	b.n	8002b4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	60ba      	str	r2, [r7, #8]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3301      	adds	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	dbf1      	blt.n	8002b36 <_write+0x12>
  }
  return len;
 8002b52:	687b      	ldr	r3, [r7, #4]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_close>:

int _close(int file)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b82:	605a      	str	r2, [r3, #4]
  return 0;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <_isatty>:

int _isatty(int file)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b98:	2301      	movs	r3, #1
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc4:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <_sbrk+0x5c>)
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <_sbrk+0x60>)
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <_sbrk+0x64>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d102      	bne.n	8002bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd8:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <_sbrk+0x64>)
 8002bda:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <_sbrk+0x68>)
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <_sbrk+0x64>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d207      	bcs.n	8002bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bec:	f004 fb78 	bl	80072e0 <__errno>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	e009      	b.n	8002c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <_sbrk+0x64>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <_sbrk+0x64>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <_sbrk+0x64>)
 8002c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20005000 	.word	0x20005000
 8002c1c:	00000400 	.word	0x00000400
 8002c20:	20000420 	.word	0x20000420
 8002c24:	20000438 	.word	0x20000438

08002c28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c34:	480c      	ldr	r0, [pc, #48]	; (8002c68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c36:	490d      	ldr	r1, [pc, #52]	; (8002c6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c38:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c3c:	e002      	b.n	8002c44 <LoopCopyDataInit>

08002c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c42:	3304      	adds	r3, #4

08002c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c48:	d3f9      	bcc.n	8002c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c4c:	4c0a      	ldr	r4, [pc, #40]	; (8002c78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c50:	e001      	b.n	8002c56 <LoopFillZerobss>

08002c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c54:	3204      	adds	r2, #4

08002c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c58:	d3fb      	bcc.n	8002c52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c5a:	f7ff ffe5 	bl	8002c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c5e:	f004 fb45 	bl	80072ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c62:	f7ff f973 	bl	8001f4c <main>
  bx lr
 8002c66:	4770      	bx	lr
  ldr r0, =_sdata
 8002c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c6c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002c70:	0800c504 	.word	0x0800c504
  ldr r2, =_sbss
 8002c74:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002c78:	20000438 	.word	0x20000438

08002c7c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c7c:	e7fe      	b.n	8002c7c <CAN1_RX1_IRQHandler>
	...

08002c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_Init+0x28>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <HAL_Init+0x28>)
 8002c8a:	f043 0310 	orr.w	r3, r3, #16
 8002c8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c90:	2003      	movs	r0, #3
 8002c92:	f000 fe2b 	bl	80038ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c96:	2000      	movs	r0, #0
 8002c98:	f000 f808 	bl	8002cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c9c:	f7ff fd52 	bl	8002744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40022000 	.word	0x40022000

08002cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_InitTick+0x54>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_InitTick+0x58>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fe43 	bl	8003956 <HAL_SYSTICK_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e00e      	b.n	8002cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	d80a      	bhi.n	8002cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce8:	f000 fe0b 	bl	8003902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cec:	4a06      	ldr	r2, [pc, #24]	; (8002d08 <HAL_InitTick+0x5c>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e000      	b.n	8002cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000008 	.word	0x20000008
 8002d04:	20000010 	.word	0x20000010
 8002d08:	2000000c 	.word	0x2000000c

08002d0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_IncTick+0x1c>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <HAL_IncTick+0x20>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	4a03      	ldr	r2, [pc, #12]	; (8002d2c <HAL_IncTick+0x20>)
 8002d1e:	6013      	str	r3, [r2, #0]
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	20000010 	.word	0x20000010
 8002d2c:	20000424 	.word	0x20000424

08002d30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return uwTick;
 8002d34:	4b02      	ldr	r3, [pc, #8]	; (8002d40 <HAL_GetTick+0x10>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	20000424 	.word	0x20000424

08002d44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0be      	b.n	8002ee4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff fd10 	bl	80027a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fc99 	bl	80036c0 <ADC_ConversionStop_Disable>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 8099 	bne.w	8002ed2 <HAL_ADC_Init+0x18e>
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f040 8095 	bne.w	8002ed2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002db0:	f023 0302 	bic.w	r3, r3, #2
 8002db4:	f043 0202 	orr.w	r2, r3, #2
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dc4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7b1b      	ldrb	r3, [r3, #12]
 8002dca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dcc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ddc:	d003      	beq.n	8002de6 <HAL_ADC_Init+0xa2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d102      	bne.n	8002dec <HAL_ADC_Init+0xa8>
 8002de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dea:	e000      	b.n	8002dee <HAL_ADC_Init+0xaa>
 8002dec:	2300      	movs	r3, #0
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	7d1b      	ldrb	r3, [r3, #20]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d119      	bne.n	8002e30 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7b1b      	ldrb	r3, [r3, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	035a      	lsls	r2, r3, #13
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	e00b      	b.n	8002e30 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	f043 0201 	orr.w	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_ADC_Init+0x1a8>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e60:	d003      	beq.n	8002e6a <HAL_ADC_Init+0x126>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d104      	bne.n	8002e74 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	051b      	lsls	r3, r3, #20
 8002e72:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <HAL_ADC_Init+0x1ac>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d10b      	bne.n	8002eb0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002eae:	e018      	b.n	8002ee2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	f023 0312 	bic.w	r3, r3, #18
 8002eb8:	f043 0210 	orr.w	r2, r3, #16
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	f043 0201 	orr.w	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ed0:	e007      	b.n	8002ee2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	f043 0210 	orr.w	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	ffe1f7fd 	.word	0xffe1f7fd
 8002ef0:	ff1f0efe 	.word	0xff1f0efe

08002ef4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f0a:	f7ff ff11 	bl	8002d30 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00b      	beq.n	8002f36 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	f043 0220 	orr.w	r2, r3, #32
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e0d3      	b.n	80030de <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d131      	bne.n	8002fa8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d12a      	bne.n	8002fa8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f52:	e021      	b.n	8002f98 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d01d      	beq.n	8002f98 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <HAL_ADC_PollForConversion+0x7e>
 8002f62:	f7ff fee5 	bl	8002d30 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d212      	bcs.n	8002f98 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10b      	bne.n	8002f98 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	f043 0204 	orr.w	r2, r3, #4
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0a2      	b.n	80030de <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0d6      	beq.n	8002f54 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002fa6:	e070      	b.n	800308a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002fa8:	4b4f      	ldr	r3, [pc, #316]	; (80030e8 <HAL_ADC_PollForConversion+0x1f4>)
 8002faa:	681c      	ldr	r4, [r3, #0]
 8002fac:	2002      	movs	r0, #2
 8002fae:	f002 fc1d 	bl	80057ec <HAL_RCCEx_GetPeriphCLKFreq>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6919      	ldr	r1, [r3, #16]
 8002fbe:	4b4b      	ldr	r3, [pc, #300]	; (80030ec <HAL_ADC_PollForConversion+0x1f8>)
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_ADC_PollForConversion+0x104>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68d9      	ldr	r1, [r3, #12]
 8002fcc:	4b48      	ldr	r3, [pc, #288]	; (80030f0 <HAL_ADC_PollForConversion+0x1fc>)
 8002fce:	400b      	ands	r3, r1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d111      	bne.n	8002ff8 <HAL_ADC_PollForConversion+0x104>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6919      	ldr	r1, [r3, #16]
 8002fda:	4b46      	ldr	r3, [pc, #280]	; (80030f4 <HAL_ADC_PollForConversion+0x200>)
 8002fdc:	400b      	ands	r3, r1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d108      	bne.n	8002ff4 <HAL_ADC_PollForConversion+0x100>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68d9      	ldr	r1, [r3, #12]
 8002fe8:	4b43      	ldr	r3, [pc, #268]	; (80030f8 <HAL_ADC_PollForConversion+0x204>)
 8002fea:	400b      	ands	r3, r1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_PollForConversion+0x100>
 8002ff0:	2314      	movs	r3, #20
 8002ff2:	e020      	b.n	8003036 <HAL_ADC_PollForConversion+0x142>
 8002ff4:	2329      	movs	r3, #41	; 0x29
 8002ff6:	e01e      	b.n	8003036 <HAL_ADC_PollForConversion+0x142>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6919      	ldr	r1, [r3, #16]
 8002ffe:	4b3d      	ldr	r3, [pc, #244]	; (80030f4 <HAL_ADC_PollForConversion+0x200>)
 8003000:	400b      	ands	r3, r1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_ADC_PollForConversion+0x120>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68d9      	ldr	r1, [r3, #12]
 800300c:	4b3a      	ldr	r3, [pc, #232]	; (80030f8 <HAL_ADC_PollForConversion+0x204>)
 800300e:	400b      	ands	r3, r1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00d      	beq.n	8003030 <HAL_ADC_PollForConversion+0x13c>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6919      	ldr	r1, [r3, #16]
 800301a:	4b38      	ldr	r3, [pc, #224]	; (80030fc <HAL_ADC_PollForConversion+0x208>)
 800301c:	400b      	ands	r3, r1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <HAL_ADC_PollForConversion+0x140>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68d9      	ldr	r1, [r3, #12]
 8003028:	4b34      	ldr	r3, [pc, #208]	; (80030fc <HAL_ADC_PollForConversion+0x208>)
 800302a:	400b      	ands	r3, r1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_ADC_PollForConversion+0x140>
 8003030:	2354      	movs	r3, #84	; 0x54
 8003032:	e000      	b.n	8003036 <HAL_ADC_PollForConversion+0x142>
 8003034:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800303c:	e021      	b.n	8003082 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d01a      	beq.n	800307c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <HAL_ADC_PollForConversion+0x168>
 800304c:	f7ff fe70 	bl	8002d30 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d20f      	bcs.n	800307c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	429a      	cmp	r2, r3
 8003062:	d90b      	bls.n	800307c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	f043 0204 	orr.w	r2, r3, #4
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e030      	b.n	80030de <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3301      	adds	r3, #1
 8003080:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	429a      	cmp	r2, r3
 8003088:	d8d9      	bhi.n	800303e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f06f 0212 	mvn.w	r2, #18
 8003092:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030ae:	d115      	bne.n	80030dc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d111      	bne.n	80030dc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d105      	bne.n	80030dc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000008 	.word	0x20000008
 80030ec:	24924924 	.word	0x24924924
 80030f0:	00924924 	.word	0x00924924
 80030f4:	12492492 	.word	0x12492492
 80030f8:	00492492 	.word	0x00492492
 80030fc:	00249249 	.word	0x00249249

08003100 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_ADC_Start_IT+0x1a>
 8003116:	2302      	movs	r3, #2
 8003118:	e0a0      	b.n	800325c <HAL_ADC_Start_IT+0x15c>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fa72 	bl	800360c <ADC_Enable>
 8003128:	4603      	mov	r3, r0
 800312a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 808f 	bne.w	8003252 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a45      	ldr	r2, [pc, #276]	; (8003264 <HAL_ADC_Start_IT+0x164>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d105      	bne.n	800315e <HAL_ADC_Start_IT+0x5e>
 8003152:	4b45      	ldr	r3, [pc, #276]	; (8003268 <HAL_ADC_Start_IT+0x168>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d115      	bne.n	800318a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003174:	2b00      	cmp	r3, #0
 8003176:	d026      	beq.n	80031c6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003180:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003188:	e01d      	b.n	80031c6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a33      	ldr	r2, [pc, #204]	; (8003268 <HAL_ADC_Start_IT+0x168>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <HAL_ADC_Start_IT+0xaa>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a2f      	ldr	r2, [pc, #188]	; (8003264 <HAL_ADC_Start_IT+0x164>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d10d      	bne.n	80031c6 <HAL_ADC_Start_IT+0xc6>
 80031aa:	4b2f      	ldr	r3, [pc, #188]	; (8003268 <HAL_ADC_Start_IT+0x168>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d006      	beq.n	80031e0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	f023 0206 	bic.w	r2, r3, #6
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80031de:	e002      	b.n	80031e6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f06f 0202 	mvn.w	r2, #2
 80031f6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0220 	orr.w	r2, r2, #32
 8003206:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003212:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003216:	d113      	bne.n	8003240 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800321c:	4a11      	ldr	r2, [pc, #68]	; (8003264 <HAL_ADC_Start_IT+0x164>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d105      	bne.n	800322e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <HAL_ADC_Start_IT+0x168>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800322a:	2b00      	cmp	r3, #0
 800322c:	d108      	bne.n	8003240 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	e00c      	b.n	800325a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	e003      	b.n	800325a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40012800 	.word	0x40012800
 8003268:	40012400 	.word	0x40012400

0800326c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b20      	cmp	r3, #32
 8003298:	d140      	bne.n	800331c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d139      	bne.n	800331c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d105      	bne.n	80032c0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032ce:	d11d      	bne.n	800330c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d119      	bne.n	800330c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0220 	bic.w	r2, r2, #32
 80032e6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	f043 0201 	orr.w	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff f9bf 	bl	8002690 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f06f 0212 	mvn.w	r2, #18
 800331a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003326:	2b80      	cmp	r3, #128	; 0x80
 8003328:	d14f      	bne.n	80033ca <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b04      	cmp	r3, #4
 8003336:	d148      	bne.n	80033ca <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800335a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800335e:	d012      	beq.n	8003386 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800336a:	2b00      	cmp	r3, #0
 800336c:	d125      	bne.n	80033ba <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003378:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800337c:	d11d      	bne.n	80033ba <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003382:	2b00      	cmp	r3, #0
 8003384:	d119      	bne.n	80033ba <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003394:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d105      	bne.n	80033ba <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f9c1 	bl	8003742 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 020c 	mvn.w	r2, #12
 80033c8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	d114      	bne.n	8003402 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d10d      	bne.n	8003402 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f809 	bl	800340a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0201 	mvn.w	r2, #1
 8003400:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_ADC_ConfigChannel+0x20>
 8003438:	2302      	movs	r3, #2
 800343a:	e0dc      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x1da>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b06      	cmp	r3, #6
 800344a:	d81c      	bhi.n	8003486 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	3b05      	subs	r3, #5
 800345e:	221f      	movs	r2, #31
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	4019      	ands	r1, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	3b05      	subs	r3, #5
 8003478:	fa00 f203 	lsl.w	r2, r0, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	635a      	str	r2, [r3, #52]	; 0x34
 8003484:	e03c      	b.n	8003500 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d81c      	bhi.n	80034c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	3b23      	subs	r3, #35	; 0x23
 80034a0:	221f      	movs	r2, #31
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	4019      	ands	r1, r3
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	3b23      	subs	r3, #35	; 0x23
 80034ba:	fa00 f203 	lsl.w	r2, r0, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	631a      	str	r2, [r3, #48]	; 0x30
 80034c6:	e01b      	b.n	8003500 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	3b41      	subs	r3, #65	; 0x41
 80034da:	221f      	movs	r2, #31
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	4019      	ands	r1, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	3b41      	subs	r3, #65	; 0x41
 80034f4:	fa00 f203 	lsl.w	r2, r0, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b09      	cmp	r3, #9
 8003506:	d91c      	bls.n	8003542 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68d9      	ldr	r1, [r3, #12]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	3b1e      	subs	r3, #30
 800351a:	2207      	movs	r2, #7
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	4019      	ands	r1, r3
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	6898      	ldr	r0, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	3b1e      	subs	r3, #30
 8003534:	fa00 f203 	lsl.w	r2, r0, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	60da      	str	r2, [r3, #12]
 8003540:	e019      	b.n	8003576 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6919      	ldr	r1, [r3, #16]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	2207      	movs	r2, #7
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	4019      	ands	r1, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	6898      	ldr	r0, [r3, #8]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	fa00 f203 	lsl.w	r2, r0, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b10      	cmp	r3, #16
 800357c:	d003      	beq.n	8003586 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003582:	2b11      	cmp	r3, #17
 8003584:	d132      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <HAL_ADC_ConfigChannel+0x1e4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d125      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d126      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80035ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d11a      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035b6:	4b13      	ldr	r3, [pc, #76]	; (8003604 <HAL_ADC_ConfigChannel+0x1e8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a13      	ldr	r2, [pc, #76]	; (8003608 <HAL_ADC_ConfigChannel+0x1ec>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	0c9a      	lsrs	r2, r3, #18
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035cc:	e002      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f9      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x1b2>
 80035da:	e007      	b.n	80035ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	f043 0220 	orr.w	r2, r3, #32
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	40012400 	.word	0x40012400
 8003604:	20000008 	.word	0x20000008
 8003608:	431bde83 	.word	0x431bde83

0800360c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d040      	beq.n	80036ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0201 	orr.w	r2, r2, #1
 8003638:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800363a:	4b1f      	ldr	r3, [pc, #124]	; (80036b8 <ADC_Enable+0xac>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <ADC_Enable+0xb0>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	0c9b      	lsrs	r3, r3, #18
 8003646:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003648:	e002      	b.n	8003650 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	3b01      	subs	r3, #1
 800364e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f9      	bne.n	800364a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003656:	f7ff fb6b 	bl	8002d30 <HAL_GetTick>
 800365a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800365c:	e01f      	b.n	800369e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800365e:	f7ff fb67 	bl	8002d30 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d918      	bls.n	800369e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d011      	beq.n	800369e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	f043 0210 	orr.w	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e007      	b.n	80036ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d1d8      	bne.n	800365e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000008 	.word	0x20000008
 80036bc:	431bde83 	.word	0x431bde83

080036c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d12e      	bne.n	8003738 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036ea:	f7ff fb21 	bl	8002d30 <HAL_GetTick>
 80036ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036f0:	e01b      	b.n	800372a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036f2:	f7ff fb1d 	bl	8002d30 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d914      	bls.n	800372a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d10d      	bne.n	800372a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	f043 0210 	orr.w	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	f043 0201 	orr.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e007      	b.n	800373a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d0dc      	beq.n	80036f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800377c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003786:	4a04      	ldr	r2, [pc, #16]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	60d3      	str	r3, [r2, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <__NVIC_GetPriorityGrouping+0x18>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0307 	and.w	r3, r3, #7
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	db0b      	blt.n	80037e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	4906      	ldr	r1, [pc, #24]	; (80037ec <__NVIC_EnableIRQ+0x34>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2001      	movs	r0, #1
 80037da:	fa00 f202 	lsl.w	r2, r0, r2
 80037de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	e000e100 	.word	0xe000e100

080037f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003800:	2b00      	cmp	r3, #0
 8003802:	db0a      	blt.n	800381a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	490c      	ldr	r1, [pc, #48]	; (800383c <__NVIC_SetPriority+0x4c>)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	440b      	add	r3, r1
 8003814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003818:	e00a      	b.n	8003830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	4908      	ldr	r1, [pc, #32]	; (8003840 <__NVIC_SetPriority+0x50>)
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	3b04      	subs	r3, #4
 8003828:	0112      	lsls	r2, r2, #4
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	440b      	add	r3, r1
 800382e:	761a      	strb	r2, [r3, #24]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	e000e100 	.word	0xe000e100
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f1c3 0307 	rsb	r3, r3, #7
 800385e:	2b04      	cmp	r3, #4
 8003860:	bf28      	it	cs
 8003862:	2304      	movcs	r3, #4
 8003864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3304      	adds	r3, #4
 800386a:	2b06      	cmp	r3, #6
 800386c:	d902      	bls.n	8003874 <NVIC_EncodePriority+0x30>
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3b03      	subs	r3, #3
 8003872:	e000      	b.n	8003876 <NVIC_EncodePriority+0x32>
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003878:	f04f 32ff 	mov.w	r2, #4294967295
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	401a      	ands	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800388c:	f04f 31ff 	mov.w	r1, #4294967295
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	43d9      	mvns	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	4313      	orrs	r3, r2
         );
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3724      	adds	r7, #36	; 0x24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b8:	d301      	bcc.n	80038be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ba:	2301      	movs	r3, #1
 80038bc:	e00f      	b.n	80038de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038be:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <SysTick_Config+0x40>)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038c6:	210f      	movs	r1, #15
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295
 80038cc:	f7ff ff90 	bl	80037f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <SysTick_Config+0x40>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038d6:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <SysTick_Config+0x40>)
 80038d8:	2207      	movs	r2, #7
 80038da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	e000e010 	.word	0xe000e010

080038ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff ff2d 	bl	8003754 <__NVIC_SetPriorityGrouping>
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	4603      	mov	r3, r0
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003914:	f7ff ff42 	bl	800379c <__NVIC_GetPriorityGrouping>
 8003918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	6978      	ldr	r0, [r7, #20]
 8003920:	f7ff ff90 	bl	8003844 <NVIC_EncodePriority>
 8003924:	4602      	mov	r2, r0
 8003926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff5f 	bl	80037f0 <__NVIC_SetPriority>
}
 8003932:	bf00      	nop
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	4603      	mov	r3, r0
 8003942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff35 	bl	80037b8 <__NVIC_EnableIRQ>
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ffa2 	bl	80038a8 <SysTick_Config>
 8003964:	4603      	mov	r3, r0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800396e:	b480      	push	{r7}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003980:	2b02      	cmp	r3, #2
 8003982:	d008      	beq.n	8003996 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2204      	movs	r2, #4
 8003988:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e020      	b.n	80039d8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 020e 	bic.w	r2, r2, #14
 80039a4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0201 	bic.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	2101      	movs	r1, #1
 80039c0:	fa01 f202 	lsl.w	r2, r1, r2
 80039c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
	...

080039e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d005      	beq.n	8003a06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2204      	movs	r2, #4
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e051      	b.n	8003aaa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 020e 	bic.w	r2, r2, #14
 8003a14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <HAL_DMA_Abort_IT+0xd0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d029      	beq.n	8003a84 <HAL_DMA_Abort_IT+0xa0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a20      	ldr	r2, [pc, #128]	; (8003ab8 <HAL_DMA_Abort_IT+0xd4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d022      	beq.n	8003a80 <HAL_DMA_Abort_IT+0x9c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <HAL_DMA_Abort_IT+0xd8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d01a      	beq.n	8003a7a <HAL_DMA_Abort_IT+0x96>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <HAL_DMA_Abort_IT+0xdc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d012      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x90>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1c      	ldr	r2, [pc, #112]	; (8003ac4 <HAL_DMA_Abort_IT+0xe0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00a      	beq.n	8003a6e <HAL_DMA_Abort_IT+0x8a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1a      	ldr	r2, [pc, #104]	; (8003ac8 <HAL_DMA_Abort_IT+0xe4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d102      	bne.n	8003a68 <HAL_DMA_Abort_IT+0x84>
 8003a62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a66:	e00e      	b.n	8003a86 <HAL_DMA_Abort_IT+0xa2>
 8003a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a6c:	e00b      	b.n	8003a86 <HAL_DMA_Abort_IT+0xa2>
 8003a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a72:	e008      	b.n	8003a86 <HAL_DMA_Abort_IT+0xa2>
 8003a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a78:	e005      	b.n	8003a86 <HAL_DMA_Abort_IT+0xa2>
 8003a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a7e:	e002      	b.n	8003a86 <HAL_DMA_Abort_IT+0xa2>
 8003a80:	2310      	movs	r3, #16
 8003a82:	e000      	b.n	8003a86 <HAL_DMA_Abort_IT+0xa2>
 8003a84:	2301      	movs	r3, #1
 8003a86:	4a11      	ldr	r2, [pc, #68]	; (8003acc <HAL_DMA_Abort_IT+0xe8>)
 8003a88:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
    } 
  }
  return status;
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40020008 	.word	0x40020008
 8003ab8:	4002001c 	.word	0x4002001c
 8003abc:	40020030 	.word	0x40020030
 8003ac0:	40020044 	.word	0x40020044
 8003ac4:	40020058 	.word	0x40020058
 8003ac8:	4002006c 	.word	0x4002006c
 8003acc:	40020000 	.word	0x40020000

08003ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b08b      	sub	sp, #44	; 0x2c
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ae2:	e169      	b.n	8003db8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	f040 8158 	bne.w	8003db2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4a9a      	ldr	r2, [pc, #616]	; (8003d70 <HAL_GPIO_Init+0x2a0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d05e      	beq.n	8003bca <HAL_GPIO_Init+0xfa>
 8003b0c:	4a98      	ldr	r2, [pc, #608]	; (8003d70 <HAL_GPIO_Init+0x2a0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d875      	bhi.n	8003bfe <HAL_GPIO_Init+0x12e>
 8003b12:	4a98      	ldr	r2, [pc, #608]	; (8003d74 <HAL_GPIO_Init+0x2a4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d058      	beq.n	8003bca <HAL_GPIO_Init+0xfa>
 8003b18:	4a96      	ldr	r2, [pc, #600]	; (8003d74 <HAL_GPIO_Init+0x2a4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d86f      	bhi.n	8003bfe <HAL_GPIO_Init+0x12e>
 8003b1e:	4a96      	ldr	r2, [pc, #600]	; (8003d78 <HAL_GPIO_Init+0x2a8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d052      	beq.n	8003bca <HAL_GPIO_Init+0xfa>
 8003b24:	4a94      	ldr	r2, [pc, #592]	; (8003d78 <HAL_GPIO_Init+0x2a8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d869      	bhi.n	8003bfe <HAL_GPIO_Init+0x12e>
 8003b2a:	4a94      	ldr	r2, [pc, #592]	; (8003d7c <HAL_GPIO_Init+0x2ac>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d04c      	beq.n	8003bca <HAL_GPIO_Init+0xfa>
 8003b30:	4a92      	ldr	r2, [pc, #584]	; (8003d7c <HAL_GPIO_Init+0x2ac>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d863      	bhi.n	8003bfe <HAL_GPIO_Init+0x12e>
 8003b36:	4a92      	ldr	r2, [pc, #584]	; (8003d80 <HAL_GPIO_Init+0x2b0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d046      	beq.n	8003bca <HAL_GPIO_Init+0xfa>
 8003b3c:	4a90      	ldr	r2, [pc, #576]	; (8003d80 <HAL_GPIO_Init+0x2b0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d85d      	bhi.n	8003bfe <HAL_GPIO_Init+0x12e>
 8003b42:	2b12      	cmp	r3, #18
 8003b44:	d82a      	bhi.n	8003b9c <HAL_GPIO_Init+0xcc>
 8003b46:	2b12      	cmp	r3, #18
 8003b48:	d859      	bhi.n	8003bfe <HAL_GPIO_Init+0x12e>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <HAL_GPIO_Init+0x80>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003bcb 	.word	0x08003bcb
 8003b54:	08003ba5 	.word	0x08003ba5
 8003b58:	08003bb7 	.word	0x08003bb7
 8003b5c:	08003bf9 	.word	0x08003bf9
 8003b60:	08003bff 	.word	0x08003bff
 8003b64:	08003bff 	.word	0x08003bff
 8003b68:	08003bff 	.word	0x08003bff
 8003b6c:	08003bff 	.word	0x08003bff
 8003b70:	08003bff 	.word	0x08003bff
 8003b74:	08003bff 	.word	0x08003bff
 8003b78:	08003bff 	.word	0x08003bff
 8003b7c:	08003bff 	.word	0x08003bff
 8003b80:	08003bff 	.word	0x08003bff
 8003b84:	08003bff 	.word	0x08003bff
 8003b88:	08003bff 	.word	0x08003bff
 8003b8c:	08003bff 	.word	0x08003bff
 8003b90:	08003bff 	.word	0x08003bff
 8003b94:	08003bad 	.word	0x08003bad
 8003b98:	08003bc1 	.word	0x08003bc1
 8003b9c:	4a79      	ldr	r2, [pc, #484]	; (8003d84 <HAL_GPIO_Init+0x2b4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ba2:	e02c      	b.n	8003bfe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	623b      	str	r3, [r7, #32]
          break;
 8003baa:	e029      	b.n	8003c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	623b      	str	r3, [r7, #32]
          break;
 8003bb4:	e024      	b.n	8003c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	623b      	str	r3, [r7, #32]
          break;
 8003bbe:	e01f      	b.n	8003c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	623b      	str	r3, [r7, #32]
          break;
 8003bc8:	e01a      	b.n	8003c00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003bd2:	2304      	movs	r3, #4
 8003bd4:	623b      	str	r3, [r7, #32]
          break;
 8003bd6:	e013      	b.n	8003c00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d105      	bne.n	8003bec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003be0:	2308      	movs	r3, #8
 8003be2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	611a      	str	r2, [r3, #16]
          break;
 8003bea:	e009      	b.n	8003c00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bec:	2308      	movs	r3, #8
 8003bee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	615a      	str	r2, [r3, #20]
          break;
 8003bf6:	e003      	b.n	8003c00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	623b      	str	r3, [r7, #32]
          break;
 8003bfc:	e000      	b.n	8003c00 <HAL_GPIO_Init+0x130>
          break;
 8003bfe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2bff      	cmp	r3, #255	; 0xff
 8003c04:	d801      	bhi.n	8003c0a <HAL_GPIO_Init+0x13a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	e001      	b.n	8003c0e <HAL_GPIO_Init+0x13e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2bff      	cmp	r3, #255	; 0xff
 8003c14:	d802      	bhi.n	8003c1c <HAL_GPIO_Init+0x14c>
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	e002      	b.n	8003c22 <HAL_GPIO_Init+0x152>
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	3b08      	subs	r3, #8
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	210f      	movs	r1, #15
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	401a      	ands	r2, r3
 8003c34:	6a39      	ldr	r1, [r7, #32]
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80b1 	beq.w	8003db2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c50:	4b4d      	ldr	r3, [pc, #308]	; (8003d88 <HAL_GPIO_Init+0x2b8>)
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	4a4c      	ldr	r2, [pc, #304]	; (8003d88 <HAL_GPIO_Init+0x2b8>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6193      	str	r3, [r2, #24]
 8003c5c:	4b4a      	ldr	r3, [pc, #296]	; (8003d88 <HAL_GPIO_Init+0x2b8>)
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c68:	4a48      	ldr	r2, [pc, #288]	; (8003d8c <HAL_GPIO_Init+0x2bc>)
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	089b      	lsrs	r3, r3, #2
 8003c6e:	3302      	adds	r3, #2
 8003c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	220f      	movs	r2, #15
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <HAL_GPIO_Init+0x2c0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <HAL_GPIO_Init+0x1ec>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a3f      	ldr	r2, [pc, #252]	; (8003d94 <HAL_GPIO_Init+0x2c4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_GPIO_Init+0x1e8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a3e      	ldr	r2, [pc, #248]	; (8003d98 <HAL_GPIO_Init+0x2c8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d007      	beq.n	8003cb4 <HAL_GPIO_Init+0x1e4>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a3d      	ldr	r2, [pc, #244]	; (8003d9c <HAL_GPIO_Init+0x2cc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <HAL_GPIO_Init+0x1e0>
 8003cac:	2303      	movs	r3, #3
 8003cae:	e006      	b.n	8003cbe <HAL_GPIO_Init+0x1ee>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	e004      	b.n	8003cbe <HAL_GPIO_Init+0x1ee>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e002      	b.n	8003cbe <HAL_GPIO_Init+0x1ee>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <HAL_GPIO_Init+0x1ee>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc0:	f002 0203 	and.w	r2, r2, #3
 8003cc4:	0092      	lsls	r2, r2, #2
 8003cc6:	4093      	lsls	r3, r2
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003cce:	492f      	ldr	r1, [pc, #188]	; (8003d8c <HAL_GPIO_Init+0x2bc>)
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d006      	beq.n	8003cf6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ce8:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	492c      	ldr	r1, [pc, #176]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]
 8003cf4:	e006      	b.n	8003d04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cf6:	4b2a      	ldr	r3, [pc, #168]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	4928      	ldr	r1, [pc, #160]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d006      	beq.n	8003d1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d10:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	4922      	ldr	r1, [pc, #136]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
 8003d1c:	e006      	b.n	8003d2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d1e:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	491e      	ldr	r1, [pc, #120]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d006      	beq.n	8003d46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d38:	4b19      	ldr	r3, [pc, #100]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	4918      	ldr	r1, [pc, #96]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	608b      	str	r3, [r1, #8]
 8003d44:	e006      	b.n	8003d54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d46:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	4914      	ldr	r1, [pc, #80]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d021      	beq.n	8003da4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	490e      	ldr	r1, [pc, #56]	; (8003da0 <HAL_GPIO_Init+0x2d0>)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60cb      	str	r3, [r1, #12]
 8003d6c:	e021      	b.n	8003db2 <HAL_GPIO_Init+0x2e2>
 8003d6e:	bf00      	nop
 8003d70:	10320000 	.word	0x10320000
 8003d74:	10310000 	.word	0x10310000
 8003d78:	10220000 	.word	0x10220000
 8003d7c:	10210000 	.word	0x10210000
 8003d80:	10120000 	.word	0x10120000
 8003d84:	10110000 	.word	0x10110000
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40010000 	.word	0x40010000
 8003d90:	40010800 	.word	0x40010800
 8003d94:	40010c00 	.word	0x40010c00
 8003d98:	40011000 	.word	0x40011000
 8003d9c:	40011400 	.word	0x40011400
 8003da0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_GPIO_Init+0x304>)
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	4909      	ldr	r1, [pc, #36]	; (8003dd4 <HAL_GPIO_Init+0x304>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	3301      	adds	r3, #1
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f47f ae8e 	bne.w	8003ae4 <HAL_GPIO_Init+0x14>
  }
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	372c      	adds	r7, #44	; 0x2c
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr
 8003dd4:	40010400 	.word	0x40010400

08003dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	807b      	strh	r3, [r7, #2]
 8003de4:	4613      	mov	r3, r2
 8003de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003de8:	787b      	ldrb	r3, [r7, #1]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dee:	887a      	ldrh	r2, [r7, #2]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003df4:	e003      	b.n	8003dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003df6:	887b      	ldrh	r3, [r7, #2]
 8003df8:	041a      	lsls	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	611a      	str	r2, [r3, #16]
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e12:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	88fb      	ldrh	r3, [r7, #6]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d006      	beq.n	8003e2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e1e:	4a05      	ldr	r2, [pc, #20]	; (8003e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f806 	bl	8003e38 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40010400 	.word	0x40010400

08003e38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e12b      	b.n	80040b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fe fcdc 	bl	8002830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2224      	movs	r2, #36	; 0x24
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003eb0:	f001 fba0 	bl	80055f4 <HAL_RCC_GetPCLK1Freq>
 8003eb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4a81      	ldr	r2, [pc, #516]	; (80040c0 <HAL_I2C_Init+0x274>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d807      	bhi.n	8003ed0 <HAL_I2C_Init+0x84>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a80      	ldr	r2, [pc, #512]	; (80040c4 <HAL_I2C_Init+0x278>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	bf94      	ite	ls
 8003ec8:	2301      	movls	r3, #1
 8003eca:	2300      	movhi	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	e006      	b.n	8003ede <HAL_I2C_Init+0x92>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4a7d      	ldr	r2, [pc, #500]	; (80040c8 <HAL_I2C_Init+0x27c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	bf94      	ite	ls
 8003ed8:	2301      	movls	r3, #1
 8003eda:	2300      	movhi	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e0e7      	b.n	80040b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a78      	ldr	r2, [pc, #480]	; (80040cc <HAL_I2C_Init+0x280>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	0c9b      	lsrs	r3, r3, #18
 8003ef0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4a6a      	ldr	r2, [pc, #424]	; (80040c0 <HAL_I2C_Init+0x274>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d802      	bhi.n	8003f20 <HAL_I2C_Init+0xd4>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	e009      	b.n	8003f34 <HAL_I2C_Init+0xe8>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f26:	fb02 f303 	mul.w	r3, r2, r3
 8003f2a:	4a69      	ldr	r2, [pc, #420]	; (80040d0 <HAL_I2C_Init+0x284>)
 8003f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f30:	099b      	lsrs	r3, r3, #6
 8003f32:	3301      	adds	r3, #1
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	495c      	ldr	r1, [pc, #368]	; (80040c0 <HAL_I2C_Init+0x274>)
 8003f50:	428b      	cmp	r3, r1
 8003f52:	d819      	bhi.n	8003f88 <HAL_I2C_Init+0x13c>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1e59      	subs	r1, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f62:	1c59      	adds	r1, r3, #1
 8003f64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f68:	400b      	ands	r3, r1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_I2C_Init+0x138>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1e59      	subs	r1, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f82:	e051      	b.n	8004028 <HAL_I2C_Init+0x1dc>
 8003f84:	2304      	movs	r3, #4
 8003f86:	e04f      	b.n	8004028 <HAL_I2C_Init+0x1dc>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d111      	bne.n	8003fb4 <HAL_I2C_Init+0x168>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1e58      	subs	r0, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6859      	ldr	r1, [r3, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	440b      	add	r3, r1
 8003f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf0c      	ite	eq
 8003fac:	2301      	moveq	r3, #1
 8003fae:	2300      	movne	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	e012      	b.n	8003fda <HAL_I2C_Init+0x18e>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	1e58      	subs	r0, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6859      	ldr	r1, [r3, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	0099      	lsls	r1, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_I2C_Init+0x196>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e022      	b.n	8004028 <HAL_I2C_Init+0x1dc>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10e      	bne.n	8004008 <HAL_I2C_Init+0x1bc>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1e58      	subs	r0, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6859      	ldr	r1, [r3, #4]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	440b      	add	r3, r1
 8003ff8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004006:	e00f      	b.n	8004028 <HAL_I2C_Init+0x1dc>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1e58      	subs	r0, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	0099      	lsls	r1, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	fbb0 f3f3 	udiv	r3, r0, r3
 800401e:	3301      	adds	r3, #1
 8004020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	6809      	ldr	r1, [r1, #0]
 800402c:	4313      	orrs	r3, r2
 800402e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69da      	ldr	r2, [r3, #28]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004056:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6911      	ldr	r1, [r2, #16]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68d2      	ldr	r2, [r2, #12]
 8004062:	4311      	orrs	r1, r2
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	430b      	orrs	r3, r1
 800406a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	000186a0 	.word	0x000186a0
 80040c4:	001e847f 	.word	0x001e847f
 80040c8:	003d08ff 	.word	0x003d08ff
 80040cc:	431bde83 	.word	0x431bde83
 80040d0:	10624dd3 	.word	0x10624dd3

080040d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	4608      	mov	r0, r1
 80040de:	4611      	mov	r1, r2
 80040e0:	461a      	mov	r2, r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	817b      	strh	r3, [r7, #10]
 80040e6:	460b      	mov	r3, r1
 80040e8:	813b      	strh	r3, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040ee:	f7fe fe1f 	bl	8002d30 <HAL_GetTick>
 80040f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	f040 80d9 	bne.w	80042b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	2319      	movs	r3, #25
 8004108:	2201      	movs	r2, #1
 800410a:	496d      	ldr	r1, [pc, #436]	; (80042c0 <HAL_I2C_Mem_Write+0x1ec>)
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fcc1 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004118:	2302      	movs	r3, #2
 800411a:	e0cc      	b.n	80042b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_I2C_Mem_Write+0x56>
 8004126:	2302      	movs	r3, #2
 8004128:	e0c5      	b.n	80042b6 <HAL_I2C_Mem_Write+0x1e2>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b01      	cmp	r3, #1
 800413e:	d007      	beq.n	8004150 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800415e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2221      	movs	r2, #33	; 0x21
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2240      	movs	r2, #64	; 0x40
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a3a      	ldr	r2, [r7, #32]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004180:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4a4d      	ldr	r2, [pc, #308]	; (80042c4 <HAL_I2C_Mem_Write+0x1f0>)
 8004190:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004192:	88f8      	ldrh	r0, [r7, #6]
 8004194:	893a      	ldrh	r2, [r7, #8]
 8004196:	8979      	ldrh	r1, [r7, #10]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	4603      	mov	r3, r0
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 faf8 	bl	8004798 <I2C_RequestMemoryWrite>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d052      	beq.n	8004254 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e081      	b.n	80042b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fd42 	bl	8004c40 <I2C_WaitOnTXEFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00d      	beq.n	80041de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d107      	bne.n	80041da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e06b      	b.n	80042b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	781a      	ldrb	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b04      	cmp	r3, #4
 800421a:	d11b      	bne.n	8004254 <HAL_I2C_Mem_Write+0x180>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	d017      	beq.n	8004254 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1aa      	bne.n	80041b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fd2e 	bl	8004cc2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00d      	beq.n	8004288 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	2b04      	cmp	r3, #4
 8004272:	d107      	bne.n	8004284 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004282:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e016      	b.n	80042b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e000      	b.n	80042b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
  }
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	00100002 	.word	0x00100002
 80042c4:	ffff0000 	.word	0xffff0000

080042c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	; 0x30
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	4608      	mov	r0, r1
 80042d2:	4611      	mov	r1, r2
 80042d4:	461a      	mov	r2, r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	817b      	strh	r3, [r7, #10]
 80042da:	460b      	mov	r3, r1
 80042dc:	813b      	strh	r3, [r7, #8]
 80042de:	4613      	mov	r3, r2
 80042e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042e6:	f7fe fd23 	bl	8002d30 <HAL_GetTick>
 80042ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	f040 8244 	bne.w	8004782 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	2319      	movs	r3, #25
 8004300:	2201      	movs	r2, #1
 8004302:	4982      	ldr	r1, [pc, #520]	; (800450c <HAL_I2C_Mem_Read+0x244>)
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fbc5 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004310:	2302      	movs	r3, #2
 8004312:	e237      	b.n	8004784 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_I2C_Mem_Read+0x5a>
 800431e:	2302      	movs	r3, #2
 8004320:	e230      	b.n	8004784 <HAL_I2C_Mem_Read+0x4bc>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b01      	cmp	r3, #1
 8004336:	d007      	beq.n	8004348 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004356:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2222      	movs	r2, #34	; 0x22
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2240      	movs	r2, #64	; 0x40
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004372:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004378:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4a62      	ldr	r2, [pc, #392]	; (8004510 <HAL_I2C_Mem_Read+0x248>)
 8004388:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800438a:	88f8      	ldrh	r0, [r7, #6]
 800438c:	893a      	ldrh	r2, [r7, #8]
 800438e:	8979      	ldrh	r1, [r7, #10]
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	4603      	mov	r3, r0
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fa92 	bl	80048c4 <I2C_RequestMemoryRead>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e1ec      	b.n	8004784 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d113      	bne.n	80043da <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	e1c0      	b.n	800475c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d11e      	bne.n	8004420 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043f2:	b672      	cpsid	i
}
 80043f4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f6:	2300      	movs	r3, #0
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800441c:	b662      	cpsie	i
}
 800441e:	e035      	b.n	800448c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004424:	2b02      	cmp	r3, #2
 8004426:	d11e      	bne.n	8004466 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004436:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004438:	b672      	cpsid	i
}
 800443a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004460:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004462:	b662      	cpsie	i
}
 8004464:	e012      	b.n	800448c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004474:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800448c:	e166      	b.n	800475c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004492:	2b03      	cmp	r3, #3
 8004494:	f200 811f 	bhi.w	80046d6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449c:	2b01      	cmp	r3, #1
 800449e:	d123      	bne.n	80044e8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fc4d 	bl	8004d44 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e167      	b.n	8004784 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044e6:	e139      	b.n	800475c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d152      	bne.n	8004596 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	2200      	movs	r2, #0
 80044f8:	4906      	ldr	r1, [pc, #24]	; (8004514 <HAL_I2C_Mem_Read+0x24c>)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 faca 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e13c      	b.n	8004784 <HAL_I2C_Mem_Read+0x4bc>
 800450a:	bf00      	nop
 800450c:	00100002 	.word	0x00100002
 8004510:	ffff0000 	.word	0xffff0000
 8004514:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004518:	b672      	cpsid	i
}
 800451a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800455e:	b662      	cpsie	i
}
 8004560:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004594:	e0e2      	b.n	800475c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	2200      	movs	r2, #0
 800459e:	497b      	ldr	r1, [pc, #492]	; (800478c <HAL_I2C_Mem_Read+0x4c4>)
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fa77 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0e9      	b.n	8004784 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045c0:	b672      	cpsid	i
}
 80045c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045f6:	4b66      	ldr	r3, [pc, #408]	; (8004790 <HAL_I2C_Mem_Read+0x4c8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	08db      	lsrs	r3, r3, #3
 80045fc:	4a65      	ldr	r2, [pc, #404]	; (8004794 <HAL_I2C_Mem_Read+0x4cc>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	0a1a      	lsrs	r2, r3, #8
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	00da      	lsls	r2, r3, #3
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	3b01      	subs	r3, #1
 8004614:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d118      	bne.n	800464e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f043 0220 	orr.w	r2, r3, #32
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800463e:	b662      	cpsie	i
}
 8004640:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e09a      	b.n	8004784 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b04      	cmp	r3, #4
 800465a:	d1d9      	bne.n	8004610 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800469e:	b662      	cpsie	i
}
 80046a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046d4:	e042      	b.n	800475c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 fb32 	bl	8004d44 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e04c      	b.n	8004784 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b04      	cmp	r3, #4
 8004728:	d118      	bne.n	800475c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	f47f ae94 	bne.w	800448e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	e000      	b.n	8004784 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
  }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3728      	adds	r7, #40	; 0x28
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	00010004 	.word	0x00010004
 8004790:	20000008 	.word	0x20000008
 8004794:	14f8b589 	.word	0x14f8b589

08004798 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	4608      	mov	r0, r1
 80047a2:	4611      	mov	r1, r2
 80047a4:	461a      	mov	r2, r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	817b      	strh	r3, [r7, #10]
 80047aa:	460b      	mov	r3, r1
 80047ac:	813b      	strh	r3, [r7, #8]
 80047ae:	4613      	mov	r3, r2
 80047b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f960 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00d      	beq.n	80047f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e8:	d103      	bne.n	80047f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e05f      	b.n	80048b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047f6:	897b      	ldrh	r3, [r7, #10]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004804:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	6a3a      	ldr	r2, [r7, #32]
 800480a:	492d      	ldr	r1, [pc, #180]	; (80048c0 <I2C_RequestMemoryWrite+0x128>)
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f998 	bl	8004b42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e04c      	b.n	80048b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004834:	6a39      	ldr	r1, [r7, #32]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fa02 	bl	8004c40 <I2C_WaitOnTXEFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00d      	beq.n	800485e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	2b04      	cmp	r3, #4
 8004848:	d107      	bne.n	800485a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004858:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e02b      	b.n	80048b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d105      	bne.n	8004870 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004864:	893b      	ldrh	r3, [r7, #8]
 8004866:	b2da      	uxtb	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	611a      	str	r2, [r3, #16]
 800486e:	e021      	b.n	80048b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004870:	893b      	ldrh	r3, [r7, #8]
 8004872:	0a1b      	lsrs	r3, r3, #8
 8004874:	b29b      	uxth	r3, r3
 8004876:	b2da      	uxtb	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800487e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004880:	6a39      	ldr	r1, [r7, #32]
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f9dc 	bl	8004c40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00d      	beq.n	80048aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	2b04      	cmp	r3, #4
 8004894:	d107      	bne.n	80048a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e005      	b.n	80048b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048aa:	893b      	ldrh	r3, [r7, #8]
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	00010002 	.word	0x00010002

080048c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	817b      	strh	r3, [r7, #10]
 80048d6:	460b      	mov	r3, r1
 80048d8:	813b      	strh	r3, [r7, #8]
 80048da:	4613      	mov	r3, r2
 80048dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	2200      	movs	r2, #0
 8004906:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f8c2 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00d      	beq.n	8004932 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004924:	d103      	bne.n	800492e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800492c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e0aa      	b.n	8004a88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004932:	897b      	ldrh	r3, [r7, #10]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	461a      	mov	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004940:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	6a3a      	ldr	r2, [r7, #32]
 8004946:	4952      	ldr	r1, [pc, #328]	; (8004a90 <I2C_RequestMemoryRead+0x1cc>)
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f8fa 	bl	8004b42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e097      	b.n	8004a88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800496e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004970:	6a39      	ldr	r1, [r7, #32]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f964 	bl	8004c40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00d      	beq.n	800499a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	2b04      	cmp	r3, #4
 8004984:	d107      	bne.n	8004996 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004994:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e076      	b.n	8004a88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d105      	bne.n	80049ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049a0:	893b      	ldrh	r3, [r7, #8]
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	611a      	str	r2, [r3, #16]
 80049aa:	e021      	b.n	80049f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049ac:	893b      	ldrh	r3, [r7, #8]
 80049ae:	0a1b      	lsrs	r3, r3, #8
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049bc:	6a39      	ldr	r1, [r7, #32]
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 f93e 	bl	8004c40 <I2C_WaitOnTXEFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00d      	beq.n	80049e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d107      	bne.n	80049e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e050      	b.n	8004a88 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049e6:	893b      	ldrh	r3, [r7, #8]
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f2:	6a39      	ldr	r1, [r7, #32]
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f923 	bl	8004c40 <I2C_WaitOnTXEFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00d      	beq.n	8004a1c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d107      	bne.n	8004a18 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e035      	b.n	8004a88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f82b 	bl	8004a94 <I2C_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00d      	beq.n	8004a60 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a52:	d103      	bne.n	8004a5c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e013      	b.n	8004a88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a60:	897b      	ldrh	r3, [r7, #10]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	6a3a      	ldr	r2, [r7, #32]
 8004a74:	4906      	ldr	r1, [pc, #24]	; (8004a90 <I2C_RequestMemoryRead+0x1cc>)
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f863 	bl	8004b42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	00010002 	.word	0x00010002

08004a94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa4:	e025      	b.n	8004af2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aac:	d021      	beq.n	8004af2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aae:	f7fe f93f 	bl	8002d30 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d302      	bcc.n	8004ac4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d116      	bne.n	8004af2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f043 0220 	orr.w	r2, r3, #32
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e023      	b.n	8004b3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	0c1b      	lsrs	r3, r3, #16
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d10d      	bne.n	8004b18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	43da      	mvns	r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4013      	ands	r3, r2
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	bf0c      	ite	eq
 8004b0e:	2301      	moveq	r3, #1
 8004b10:	2300      	movne	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	e00c      	b.n	8004b32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	43da      	mvns	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4013      	ands	r3, r2
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	bf0c      	ite	eq
 8004b2a:	2301      	moveq	r3, #1
 8004b2c:	2300      	movne	r3, #0
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d0b6      	beq.n	8004aa6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	60f8      	str	r0, [r7, #12]
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b50:	e051      	b.n	8004bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b60:	d123      	bne.n	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f043 0204 	orr.w	r2, r3, #4
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e046      	b.n	8004c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d021      	beq.n	8004bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb2:	f7fe f8bd 	bl	8002d30 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d302      	bcc.n	8004bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d116      	bne.n	8004bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f043 0220 	orr.w	r2, r3, #32
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e020      	b.n	8004c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10c      	bne.n	8004c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	43da      	mvns	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf14      	ite	ne
 8004c12:	2301      	movne	r3, #1
 8004c14:	2300      	moveq	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	e00b      	b.n	8004c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	43da      	mvns	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4013      	ands	r3, r2
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf14      	ite	ne
 8004c2c:	2301      	movne	r3, #1
 8004c2e:	2300      	moveq	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d18d      	bne.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c4c:	e02d      	b.n	8004caa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f8ce 	bl	8004df0 <I2C_IsAcknowledgeFailed>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e02d      	b.n	8004cba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d021      	beq.n	8004caa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c66:	f7fe f863 	bl	8002d30 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d302      	bcc.n	8004c7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d116      	bne.n	8004caa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f043 0220 	orr.w	r2, r3, #32
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e007      	b.n	8004cba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb4:	2b80      	cmp	r3, #128	; 0x80
 8004cb6:	d1ca      	bne.n	8004c4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cce:	e02d      	b.n	8004d2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 f88d 	bl	8004df0 <I2C_IsAcknowledgeFailed>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e02d      	b.n	8004d3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d021      	beq.n	8004d2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce8:	f7fe f822 	bl	8002d30 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d302      	bcc.n	8004cfe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d116      	bne.n	8004d2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	f043 0220 	orr.w	r2, r3, #32
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e007      	b.n	8004d3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d1ca      	bne.n	8004cd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d50:	e042      	b.n	8004dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	f003 0310 	and.w	r3, r3, #16
 8004d5c:	2b10      	cmp	r3, #16
 8004d5e:	d119      	bne.n	8004d94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0210 	mvn.w	r2, #16
 8004d68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e029      	b.n	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d94:	f7fd ffcc 	bl	8002d30 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d302      	bcc.n	8004daa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d116      	bne.n	8004dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	f043 0220 	orr.w	r2, r3, #32
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e007      	b.n	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	2b40      	cmp	r3, #64	; 0x40
 8004de4:	d1b5      	bne.n	8004d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e06:	d11b      	bne.n	8004e40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	f043 0204 	orr.w	r2, r3, #4
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr

08004e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e272      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 8087 	beq.w	8004f7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e6c:	4b92      	ldr	r3, [pc, #584]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 030c 	and.w	r3, r3, #12
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d00c      	beq.n	8004e92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e78:	4b8f      	ldr	r3, [pc, #572]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d112      	bne.n	8004eaa <HAL_RCC_OscConfig+0x5e>
 8004e84:	4b8c      	ldr	r3, [pc, #560]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e90:	d10b      	bne.n	8004eaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e92:	4b89      	ldr	r3, [pc, #548]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d06c      	beq.n	8004f78 <HAL_RCC_OscConfig+0x12c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d168      	bne.n	8004f78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e24c      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb2:	d106      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x76>
 8004eb4:	4b80      	ldr	r3, [pc, #512]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a7f      	ldr	r2, [pc, #508]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	e02e      	b.n	8004f20 <HAL_RCC_OscConfig+0xd4>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x98>
 8004eca:	4b7b      	ldr	r3, [pc, #492]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a7a      	ldr	r2, [pc, #488]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	4b78      	ldr	r3, [pc, #480]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a77      	ldr	r2, [pc, #476]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	e01d      	b.n	8004f20 <HAL_RCC_OscConfig+0xd4>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eec:	d10c      	bne.n	8004f08 <HAL_RCC_OscConfig+0xbc>
 8004eee:	4b72      	ldr	r3, [pc, #456]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a71      	ldr	r2, [pc, #452]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	4b6f      	ldr	r3, [pc, #444]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a6e      	ldr	r2, [pc, #440]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	e00b      	b.n	8004f20 <HAL_RCC_OscConfig+0xd4>
 8004f08:	4b6b      	ldr	r3, [pc, #428]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a6a      	ldr	r2, [pc, #424]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	4b68      	ldr	r3, [pc, #416]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a67      	ldr	r2, [pc, #412]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d013      	beq.n	8004f50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f28:	f7fd ff02 	bl	8002d30 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f30:	f7fd fefe 	bl	8002d30 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	; 0x64
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e200      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f42:	4b5d      	ldr	r3, [pc, #372]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f0      	beq.n	8004f30 <HAL_RCC_OscConfig+0xe4>
 8004f4e:	e014      	b.n	8004f7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fd feee 	bl	8002d30 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f58:	f7fd feea 	bl	8002d30 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b64      	cmp	r3, #100	; 0x64
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e1ec      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6a:	4b53      	ldr	r3, [pc, #332]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x10c>
 8004f76:	e000      	b.n	8004f7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d063      	beq.n	800504e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f86:	4b4c      	ldr	r3, [pc, #304]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f92:	4b49      	ldr	r3, [pc, #292]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f003 030c 	and.w	r3, r3, #12
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d11c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x18c>
 8004f9e:	4b46      	ldr	r3, [pc, #280]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d116      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004faa:	4b43      	ldr	r3, [pc, #268]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x176>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d001      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e1c0      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc2:	4b3d      	ldr	r3, [pc, #244]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4939      	ldr	r1, [pc, #228]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd6:	e03a      	b.n	800504e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d020      	beq.n	8005022 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fe0:	4b36      	ldr	r3, [pc, #216]	; (80050bc <HAL_RCC_OscConfig+0x270>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe6:	f7fd fea3 	bl	8002d30 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fec:	e008      	b.n	8005000 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fee:	f7fd fe9f 	bl	8002d30 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e1a1      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005000:	4b2d      	ldr	r3, [pc, #180]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f0      	beq.n	8004fee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800500c:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	4927      	ldr	r1, [pc, #156]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 800501c:	4313      	orrs	r3, r2
 800501e:	600b      	str	r3, [r1, #0]
 8005020:	e015      	b.n	800504e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005022:	4b26      	ldr	r3, [pc, #152]	; (80050bc <HAL_RCC_OscConfig+0x270>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005028:	f7fd fe82 	bl	8002d30 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005030:	f7fd fe7e 	bl	8002d30 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e180      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005042:	4b1d      	ldr	r3, [pc, #116]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d03a      	beq.n	80050d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d019      	beq.n	8005096 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005062:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005068:	f7fd fe62 	bl	8002d30 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005070:	f7fd fe5e 	bl	8002d30 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e160      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005082:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <HAL_RCC_OscConfig+0x26c>)
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800508e:	2001      	movs	r0, #1
 8005090:	f000 fad8 	bl	8005644 <RCC_Delay>
 8005094:	e01c      	b.n	80050d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005096:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800509c:	f7fd fe48 	bl	8002d30 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a2:	e00f      	b.n	80050c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050a4:	f7fd fe44 	bl	8002d30 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d908      	bls.n	80050c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e146      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000
 80050bc:	42420000 	.word	0x42420000
 80050c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c4:	4b92      	ldr	r3, [pc, #584]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e9      	bne.n	80050a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 80a6 	beq.w	800522a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050de:	2300      	movs	r3, #0
 80050e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e2:	4b8b      	ldr	r3, [pc, #556]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10d      	bne.n	800510a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ee:	4b88      	ldr	r3, [pc, #544]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	4a87      	ldr	r2, [pc, #540]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 80050f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f8:	61d3      	str	r3, [r2, #28]
 80050fa:	4b85      	ldr	r3, [pc, #532]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005102:	60bb      	str	r3, [r7, #8]
 8005104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005106:	2301      	movs	r3, #1
 8005108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510a:	4b82      	ldr	r3, [pc, #520]	; (8005314 <HAL_RCC_OscConfig+0x4c8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005112:	2b00      	cmp	r3, #0
 8005114:	d118      	bne.n	8005148 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005116:	4b7f      	ldr	r3, [pc, #508]	; (8005314 <HAL_RCC_OscConfig+0x4c8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a7e      	ldr	r2, [pc, #504]	; (8005314 <HAL_RCC_OscConfig+0x4c8>)
 800511c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005122:	f7fd fe05 	bl	8002d30 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800512a:	f7fd fe01 	bl	8002d30 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b64      	cmp	r3, #100	; 0x64
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e103      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513c:	4b75      	ldr	r3, [pc, #468]	; (8005314 <HAL_RCC_OscConfig+0x4c8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d106      	bne.n	800515e <HAL_RCC_OscConfig+0x312>
 8005150:	4b6f      	ldr	r3, [pc, #444]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	4a6e      	ldr	r2, [pc, #440]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	6213      	str	r3, [r2, #32]
 800515c:	e02d      	b.n	80051ba <HAL_RCC_OscConfig+0x36e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10c      	bne.n	8005180 <HAL_RCC_OscConfig+0x334>
 8005166:	4b6a      	ldr	r3, [pc, #424]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	4a69      	ldr	r2, [pc, #420]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 800516c:	f023 0301 	bic.w	r3, r3, #1
 8005170:	6213      	str	r3, [r2, #32]
 8005172:	4b67      	ldr	r3, [pc, #412]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	4a66      	ldr	r2, [pc, #408]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 8005178:	f023 0304 	bic.w	r3, r3, #4
 800517c:	6213      	str	r3, [r2, #32]
 800517e:	e01c      	b.n	80051ba <HAL_RCC_OscConfig+0x36e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b05      	cmp	r3, #5
 8005186:	d10c      	bne.n	80051a2 <HAL_RCC_OscConfig+0x356>
 8005188:	4b61      	ldr	r3, [pc, #388]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	4a60      	ldr	r2, [pc, #384]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 800518e:	f043 0304 	orr.w	r3, r3, #4
 8005192:	6213      	str	r3, [r2, #32]
 8005194:	4b5e      	ldr	r3, [pc, #376]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	4a5d      	ldr	r2, [pc, #372]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	6213      	str	r3, [r2, #32]
 80051a0:	e00b      	b.n	80051ba <HAL_RCC_OscConfig+0x36e>
 80051a2:	4b5b      	ldr	r3, [pc, #364]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	4a5a      	ldr	r2, [pc, #360]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 80051a8:	f023 0301 	bic.w	r3, r3, #1
 80051ac:	6213      	str	r3, [r2, #32]
 80051ae:	4b58      	ldr	r3, [pc, #352]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	4a57      	ldr	r2, [pc, #348]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 80051b4:	f023 0304 	bic.w	r3, r3, #4
 80051b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d015      	beq.n	80051ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c2:	f7fd fdb5 	bl	8002d30 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c8:	e00a      	b.n	80051e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ca:	f7fd fdb1 	bl	8002d30 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d8:	4293      	cmp	r3, r2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e0b1      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e0:	4b4b      	ldr	r3, [pc, #300]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0ee      	beq.n	80051ca <HAL_RCC_OscConfig+0x37e>
 80051ec:	e014      	b.n	8005218 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ee:	f7fd fd9f 	bl	8002d30 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f4:	e00a      	b.n	800520c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f6:	f7fd fd9b 	bl	8002d30 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f241 3288 	movw	r2, #5000	; 0x1388
 8005204:	4293      	cmp	r3, r2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e09b      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520c:	4b40      	ldr	r3, [pc, #256]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1ee      	bne.n	80051f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d105      	bne.n	800522a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521e:	4b3c      	ldr	r3, [pc, #240]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	4a3b      	ldr	r2, [pc, #236]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 8005224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005228:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 8087 	beq.w	8005342 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005234:	4b36      	ldr	r3, [pc, #216]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 030c 	and.w	r3, r3, #12
 800523c:	2b08      	cmp	r3, #8
 800523e:	d061      	beq.n	8005304 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d146      	bne.n	80052d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005248:	4b33      	ldr	r3, [pc, #204]	; (8005318 <HAL_RCC_OscConfig+0x4cc>)
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524e:	f7fd fd6f 	bl	8002d30 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005256:	f7fd fd6b 	bl	8002d30 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e06d      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005268:	4b29      	ldr	r3, [pc, #164]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1f0      	bne.n	8005256 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800527c:	d108      	bne.n	8005290 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800527e:	4b24      	ldr	r3, [pc, #144]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	4921      	ldr	r1, [pc, #132]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 800528c:	4313      	orrs	r3, r2
 800528e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005290:	4b1f      	ldr	r3, [pc, #124]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a19      	ldr	r1, [r3, #32]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	430b      	orrs	r3, r1
 80052a2:	491b      	ldr	r1, [pc, #108]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a8:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <HAL_RCC_OscConfig+0x4cc>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ae:	f7fd fd3f 	bl	8002d30 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b6:	f7fd fd3b 	bl	8002d30 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e03d      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052c8:	4b11      	ldr	r3, [pc, #68]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0f0      	beq.n	80052b6 <HAL_RCC_OscConfig+0x46a>
 80052d4:	e035      	b.n	8005342 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d6:	4b10      	ldr	r3, [pc, #64]	; (8005318 <HAL_RCC_OscConfig+0x4cc>)
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052dc:	f7fd fd28 	bl	8002d30 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e4:	f7fd fd24 	bl	8002d30 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e026      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_RCC_OscConfig+0x4c4>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f0      	bne.n	80052e4 <HAL_RCC_OscConfig+0x498>
 8005302:	e01e      	b.n	8005342 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d107      	bne.n	800531c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e019      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
 8005310:	40021000 	.word	0x40021000
 8005314:	40007000 	.word	0x40007000
 8005318:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <HAL_RCC_OscConfig+0x500>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	429a      	cmp	r2, r3
 800532e:	d106      	bne.n	800533e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533a:	429a      	cmp	r2, r3
 800533c:	d001      	beq.n	8005342 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40021000 	.word	0x40021000

08005350 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0d0      	b.n	8005506 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005364:	4b6a      	ldr	r3, [pc, #424]	; (8005510 <HAL_RCC_ClockConfig+0x1c0>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d910      	bls.n	8005394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005372:	4b67      	ldr	r3, [pc, #412]	; (8005510 <HAL_RCC_ClockConfig+0x1c0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f023 0207 	bic.w	r2, r3, #7
 800537a:	4965      	ldr	r1, [pc, #404]	; (8005510 <HAL_RCC_ClockConfig+0x1c0>)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	4313      	orrs	r3, r2
 8005380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005382:	4b63      	ldr	r3, [pc, #396]	; (8005510 <HAL_RCC_ClockConfig+0x1c0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d001      	beq.n	8005394 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0b8      	b.n	8005506 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d020      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053ac:	4b59      	ldr	r3, [pc, #356]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	4a58      	ldr	r2, [pc, #352]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80053b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053c4:	4b53      	ldr	r3, [pc, #332]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	4a52      	ldr	r2, [pc, #328]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80053ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d0:	4b50      	ldr	r3, [pc, #320]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	494d      	ldr	r1, [pc, #308]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d040      	beq.n	8005470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d107      	bne.n	8005406 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f6:	4b47      	ldr	r3, [pc, #284]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d115      	bne.n	800542e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e07f      	b.n	8005506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d107      	bne.n	800541e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800540e:	4b41      	ldr	r3, [pc, #260]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e073      	b.n	8005506 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800541e:	4b3d      	ldr	r3, [pc, #244]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e06b      	b.n	8005506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800542e:	4b39      	ldr	r3, [pc, #228]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f023 0203 	bic.w	r2, r3, #3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4936      	ldr	r1, [pc, #216]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 800543c:	4313      	orrs	r3, r2
 800543e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005440:	f7fd fc76 	bl	8002d30 <HAL_GetTick>
 8005444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005446:	e00a      	b.n	800545e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005448:	f7fd fc72 	bl	8002d30 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	f241 3288 	movw	r2, #5000	; 0x1388
 8005456:	4293      	cmp	r3, r2
 8005458:	d901      	bls.n	800545e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e053      	b.n	8005506 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545e:	4b2d      	ldr	r3, [pc, #180]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f003 020c 	and.w	r2, r3, #12
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	429a      	cmp	r2, r3
 800546e:	d1eb      	bne.n	8005448 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005470:	4b27      	ldr	r3, [pc, #156]	; (8005510 <HAL_RCC_ClockConfig+0x1c0>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d210      	bcs.n	80054a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547e:	4b24      	ldr	r3, [pc, #144]	; (8005510 <HAL_RCC_ClockConfig+0x1c0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f023 0207 	bic.w	r2, r3, #7
 8005486:	4922      	ldr	r1, [pc, #136]	; (8005510 <HAL_RCC_ClockConfig+0x1c0>)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	4313      	orrs	r3, r2
 800548c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800548e:	4b20      	ldr	r3, [pc, #128]	; (8005510 <HAL_RCC_ClockConfig+0x1c0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d001      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e032      	b.n	8005506 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ac:	4b19      	ldr	r3, [pc, #100]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4916      	ldr	r1, [pc, #88]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054ca:	4b12      	ldr	r3, [pc, #72]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	490e      	ldr	r1, [pc, #56]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054de:	f000 f821 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 80054e2:	4602      	mov	r2, r0
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	490a      	ldr	r1, [pc, #40]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80054f0:	5ccb      	ldrb	r3, [r1, r3]
 80054f2:	fa22 f303 	lsr.w	r3, r2, r3
 80054f6:	4a09      	ldr	r2, [pc, #36]	; (800551c <HAL_RCC_ClockConfig+0x1cc>)
 80054f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054fa:	4b09      	ldr	r3, [pc, #36]	; (8005520 <HAL_RCC_ClockConfig+0x1d0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fd fbd4 	bl	8002cac <HAL_InitTick>

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40022000 	.word	0x40022000
 8005514:	40021000 	.word	0x40021000
 8005518:	0800c028 	.word	0x0800c028
 800551c:	20000008 	.word	0x20000008
 8005520:	2000000c 	.word	0x2000000c

08005524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005524:	b490      	push	{r4, r7}
 8005526:	b08a      	sub	sp, #40	; 0x28
 8005528:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800552a:	4b29      	ldr	r3, [pc, #164]	; (80055d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800552c:	1d3c      	adds	r4, r7, #4
 800552e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005534:	f240 2301 	movw	r3, #513	; 0x201
 8005538:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	61fb      	str	r3, [r7, #28]
 800553e:	2300      	movs	r3, #0
 8005540:	61bb      	str	r3, [r7, #24]
 8005542:	2300      	movs	r3, #0
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800554e:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	2b04      	cmp	r3, #4
 800555c:	d002      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0x40>
 800555e:	2b08      	cmp	r3, #8
 8005560:	d003      	beq.n	800556a <HAL_RCC_GetSysClockFreq+0x46>
 8005562:	e02b      	b.n	80055bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005564:	4b1c      	ldr	r3, [pc, #112]	; (80055d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005566:	623b      	str	r3, [r7, #32]
      break;
 8005568:	e02b      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	0c9b      	lsrs	r3, r3, #18
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	3328      	adds	r3, #40	; 0x28
 8005574:	443b      	add	r3, r7
 8005576:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800557a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d012      	beq.n	80055ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005586:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	0c5b      	lsrs	r3, r3, #17
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	3328      	adds	r3, #40	; 0x28
 8005592:	443b      	add	r3, r7
 8005594:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005598:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	4a0e      	ldr	r2, [pc, #56]	; (80055d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800559e:	fb03 f202 	mul.w	r2, r3, r2
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
 80055aa:	e004      	b.n	80055b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	4a0b      	ldr	r2, [pc, #44]	; (80055dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b0:	fb02 f303 	mul.w	r3, r2, r3
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	623b      	str	r3, [r7, #32]
      break;
 80055ba:	e002      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055bc:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80055be:	623b      	str	r3, [r7, #32]
      break;
 80055c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055c2:	6a3b      	ldr	r3, [r7, #32]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3728      	adds	r7, #40	; 0x28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc90      	pop	{r4, r7}
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	0800c008 	.word	0x0800c008
 80055d4:	40021000 	.word	0x40021000
 80055d8:	007a1200 	.word	0x007a1200
 80055dc:	003d0900 	.word	0x003d0900

080055e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055e4:	4b02      	ldr	r3, [pc, #8]	; (80055f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80055e6:	681b      	ldr	r3, [r3, #0]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr
 80055f0:	20000008 	.word	0x20000008

080055f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055f8:	f7ff fff2 	bl	80055e0 <HAL_RCC_GetHCLKFreq>
 80055fc:	4602      	mov	r2, r0
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	0a1b      	lsrs	r3, r3, #8
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	4903      	ldr	r1, [pc, #12]	; (8005618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800560a:	5ccb      	ldrb	r3, [r1, r3]
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005610:	4618      	mov	r0, r3
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40021000 	.word	0x40021000
 8005618:	0800c038 	.word	0x0800c038

0800561c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005620:	f7ff ffde 	bl	80055e0 <HAL_RCC_GetHCLKFreq>
 8005624:	4602      	mov	r2, r0
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	0adb      	lsrs	r3, r3, #11
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	4903      	ldr	r1, [pc, #12]	; (8005640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005632:	5ccb      	ldrb	r3, [r1, r3]
 8005634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005638:	4618      	mov	r0, r3
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40021000 	.word	0x40021000
 8005640:	0800c038 	.word	0x0800c038

08005644 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <RCC_Delay+0x34>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a0a      	ldr	r2, [pc, #40]	; (800567c <RCC_Delay+0x38>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	0a5b      	lsrs	r3, r3, #9
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	fb02 f303 	mul.w	r3, r2, r3
 800565e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005660:	bf00      	nop
  }
  while (Delay --);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1e5a      	subs	r2, r3, #1
 8005666:	60fa      	str	r2, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f9      	bne.n	8005660 <RCC_Delay+0x1c>
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	bc80      	pop	{r7}
 8005676:	4770      	bx	lr
 8005678:	20000008 	.word	0x20000008
 800567c:	10624dd3 	.word	0x10624dd3

08005680 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d07d      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800569c:	2300      	movs	r3, #0
 800569e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a0:	4b4f      	ldr	r3, [pc, #316]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10d      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ac:	4b4c      	ldr	r3, [pc, #304]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	4a4b      	ldr	r2, [pc, #300]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b6:	61d3      	str	r3, [r2, #28]
 80056b8:	4b49      	ldr	r3, [pc, #292]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056c4:	2301      	movs	r3, #1
 80056c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c8:	4b46      	ldr	r3, [pc, #280]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d118      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056d4:	4b43      	ldr	r3, [pc, #268]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a42      	ldr	r2, [pc, #264]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056e0:	f7fd fb26 	bl	8002d30 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e6:	e008      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e8:	f7fd fb22 	bl	8002d30 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b64      	cmp	r3, #100	; 0x64
 80056f4:	d901      	bls.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e06d      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fa:	4b3a      	ldr	r3, [pc, #232]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005706:	4b36      	ldr	r3, [pc, #216]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d02e      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	429a      	cmp	r2, r3
 8005722:	d027      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005724:	4b2e      	ldr	r3, [pc, #184]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800572e:	4b2e      	ldr	r3, [pc, #184]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005730:	2201      	movs	r2, #1
 8005732:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005734:	4b2c      	ldr	r3, [pc, #176]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800573a:	4a29      	ldr	r2, [pc, #164]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d014      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574a:	f7fd faf1 	bl	8002d30 <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005750:	e00a      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005752:	f7fd faed 	bl	8002d30 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005760:	4293      	cmp	r3, r2
 8005762:	d901      	bls.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e036      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005768:	4b1d      	ldr	r3, [pc, #116]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0ee      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005774:	4b1a      	ldr	r3, [pc, #104]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4917      	ldr	r1, [pc, #92]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005782:	4313      	orrs	r3, r2
 8005784:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005786:	7dfb      	ldrb	r3, [r7, #23]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d105      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800578c:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005796:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057a4:	4b0e      	ldr	r3, [pc, #56]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	490b      	ldr	r1, [pc, #44]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057c2:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	4904      	ldr	r1, [pc, #16]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40021000 	.word	0x40021000
 80057e4:	40007000 	.word	0x40007000
 80057e8:	42420440 	.word	0x42420440

080057ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80057ec:	b590      	push	{r4, r7, lr}
 80057ee:	b08d      	sub	sp, #52	; 0x34
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80057f4:	4b58      	ldr	r3, [pc, #352]	; (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80057f6:	f107 040c 	add.w	r4, r7, #12
 80057fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005800:	f240 2301 	movw	r3, #513	; 0x201
 8005804:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
 800580a:	2300      	movs	r3, #0
 800580c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800580e:	2300      	movs	r3, #0
 8005810:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	2300      	movs	r3, #0
 8005818:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b10      	cmp	r3, #16
 800581e:	d00a      	beq.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b10      	cmp	r3, #16
 8005824:	f200 808e 	bhi.w	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d049      	beq.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b02      	cmp	r3, #2
 8005832:	d079      	beq.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005834:	e086      	b.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8005836:	4b49      	ldr	r3, [pc, #292]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800583c:	4b47      	ldr	r3, [pc, #284]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d07f      	beq.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	0c9b      	lsrs	r3, r3, #18
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	3330      	adds	r3, #48	; 0x30
 8005852:	443b      	add	r3, r7
 8005854:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005858:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d017      	beq.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005864:	4b3d      	ldr	r3, [pc, #244]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	0c5b      	lsrs	r3, r3, #17
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	3330      	adds	r3, #48	; 0x30
 8005870:	443b      	add	r3, r7
 8005872:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00d      	beq.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005882:	4a37      	ldr	r2, [pc, #220]	; (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	fbb2 f2f3 	udiv	r2, r2, r3
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	fb02 f303 	mul.w	r3, r2, r3
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005892:	e004      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	4a33      	ldr	r2, [pc, #204]	; (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005898:	fb02 f303 	mul.w	r3, r2, r3
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800589e:	4b2f      	ldr	r3, [pc, #188]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058aa:	d102      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80058ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80058b0:	e04a      	b.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	4a2c      	ldr	r2, [pc, #176]	; (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80058b8:	fba2 2303 	umull	r2, r3, r2, r3
 80058bc:	085b      	lsrs	r3, r3, #1
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80058c0:	e042      	b.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80058c2:	4b26      	ldr	r3, [pc, #152]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d2:	d108      	bne.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80058de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058e4:	e01f      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f0:	d109      	bne.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80058f2:	4b1a      	ldr	r3, [pc, #104]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80058fe:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005902:	62bb      	str	r3, [r7, #40]	; 0x28
 8005904:	e00f      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005910:	d11c      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005912:	4b12      	ldr	r3, [pc, #72]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800591e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005924:	e012      	b.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005926:	e011      	b.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005928:	f7ff fe78 	bl	800561c <HAL_RCC_GetPCLK2Freq>
 800592c:	4602      	mov	r2, r0
 800592e:	4b0b      	ldr	r3, [pc, #44]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	0b9b      	lsrs	r3, r3, #14
 8005934:	f003 0303 	and.w	r3, r3, #3
 8005938:	3301      	adds	r3, #1
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005940:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005942:	e004      	b.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005944:	bf00      	nop
 8005946:	e002      	b.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005948:	bf00      	nop
 800594a:	e000      	b.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800594c:	bf00      	nop
    }
  }
  return (frequency);
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005950:	4618      	mov	r0, r3
 8005952:	3734      	adds	r7, #52	; 0x34
 8005954:	46bd      	mov	sp, r7
 8005956:	bd90      	pop	{r4, r7, pc}
 8005958:	0800c018 	.word	0x0800c018
 800595c:	40021000 	.word	0x40021000
 8005960:	007a1200 	.word	0x007a1200
 8005964:	003d0900 	.word	0x003d0900
 8005968:	aaaaaaab 	.word	0xaaaaaaab

0800596c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e041      	b.n	8005a02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fc ff8a 	bl	80028ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f000 fc28 	bl	8006200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d001      	beq.n	8005a24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e03a      	b.n	8005a9a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a18      	ldr	r2, [pc, #96]	; (8005aa4 <HAL_TIM_Base_Start_IT+0x98>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00e      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x58>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4e:	d009      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x58>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a14      	ldr	r2, [pc, #80]	; (8005aa8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x58>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a13      	ldr	r2, [pc, #76]	; (8005aac <HAL_TIM_Base_Start_IT+0xa0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d111      	bne.n	8005a88 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b06      	cmp	r3, #6
 8005a74:	d010      	beq.n	8005a98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0201 	orr.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a86:	e007      	b.n	8005a98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr
 8005aa4:	40012c00 	.word	0x40012c00
 8005aa8:	40000400 	.word	0x40000400
 8005aac:	40000800 	.word	0x40000800

08005ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e041      	b.n	8005b46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f839 	bl	8005b4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f000 fb86 	bl	8006200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr

08005b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d109      	bne.n	8005b84 <HAL_TIM_PWM_Start+0x24>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	bf14      	ite	ne
 8005b7c:	2301      	movne	r3, #1
 8005b7e:	2300      	moveq	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	e022      	b.n	8005bca <HAL_TIM_PWM_Start+0x6a>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d109      	bne.n	8005b9e <HAL_TIM_PWM_Start+0x3e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	bf14      	ite	ne
 8005b96:	2301      	movne	r3, #1
 8005b98:	2300      	moveq	r3, #0
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	e015      	b.n	8005bca <HAL_TIM_PWM_Start+0x6a>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d109      	bne.n	8005bb8 <HAL_TIM_PWM_Start+0x58>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	bf14      	ite	ne
 8005bb0:	2301      	movne	r3, #1
 8005bb2:	2300      	moveq	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	e008      	b.n	8005bca <HAL_TIM_PWM_Start+0x6a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	bf14      	ite	ne
 8005bc4:	2301      	movne	r3, #1
 8005bc6:	2300      	moveq	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e05e      	b.n	8005c90 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d104      	bne.n	8005be2 <HAL_TIM_PWM_Start+0x82>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005be0:	e013      	b.n	8005c0a <HAL_TIM_PWM_Start+0xaa>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d104      	bne.n	8005bf2 <HAL_TIM_PWM_Start+0x92>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf0:	e00b      	b.n	8005c0a <HAL_TIM_PWM_Start+0xaa>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d104      	bne.n	8005c02 <HAL_TIM_PWM_Start+0xa2>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c00:	e003      	b.n	8005c0a <HAL_TIM_PWM_Start+0xaa>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fd74 	bl	8006700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1e      	ldr	r2, [pc, #120]	; (8005c98 <HAL_TIM_PWM_Start+0x138>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d107      	bne.n	8005c32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a18      	ldr	r2, [pc, #96]	; (8005c98 <HAL_TIM_PWM_Start+0x138>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00e      	beq.n	8005c5a <HAL_TIM_PWM_Start+0xfa>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c44:	d009      	beq.n	8005c5a <HAL_TIM_PWM_Start+0xfa>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a14      	ldr	r2, [pc, #80]	; (8005c9c <HAL_TIM_PWM_Start+0x13c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d004      	beq.n	8005c5a <HAL_TIM_PWM_Start+0xfa>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a12      	ldr	r2, [pc, #72]	; (8005ca0 <HAL_TIM_PWM_Start+0x140>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d111      	bne.n	8005c7e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b06      	cmp	r3, #6
 8005c6a:	d010      	beq.n	8005c8e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7c:	e007      	b.n	8005c8e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0201 	orr.w	r2, r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40012c00 	.word	0x40012c00
 8005c9c:	40000400 	.word	0x40000400
 8005ca0:	40000800 	.word	0x40000800

08005ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d122      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d11b      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0202 	mvn.w	r2, #2
 8005cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fa6f 	bl	80061ca <HAL_TIM_IC_CaptureCallback>
 8005cec:	e005      	b.n	8005cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fa62 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fa71 	bl	80061dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d122      	bne.n	8005d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d11b      	bne.n	8005d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0204 	mvn.w	r2, #4
 8005d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fa45 	bl	80061ca <HAL_TIM_IC_CaptureCallback>
 8005d40:	e005      	b.n	8005d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fa38 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fa47 	bl	80061dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d122      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d11b      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0208 	mvn.w	r2, #8
 8005d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa1b 	bl	80061ca <HAL_TIM_IC_CaptureCallback>
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa0e 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fa1d 	bl	80061dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b10      	cmp	r3, #16
 8005db4:	d122      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b10      	cmp	r3, #16
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0210 	mvn.w	r2, #16
 8005dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f9f1 	bl	80061ca <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f9e4 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f9f3 	bl	80061dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d10e      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d107      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0201 	mvn.w	r2, #1
 8005e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fc fafa 	bl	800241c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e32:	2b80      	cmp	r3, #128	; 0x80
 8005e34:	d10e      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e40:	2b80      	cmp	r3, #128	; 0x80
 8005e42:	d107      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fce1 	bl	8006816 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b40      	cmp	r3, #64	; 0x40
 8005e60:	d10e      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d107      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f9b7 	bl	80061ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	d10e      	bne.n	8005eac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d107      	bne.n	8005eac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0220 	mvn.w	r2, #32
 8005ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fcac 	bl	8006804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eac:	bf00      	nop
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e0ac      	b.n	8006028 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b0c      	cmp	r3, #12
 8005eda:	f200 809f 	bhi.w	800601c <HAL_TIM_PWM_ConfigChannel+0x168>
 8005ede:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee4:	08005f19 	.word	0x08005f19
 8005ee8:	0800601d 	.word	0x0800601d
 8005eec:	0800601d 	.word	0x0800601d
 8005ef0:	0800601d 	.word	0x0800601d
 8005ef4:	08005f59 	.word	0x08005f59
 8005ef8:	0800601d 	.word	0x0800601d
 8005efc:	0800601d 	.word	0x0800601d
 8005f00:	0800601d 	.word	0x0800601d
 8005f04:	08005f9b 	.word	0x08005f9b
 8005f08:	0800601d 	.word	0x0800601d
 8005f0c:	0800601d 	.word	0x0800601d
 8005f10:	0800601d 	.word	0x0800601d
 8005f14:	08005fdb 	.word	0x08005fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 f9d0 	bl	80062c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0208 	orr.w	r2, r2, #8
 8005f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0204 	bic.w	r2, r2, #4
 8005f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6999      	ldr	r1, [r3, #24]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	619a      	str	r2, [r3, #24]
      break;
 8005f56:	e062      	b.n	800601e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fa16 	bl	8006390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6999      	ldr	r1, [r3, #24]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	021a      	lsls	r2, r3, #8
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	619a      	str	r2, [r3, #24]
      break;
 8005f98:	e041      	b.n	800601e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fa5f 	bl	8006464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69da      	ldr	r2, [r3, #28]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0208 	orr.w	r2, r2, #8
 8005fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69da      	ldr	r2, [r3, #28]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0204 	bic.w	r2, r2, #4
 8005fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69d9      	ldr	r1, [r3, #28]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	61da      	str	r2, [r3, #28]
      break;
 8005fd8:	e021      	b.n	800601e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 faa9 	bl	8006538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69da      	ldr	r2, [r3, #28]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69da      	ldr	r2, [r3, #28]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69d9      	ldr	r1, [r3, #28]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	021a      	lsls	r2, r3, #8
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	61da      	str	r2, [r3, #28]
      break;
 800601a:	e000      	b.n	800601e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800601c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_TIM_ConfigClockSource+0x18>
 8006044:	2302      	movs	r3, #2
 8006046:	e0b3      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x180>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006066:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800606e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006080:	d03e      	beq.n	8006100 <HAL_TIM_ConfigClockSource+0xd0>
 8006082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006086:	f200 8087 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x168>
 800608a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608e:	f000 8085 	beq.w	800619c <HAL_TIM_ConfigClockSource+0x16c>
 8006092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006096:	d87f      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x168>
 8006098:	2b70      	cmp	r3, #112	; 0x70
 800609a:	d01a      	beq.n	80060d2 <HAL_TIM_ConfigClockSource+0xa2>
 800609c:	2b70      	cmp	r3, #112	; 0x70
 800609e:	d87b      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x168>
 80060a0:	2b60      	cmp	r3, #96	; 0x60
 80060a2:	d050      	beq.n	8006146 <HAL_TIM_ConfigClockSource+0x116>
 80060a4:	2b60      	cmp	r3, #96	; 0x60
 80060a6:	d877      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x168>
 80060a8:	2b50      	cmp	r3, #80	; 0x50
 80060aa:	d03c      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0xf6>
 80060ac:	2b50      	cmp	r3, #80	; 0x50
 80060ae:	d873      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x168>
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	d058      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0x136>
 80060b4:	2b40      	cmp	r3, #64	; 0x40
 80060b6:	d86f      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x168>
 80060b8:	2b30      	cmp	r3, #48	; 0x30
 80060ba:	d064      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x156>
 80060bc:	2b30      	cmp	r3, #48	; 0x30
 80060be:	d86b      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x168>
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d060      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x156>
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d867      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x168>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d05c      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x156>
 80060cc:	2b10      	cmp	r3, #16
 80060ce:	d05a      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80060d0:	e062      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	6899      	ldr	r1, [r3, #8]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f000 faee 	bl	80066c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	609a      	str	r2, [r3, #8]
      break;
 80060fe:	e04e      	b.n	800619e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	6899      	ldr	r1, [r3, #8]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f000 fad7 	bl	80066c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006122:	609a      	str	r2, [r3, #8]
      break;
 8006124:	e03b      	b.n	800619e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6818      	ldr	r0, [r3, #0]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	6859      	ldr	r1, [r3, #4]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	461a      	mov	r2, r3
 8006134:	f000 fa4e 	bl	80065d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2150      	movs	r1, #80	; 0x50
 800613e:	4618      	mov	r0, r3
 8006140:	f000 faa5 	bl	800668e <TIM_ITRx_SetConfig>
      break;
 8006144:	e02b      	b.n	800619e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6859      	ldr	r1, [r3, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	461a      	mov	r2, r3
 8006154:	f000 fa6c 	bl	8006630 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2160      	movs	r1, #96	; 0x60
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fa95 	bl	800668e <TIM_ITRx_SetConfig>
      break;
 8006164:	e01b      	b.n	800619e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6859      	ldr	r1, [r3, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	461a      	mov	r2, r3
 8006174:	f000 fa2e 	bl	80065d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2140      	movs	r1, #64	; 0x40
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fa85 	bl	800668e <TIM_ITRx_SetConfig>
      break;
 8006184:	e00b      	b.n	800619e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f000 fa7c 	bl	800668e <TIM_ITRx_SetConfig>
        break;
 8006196:	e002      	b.n	800619e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006198:	bf00      	nop
 800619a:	e000      	b.n	800619e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800619c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr

080061ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr

080061ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a29      	ldr	r2, [pc, #164]	; (80062b8 <TIM_Base_SetConfig+0xb8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d00b      	beq.n	8006230 <TIM_Base_SetConfig+0x30>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621e:	d007      	beq.n	8006230 <TIM_Base_SetConfig+0x30>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a26      	ldr	r2, [pc, #152]	; (80062bc <TIM_Base_SetConfig+0xbc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d003      	beq.n	8006230 <TIM_Base_SetConfig+0x30>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a25      	ldr	r2, [pc, #148]	; (80062c0 <TIM_Base_SetConfig+0xc0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d108      	bne.n	8006242 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a1c      	ldr	r2, [pc, #112]	; (80062b8 <TIM_Base_SetConfig+0xb8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00b      	beq.n	8006262 <TIM_Base_SetConfig+0x62>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006250:	d007      	beq.n	8006262 <TIM_Base_SetConfig+0x62>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a19      	ldr	r2, [pc, #100]	; (80062bc <TIM_Base_SetConfig+0xbc>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d003      	beq.n	8006262 <TIM_Base_SetConfig+0x62>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a18      	ldr	r2, [pc, #96]	; (80062c0 <TIM_Base_SetConfig+0xc0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d108      	bne.n	8006274 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a07      	ldr	r2, [pc, #28]	; (80062b8 <TIM_Base_SetConfig+0xb8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d103      	bne.n	80062a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	615a      	str	r2, [r3, #20]
}
 80062ae:	bf00      	nop
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr
 80062b8:	40012c00 	.word	0x40012c00
 80062bc:	40000400 	.word	0x40000400
 80062c0:	40000800 	.word	0x40000800

080062c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	f023 0201 	bic.w	r2, r3, #1
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0303 	bic.w	r3, r3, #3
 80062fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f023 0302 	bic.w	r3, r3, #2
 800630c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a1c      	ldr	r2, [pc, #112]	; (800638c <TIM_OC1_SetConfig+0xc8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d10c      	bne.n	800633a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f023 0308 	bic.w	r3, r3, #8
 8006326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	4313      	orrs	r3, r2
 8006330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f023 0304 	bic.w	r3, r3, #4
 8006338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a13      	ldr	r2, [pc, #76]	; (800638c <TIM_OC1_SetConfig+0xc8>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d111      	bne.n	8006366 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	621a      	str	r2, [r3, #32]
}
 8006380:	bf00      	nop
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	bc80      	pop	{r7}
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	40012c00 	.word	0x40012c00

08006390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f023 0210 	bic.w	r2, r3, #16
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f023 0320 	bic.w	r3, r3, #32
 80063da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a1d      	ldr	r2, [pc, #116]	; (8006460 <TIM_OC2_SetConfig+0xd0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d10d      	bne.n	800640c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a14      	ldr	r2, [pc, #80]	; (8006460 <TIM_OC2_SetConfig+0xd0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d113      	bne.n	800643c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800641a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006422:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr
 8006460:	40012c00 	.word	0x40012c00

08006464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0303 	bic.w	r3, r3, #3
 800649a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a1d      	ldr	r2, [pc, #116]	; (8006534 <TIM_OC3_SetConfig+0xd0>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d10d      	bne.n	80064de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	021b      	lsls	r3, r3, #8
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a14      	ldr	r2, [pc, #80]	; (8006534 <TIM_OC3_SetConfig+0xd0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d113      	bne.n	800650e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	011b      	lsls	r3, r3, #4
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	4313      	orrs	r3, r2
 8006500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	621a      	str	r2, [r3, #32]
}
 8006528:	bf00      	nop
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40012c00 	.word	0x40012c00

08006538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	031b      	lsls	r3, r3, #12
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	4313      	orrs	r3, r2
 800658e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a0f      	ldr	r2, [pc, #60]	; (80065d0 <TIM_OC4_SetConfig+0x98>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d109      	bne.n	80065ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800659e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	019b      	lsls	r3, r3, #6
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	621a      	str	r2, [r3, #32]
}
 80065c6:	bf00      	nop
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	40012c00 	.word	0x40012c00

080065d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	f023 0201 	bic.w	r2, r3, #1
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f023 030a 	bic.w	r3, r3, #10
 8006610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	621a      	str	r2, [r3, #32]
}
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr

08006630 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	f023 0210 	bic.w	r2, r3, #16
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800665a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	031b      	lsls	r3, r3, #12
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800666c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	011b      	lsls	r3, r3, #4
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	4313      	orrs	r3, r2
 8006676:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	621a      	str	r2, [r3, #32]
}
 8006684:	bf00      	nop
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr

0800668e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800668e:	b480      	push	{r7}
 8006690:	b085      	sub	sp, #20
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f043 0307 	orr.w	r3, r3, #7
 80066b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	609a      	str	r2, [r3, #8]
}
 80066b8:	bf00      	nop
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	bc80      	pop	{r7}
 80066c0:	4770      	bx	lr

080066c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b087      	sub	sp, #28
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	607a      	str	r2, [r7, #4]
 80066ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	021a      	lsls	r2, r3, #8
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	431a      	orrs	r2, r3
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	609a      	str	r2, [r3, #8]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bc80      	pop	{r7}
 80066fe:	4770      	bx	lr

08006700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 031f 	and.w	r3, r3, #31
 8006712:	2201      	movs	r2, #1
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a1a      	ldr	r2, [r3, #32]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	43db      	mvns	r3, r3
 8006722:	401a      	ands	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	fa01 f303 	lsl.w	r3, r1, r3
 8006738:	431a      	orrs	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	621a      	str	r2, [r3, #32]
}
 800673e:	bf00      	nop
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr

08006748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800675c:	2302      	movs	r3, #2
 800675e:	e046      	b.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a16      	ldr	r2, [pc, #88]	; (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00e      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ac:	d009      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a12      	ldr	r2, [pc, #72]	; (80067fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d004      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a10      	ldr	r2, [pc, #64]	; (8006800 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d10c      	bne.n	80067dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr
 80067f8:	40012c00 	.word	0x40012c00
 80067fc:	40000400 	.word	0x40000400
 8006800:	40000800 	.word	0x40000800

08006804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr

08006816 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr

08006828 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e03f      	b.n	80068ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fc f896 	bl	8002980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2224      	movs	r2, #36	; 0x24
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800686a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fc85 	bl	800717c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691a      	ldr	r2, [r3, #16]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695a      	ldr	r2, [r3, #20]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006890:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b08a      	sub	sp, #40	; 0x28
 80068c6:	af02      	add	r7, sp, #8
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	603b      	str	r3, [r7, #0]
 80068ce:	4613      	mov	r3, r2
 80068d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d17c      	bne.n	80069dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <HAL_UART_Transmit+0x2c>
 80068e8:	88fb      	ldrh	r3, [r7, #6]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e075      	b.n	80069de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_UART_Transmit+0x3e>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e06e      	b.n	80069de <HAL_UART_Transmit+0x11c>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2221      	movs	r2, #33	; 0x21
 8006912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006916:	f7fc fa0b 	bl	8002d30 <HAL_GetTick>
 800691a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	88fa      	ldrh	r2, [r7, #6]
 8006920:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	88fa      	ldrh	r2, [r7, #6]
 8006926:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006930:	d108      	bne.n	8006944 <HAL_UART_Transmit+0x82>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d104      	bne.n	8006944 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800693a:	2300      	movs	r3, #0
 800693c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	e003      	b.n	800694c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006948:	2300      	movs	r3, #0
 800694a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006954:	e02a      	b.n	80069ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2200      	movs	r2, #0
 800695e:	2180      	movs	r1, #128	; 0x80
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 fa38 	bl	8006dd6 <UART_WaitOnFlagUntilTimeout>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e036      	b.n	80069de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006984:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	3302      	adds	r3, #2
 800698a:	61bb      	str	r3, [r7, #24]
 800698c:	e007      	b.n	800699e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	781a      	ldrb	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	3301      	adds	r3, #1
 800699c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	3b01      	subs	r3, #1
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1cf      	bne.n	8006956 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2200      	movs	r2, #0
 80069be:	2140      	movs	r1, #64	; 0x40
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 fa08 	bl	8006dd6 <UART_WaitOnFlagUntilTimeout>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e006      	b.n	80069de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	e000      	b.n	80069de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80069dc:	2302      	movs	r3, #2
  }
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3720      	adds	r7, #32
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	4613      	mov	r3, r2
 80069f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d11d      	bne.n	8006a3c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <HAL_UART_Receive_IT+0x26>
 8006a06:	88fb      	ldrh	r3, [r7, #6]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e016      	b.n	8006a3e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d101      	bne.n	8006a1e <HAL_UART_Receive_IT+0x38>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	e00f      	b.n	8006a3e <HAL_UART_Receive_IT+0x58>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006a2c:	88fb      	ldrh	r3, [r7, #6]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	68b9      	ldr	r1, [r7, #8]
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 fa19 	bl	8006e6a <UART_Start_Receive_IT>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	e000      	b.n	8006a3e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006a3c:	2302      	movs	r3, #2
  }
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	; 0x28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	f003 030f 	and.w	r3, r3, #15
 8006a76:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10d      	bne.n	8006a9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_UART_IRQHandler+0x52>
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fac9 	bl	800702a <UART_Receive_IT>
      return;
 8006a98:	e17b      	b.n	8006d92 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80b1 	beq.w	8006c04 <HAL_UART_IRQHandler+0x1bc>
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d105      	bne.n	8006ab8 <HAL_UART_IRQHandler+0x70>
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 80a6 	beq.w	8006c04 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x90>
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	f043 0201 	orr.w	r2, r3, #1
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <HAL_UART_IRQHandler+0xb0>
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	f043 0202 	orr.w	r2, r3, #2
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <HAL_UART_IRQHandler+0xd0>
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d005      	beq.n	8006b18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	f043 0204 	orr.w	r2, r3, #4
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00f      	beq.n	8006b42 <HAL_UART_IRQHandler+0xfa>
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	f003 0320 	and.w	r3, r3, #32
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <HAL_UART_IRQHandler+0xee>
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f043 0208 	orr.w	r2, r3, #8
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 811e 	beq.w	8006d88 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d007      	beq.n	8006b66 <HAL_UART_IRQHandler+0x11e>
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fa62 	bl	800702a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	bf14      	ite	ne
 8006b74:	2301      	movne	r3, #1
 8006b76:	2300      	moveq	r3, #0
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d102      	bne.n	8006b8e <HAL_UART_IRQHandler+0x146>
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d031      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f9a4 	bl	8006edc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d023      	beq.n	8006bea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	695a      	ldr	r2, [r3, #20]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d013      	beq.n	8006be2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	4a76      	ldr	r2, [pc, #472]	; (8006d98 <HAL_UART_IRQHandler+0x350>)
 8006bc0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fc ff0c 	bl	80039e4 <HAL_DMA_Abort_IT>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d016      	beq.n	8006c00 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006bdc:	4610      	mov	r0, r2
 8006bde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be0:	e00e      	b.n	8006c00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f8e3 	bl	8006dae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be8:	e00a      	b.n	8006c00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f8df 	bl	8006dae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf0:	e006      	b.n	8006c00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f8db 	bl	8006dae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006bfe:	e0c3      	b.n	8006d88 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c00:	bf00      	nop
    return;
 8006c02:	e0c1      	b.n	8006d88 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	f040 80a1 	bne.w	8006d50 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	f003 0310 	and.w	r3, r3, #16
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 809b 	beq.w	8006d50 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	f003 0310 	and.w	r3, r3, #16
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 8095 	beq.w	8006d50 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d04e      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006c54:	8a3b      	ldrh	r3, [r7, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 8098 	beq.w	8006d8c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c60:	8a3a      	ldrh	r2, [r7, #16]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	f080 8092 	bcs.w	8006d8c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8a3a      	ldrh	r2, [r7, #16]
 8006c6c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d02b      	beq.n	8006cd0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c86:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695a      	ldr	r2, [r3, #20]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0201 	bic.w	r2, r2, #1
 8006c96:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695a      	ldr	r2, [r3, #20]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68da      	ldr	r2, [r3, #12]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0210 	bic.w	r2, r2, #16
 8006cc4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fc fe4f 	bl	800396e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f86d 	bl	8006dc0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ce6:	e051      	b.n	8006d8c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d047      	beq.n	8006d90 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006d00:	8a7b      	ldrh	r3, [r7, #18]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d044      	beq.n	8006d90 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d14:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695a      	ldr	r2, [r3, #20]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0201 	bic.w	r2, r2, #1
 8006d24:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0210 	bic.w	r2, r2, #16
 8006d42:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d44:	8a7b      	ldrh	r3, [r7, #18]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f839 	bl	8006dc0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006d4e:	e01f      	b.n	8006d90 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d008      	beq.n	8006d6c <HAL_UART_IRQHandler+0x324>
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f8f9 	bl	8006f5c <UART_Transmit_IT>
    return;
 8006d6a:	e012      	b.n	8006d92 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00d      	beq.n	8006d92 <HAL_UART_IRQHandler+0x34a>
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d008      	beq.n	8006d92 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f93a 	bl	8006ffa <UART_EndTransmit_IT>
    return;
 8006d86:	e004      	b.n	8006d92 <HAL_UART_IRQHandler+0x34a>
    return;
 8006d88:	bf00      	nop
 8006d8a:	e002      	b.n	8006d92 <HAL_UART_IRQHandler+0x34a>
      return;
 8006d8c:	bf00      	nop
 8006d8e:	e000      	b.n	8006d92 <HAL_UART_IRQHandler+0x34a>
      return;
 8006d90:	bf00      	nop
  }
}
 8006d92:	3728      	adds	r7, #40	; 0x28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	08006f35 	.word	0x08006f35

08006d9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr

08006dae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bc80      	pop	{r7}
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr

08006dd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	4613      	mov	r3, r2
 8006de4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de6:	e02c      	b.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dee:	d028      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d007      	beq.n	8006e06 <UART_WaitOnFlagUntilTimeout+0x30>
 8006df6:	f7fb ff9b 	bl	8002d30 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d21d      	bcs.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e14:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695a      	ldr	r2, [r3, #20]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0201 	bic.w	r2, r2, #1
 8006e24:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e00f      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	bf0c      	ite	eq
 8006e52:	2301      	moveq	r3, #1
 8006e54:	2300      	movne	r3, #0
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d0c3      	beq.n	8006de8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	4613      	mov	r3, r2
 8006e76:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	88fa      	ldrh	r2, [r7, #6]
 8006e82:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	88fa      	ldrh	r2, [r7, #6]
 8006e88:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2222      	movs	r2, #34	; 0x22
 8006e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eae:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	695a      	ldr	r2, [r3, #20]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0201 	orr.w	r2, r2, #1
 8006ebe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0220 	orr.w	r2, r2, #32
 8006ece:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr

08006edc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ef2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695a      	ldr	r2, [r3, #20]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0201 	bic.w	r2, r2, #1
 8006f02:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d107      	bne.n	8006f1c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0210 	bic.w	r2, r2, #16
 8006f1a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bc80      	pop	{r7}
 8006f32:	4770      	bx	lr

08006f34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f7ff ff2d 	bl	8006dae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f54:	bf00      	nop
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b21      	cmp	r3, #33	; 0x21
 8006f6e:	d13e      	bne.n	8006fee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f78:	d114      	bne.n	8006fa4 <UART_Transmit_IT+0x48>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d110      	bne.n	8006fa4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	1c9a      	adds	r2, r3, #2
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	621a      	str	r2, [r3, #32]
 8006fa2:	e008      	b.n	8006fb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	1c59      	adds	r1, r3, #1
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	6211      	str	r1, [r2, #32]
 8006fae:	781a      	ldrb	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10f      	bne.n	8006fea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fe8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	e000      	b.n	8006ff0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fee:	2302      	movs	r3, #2
  }
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bc80      	pop	{r7}
 8006ff8:	4770      	bx	lr

08006ffa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007010:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2220      	movs	r2, #32
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7ff febe 	bl	8006d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b086      	sub	sp, #24
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b22      	cmp	r3, #34	; 0x22
 800703c:	f040 8099 	bne.w	8007172 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007048:	d117      	bne.n	800707a <UART_Receive_IT+0x50>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d113      	bne.n	800707a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	b29b      	uxth	r3, r3
 8007064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007068:	b29a      	uxth	r2, r3
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007072:	1c9a      	adds	r2, r3, #2
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	629a      	str	r2, [r3, #40]	; 0x28
 8007078:	e026      	b.n	80070c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007080:	2300      	movs	r3, #0
 8007082:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800708c:	d007      	beq.n	800709e <UART_Receive_IT+0x74>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10a      	bne.n	80070ac <UART_Receive_IT+0x82>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d106      	bne.n	80070ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	e008      	b.n	80070be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	4619      	mov	r1, r3
 80070d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d148      	bne.n	800716e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0220 	bic.w	r2, r2, #32
 80070ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695a      	ldr	r2, [r3, #20]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0201 	bic.w	r2, r2, #1
 800710a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	2b01      	cmp	r3, #1
 800711a:	d123      	bne.n	8007164 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0210 	bic.w	r2, r2, #16
 8007130:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0310 	and.w	r3, r3, #16
 800713c:	2b10      	cmp	r3, #16
 800713e:	d10a      	bne.n	8007156 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff fe2f 	bl	8006dc0 <HAL_UARTEx_RxEventCallback>
 8007162:	e002      	b.n	800716a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7fb fa43 	bl	80025f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	e002      	b.n	8007174 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	e000      	b.n	8007174 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007172:	2302      	movs	r3, #2
  }
}
 8007174:	4618      	mov	r0, r3
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80071b6:	f023 030c 	bic.w	r3, r3, #12
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	430b      	orrs	r3, r1
 80071c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a2c      	ldr	r2, [pc, #176]	; (8007290 <UART_SetConfig+0x114>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d103      	bne.n	80071ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80071e4:	f7fe fa1a 	bl	800561c <HAL_RCC_GetPCLK2Freq>
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	e002      	b.n	80071f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80071ec:	f7fe fa02 	bl	80055f4 <HAL_RCC_GetPCLK1Freq>
 80071f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	4613      	mov	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	009a      	lsls	r2, r3, #2
 80071fc:	441a      	add	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	fbb2 f3f3 	udiv	r3, r2, r3
 8007208:	4a22      	ldr	r2, [pc, #136]	; (8007294 <UART_SetConfig+0x118>)
 800720a:	fba2 2303 	umull	r2, r3, r2, r3
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	0119      	lsls	r1, r3, #4
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	4613      	mov	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	009a      	lsls	r2, r3, #2
 800721c:	441a      	add	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	fbb2 f2f3 	udiv	r2, r2, r3
 8007228:	4b1a      	ldr	r3, [pc, #104]	; (8007294 <UART_SetConfig+0x118>)
 800722a:	fba3 0302 	umull	r0, r3, r3, r2
 800722e:	095b      	lsrs	r3, r3, #5
 8007230:	2064      	movs	r0, #100	; 0x64
 8007232:	fb00 f303 	mul.w	r3, r0, r3
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	011b      	lsls	r3, r3, #4
 800723a:	3332      	adds	r3, #50	; 0x32
 800723c:	4a15      	ldr	r2, [pc, #84]	; (8007294 <UART_SetConfig+0x118>)
 800723e:	fba2 2303 	umull	r2, r3, r2, r3
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007248:	4419      	add	r1, r3
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4613      	mov	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	009a      	lsls	r2, r3, #2
 8007254:	441a      	add	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007260:	4b0c      	ldr	r3, [pc, #48]	; (8007294 <UART_SetConfig+0x118>)
 8007262:	fba3 0302 	umull	r0, r3, r3, r2
 8007266:	095b      	lsrs	r3, r3, #5
 8007268:	2064      	movs	r0, #100	; 0x64
 800726a:	fb00 f303 	mul.w	r3, r0, r3
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	3332      	adds	r3, #50	; 0x32
 8007274:	4a07      	ldr	r2, [pc, #28]	; (8007294 <UART_SetConfig+0x118>)
 8007276:	fba2 2303 	umull	r2, r3, r2, r3
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	f003 020f 	and.w	r2, r3, #15
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	440a      	add	r2, r1
 8007286:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007288:	bf00      	nop
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	40013800 	.word	0x40013800
 8007294:	51eb851f 	.word	0x51eb851f

08007298 <arm_pid_init_f32>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	4604      	mov	r4, r0
 800729c:	6986      	ldr	r6, [r0, #24]
 800729e:	6a05      	ldr	r5, [r0, #32]
 80072a0:	460f      	mov	r7, r1
 80072a2:	4630      	mov	r0, r6
 80072a4:	69e1      	ldr	r1, [r4, #28]
 80072a6:	f7f9 fc65 	bl	8000b74 <__addsf3>
 80072aa:	4629      	mov	r1, r5
 80072ac:	f7f9 fc62 	bl	8000b74 <__addsf3>
 80072b0:	4629      	mov	r1, r5
 80072b2:	6020      	str	r0, [r4, #0]
 80072b4:	4628      	mov	r0, r5
 80072b6:	f7f9 fc5d 	bl	8000b74 <__addsf3>
 80072ba:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80072be:	4601      	mov	r1, r0
 80072c0:	4630      	mov	r0, r6
 80072c2:	f7f9 fc55 	bl	8000b70 <__aeabi_fsub>
 80072c6:	60a5      	str	r5, [r4, #8]
 80072c8:	6060      	str	r0, [r4, #4]
 80072ca:	b907      	cbnz	r7, 80072ce <arm_pid_init_f32+0x36>
 80072cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ce:	2300      	movs	r3, #0
 80072d0:	60e3      	str	r3, [r4, #12]
 80072d2:	6123      	str	r3, [r4, #16]
 80072d4:	6163      	str	r3, [r4, #20]
 80072d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072d8 <atof>:
 80072d8:	2100      	movs	r1, #0
 80072da:	f001 bad1 	b.w	8008880 <strtod>
	...

080072e0 <__errno>:
 80072e0:	4b01      	ldr	r3, [pc, #4]	; (80072e8 <__errno+0x8>)
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	20000014 	.word	0x20000014

080072ec <__libc_init_array>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	2600      	movs	r6, #0
 80072f0:	4d0c      	ldr	r5, [pc, #48]	; (8007324 <__libc_init_array+0x38>)
 80072f2:	4c0d      	ldr	r4, [pc, #52]	; (8007328 <__libc_init_array+0x3c>)
 80072f4:	1b64      	subs	r4, r4, r5
 80072f6:	10a4      	asrs	r4, r4, #2
 80072f8:	42a6      	cmp	r6, r4
 80072fa:	d109      	bne.n	8007310 <__libc_init_array+0x24>
 80072fc:	f004 fe56 	bl	800bfac <_init>
 8007300:	2600      	movs	r6, #0
 8007302:	4d0a      	ldr	r5, [pc, #40]	; (800732c <__libc_init_array+0x40>)
 8007304:	4c0a      	ldr	r4, [pc, #40]	; (8007330 <__libc_init_array+0x44>)
 8007306:	1b64      	subs	r4, r4, r5
 8007308:	10a4      	asrs	r4, r4, #2
 800730a:	42a6      	cmp	r6, r4
 800730c:	d105      	bne.n	800731a <__libc_init_array+0x2e>
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	f855 3b04 	ldr.w	r3, [r5], #4
 8007314:	4798      	blx	r3
 8007316:	3601      	adds	r6, #1
 8007318:	e7ee      	b.n	80072f8 <__libc_init_array+0xc>
 800731a:	f855 3b04 	ldr.w	r3, [r5], #4
 800731e:	4798      	blx	r3
 8007320:	3601      	adds	r6, #1
 8007322:	e7f2      	b.n	800730a <__libc_init_array+0x1e>
 8007324:	0800c4fc 	.word	0x0800c4fc
 8007328:	0800c4fc 	.word	0x0800c4fc
 800732c:	0800c4fc 	.word	0x0800c4fc
 8007330:	0800c500 	.word	0x0800c500

08007334 <memset>:
 8007334:	4603      	mov	r3, r0
 8007336:	4402      	add	r2, r0
 8007338:	4293      	cmp	r3, r2
 800733a:	d100      	bne.n	800733e <memset+0xa>
 800733c:	4770      	bx	lr
 800733e:	f803 1b01 	strb.w	r1, [r3], #1
 8007342:	e7f9      	b.n	8007338 <memset+0x4>

08007344 <__cvt>:
 8007344:	2b00      	cmp	r3, #0
 8007346:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800734a:	461f      	mov	r7, r3
 800734c:	bfbb      	ittet	lt
 800734e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007352:	461f      	movlt	r7, r3
 8007354:	2300      	movge	r3, #0
 8007356:	232d      	movlt	r3, #45	; 0x2d
 8007358:	b088      	sub	sp, #32
 800735a:	4614      	mov	r4, r2
 800735c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800735e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007360:	7013      	strb	r3, [r2, #0]
 8007362:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007364:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007368:	f023 0820 	bic.w	r8, r3, #32
 800736c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007370:	d005      	beq.n	800737e <__cvt+0x3a>
 8007372:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007376:	d100      	bne.n	800737a <__cvt+0x36>
 8007378:	3501      	adds	r5, #1
 800737a:	2302      	movs	r3, #2
 800737c:	e000      	b.n	8007380 <__cvt+0x3c>
 800737e:	2303      	movs	r3, #3
 8007380:	aa07      	add	r2, sp, #28
 8007382:	9204      	str	r2, [sp, #16]
 8007384:	aa06      	add	r2, sp, #24
 8007386:	e9cd a202 	strd	sl, r2, [sp, #8]
 800738a:	e9cd 3500 	strd	r3, r5, [sp]
 800738e:	4622      	mov	r2, r4
 8007390:	463b      	mov	r3, r7
 8007392:	f001 fb0d 	bl	80089b0 <_dtoa_r>
 8007396:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800739a:	4606      	mov	r6, r0
 800739c:	d102      	bne.n	80073a4 <__cvt+0x60>
 800739e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073a0:	07db      	lsls	r3, r3, #31
 80073a2:	d522      	bpl.n	80073ea <__cvt+0xa6>
 80073a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073a8:	eb06 0905 	add.w	r9, r6, r5
 80073ac:	d110      	bne.n	80073d0 <__cvt+0x8c>
 80073ae:	7833      	ldrb	r3, [r6, #0]
 80073b0:	2b30      	cmp	r3, #48	; 0x30
 80073b2:	d10a      	bne.n	80073ca <__cvt+0x86>
 80073b4:	2200      	movs	r2, #0
 80073b6:	2300      	movs	r3, #0
 80073b8:	4620      	mov	r0, r4
 80073ba:	4639      	mov	r1, r7
 80073bc:	f7f9 faf4 	bl	80009a8 <__aeabi_dcmpeq>
 80073c0:	b918      	cbnz	r0, 80073ca <__cvt+0x86>
 80073c2:	f1c5 0501 	rsb	r5, r5, #1
 80073c6:	f8ca 5000 	str.w	r5, [sl]
 80073ca:	f8da 3000 	ldr.w	r3, [sl]
 80073ce:	4499      	add	r9, r3
 80073d0:	2200      	movs	r2, #0
 80073d2:	2300      	movs	r3, #0
 80073d4:	4620      	mov	r0, r4
 80073d6:	4639      	mov	r1, r7
 80073d8:	f7f9 fae6 	bl	80009a8 <__aeabi_dcmpeq>
 80073dc:	b108      	cbz	r0, 80073e2 <__cvt+0x9e>
 80073de:	f8cd 901c 	str.w	r9, [sp, #28]
 80073e2:	2230      	movs	r2, #48	; 0x30
 80073e4:	9b07      	ldr	r3, [sp, #28]
 80073e6:	454b      	cmp	r3, r9
 80073e8:	d307      	bcc.n	80073fa <__cvt+0xb6>
 80073ea:	4630      	mov	r0, r6
 80073ec:	9b07      	ldr	r3, [sp, #28]
 80073ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80073f0:	1b9b      	subs	r3, r3, r6
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	b008      	add	sp, #32
 80073f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fa:	1c59      	adds	r1, r3, #1
 80073fc:	9107      	str	r1, [sp, #28]
 80073fe:	701a      	strb	r2, [r3, #0]
 8007400:	e7f0      	b.n	80073e4 <__cvt+0xa0>

08007402 <__exponent>:
 8007402:	4603      	mov	r3, r0
 8007404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007406:	2900      	cmp	r1, #0
 8007408:	f803 2b02 	strb.w	r2, [r3], #2
 800740c:	bfb6      	itet	lt
 800740e:	222d      	movlt	r2, #45	; 0x2d
 8007410:	222b      	movge	r2, #43	; 0x2b
 8007412:	4249      	neglt	r1, r1
 8007414:	2909      	cmp	r1, #9
 8007416:	7042      	strb	r2, [r0, #1]
 8007418:	dd2b      	ble.n	8007472 <__exponent+0x70>
 800741a:	f10d 0407 	add.w	r4, sp, #7
 800741e:	46a4      	mov	ip, r4
 8007420:	270a      	movs	r7, #10
 8007422:	fb91 f6f7 	sdiv	r6, r1, r7
 8007426:	460a      	mov	r2, r1
 8007428:	46a6      	mov	lr, r4
 800742a:	fb07 1516 	mls	r5, r7, r6, r1
 800742e:	2a63      	cmp	r2, #99	; 0x63
 8007430:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007434:	4631      	mov	r1, r6
 8007436:	f104 34ff 	add.w	r4, r4, #4294967295
 800743a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800743e:	dcf0      	bgt.n	8007422 <__exponent+0x20>
 8007440:	3130      	adds	r1, #48	; 0x30
 8007442:	f1ae 0502 	sub.w	r5, lr, #2
 8007446:	f804 1c01 	strb.w	r1, [r4, #-1]
 800744a:	4629      	mov	r1, r5
 800744c:	1c44      	adds	r4, r0, #1
 800744e:	4561      	cmp	r1, ip
 8007450:	d30a      	bcc.n	8007468 <__exponent+0x66>
 8007452:	f10d 0209 	add.w	r2, sp, #9
 8007456:	eba2 020e 	sub.w	r2, r2, lr
 800745a:	4565      	cmp	r5, ip
 800745c:	bf88      	it	hi
 800745e:	2200      	movhi	r2, #0
 8007460:	4413      	add	r3, r2
 8007462:	1a18      	subs	r0, r3, r0
 8007464:	b003      	add	sp, #12
 8007466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007468:	f811 2b01 	ldrb.w	r2, [r1], #1
 800746c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007470:	e7ed      	b.n	800744e <__exponent+0x4c>
 8007472:	2330      	movs	r3, #48	; 0x30
 8007474:	3130      	adds	r1, #48	; 0x30
 8007476:	7083      	strb	r3, [r0, #2]
 8007478:	70c1      	strb	r1, [r0, #3]
 800747a:	1d03      	adds	r3, r0, #4
 800747c:	e7f1      	b.n	8007462 <__exponent+0x60>
	...

08007480 <_printf_float>:
 8007480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007484:	b091      	sub	sp, #68	; 0x44
 8007486:	460c      	mov	r4, r1
 8007488:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800748c:	4616      	mov	r6, r2
 800748e:	461f      	mov	r7, r3
 8007490:	4605      	mov	r5, r0
 8007492:	f002 fbe1 	bl	8009c58 <_localeconv_r>
 8007496:	6803      	ldr	r3, [r0, #0]
 8007498:	4618      	mov	r0, r3
 800749a:	9309      	str	r3, [sp, #36]	; 0x24
 800749c:	f7f8 fe58 	bl	8000150 <strlen>
 80074a0:	2300      	movs	r3, #0
 80074a2:	930e      	str	r3, [sp, #56]	; 0x38
 80074a4:	f8d8 3000 	ldr.w	r3, [r8]
 80074a8:	900a      	str	r0, [sp, #40]	; 0x28
 80074aa:	3307      	adds	r3, #7
 80074ac:	f023 0307 	bic.w	r3, r3, #7
 80074b0:	f103 0208 	add.w	r2, r3, #8
 80074b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80074b8:	f8d4 b000 	ldr.w	fp, [r4]
 80074bc:	f8c8 2000 	str.w	r2, [r8]
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074c8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80074cc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80074d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074d2:	f04f 32ff 	mov.w	r2, #4294967295
 80074d6:	4640      	mov	r0, r8
 80074d8:	4b9c      	ldr	r3, [pc, #624]	; (800774c <_printf_float+0x2cc>)
 80074da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074dc:	f7f9 fa96 	bl	8000a0c <__aeabi_dcmpun>
 80074e0:	bb70      	cbnz	r0, 8007540 <_printf_float+0xc0>
 80074e2:	f04f 32ff 	mov.w	r2, #4294967295
 80074e6:	4640      	mov	r0, r8
 80074e8:	4b98      	ldr	r3, [pc, #608]	; (800774c <_printf_float+0x2cc>)
 80074ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074ec:	f7f9 fa70 	bl	80009d0 <__aeabi_dcmple>
 80074f0:	bb30      	cbnz	r0, 8007540 <_printf_float+0xc0>
 80074f2:	2200      	movs	r2, #0
 80074f4:	2300      	movs	r3, #0
 80074f6:	4640      	mov	r0, r8
 80074f8:	4651      	mov	r1, sl
 80074fa:	f7f9 fa5f 	bl	80009bc <__aeabi_dcmplt>
 80074fe:	b110      	cbz	r0, 8007506 <_printf_float+0x86>
 8007500:	232d      	movs	r3, #45	; 0x2d
 8007502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007506:	4b92      	ldr	r3, [pc, #584]	; (8007750 <_printf_float+0x2d0>)
 8007508:	4892      	ldr	r0, [pc, #584]	; (8007754 <_printf_float+0x2d4>)
 800750a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800750e:	bf94      	ite	ls
 8007510:	4698      	movls	r8, r3
 8007512:	4680      	movhi	r8, r0
 8007514:	2303      	movs	r3, #3
 8007516:	f04f 0a00 	mov.w	sl, #0
 800751a:	6123      	str	r3, [r4, #16]
 800751c:	f02b 0304 	bic.w	r3, fp, #4
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	4633      	mov	r3, r6
 8007524:	4621      	mov	r1, r4
 8007526:	4628      	mov	r0, r5
 8007528:	9700      	str	r7, [sp, #0]
 800752a:	aa0f      	add	r2, sp, #60	; 0x3c
 800752c:	f000 f9d4 	bl	80078d8 <_printf_common>
 8007530:	3001      	adds	r0, #1
 8007532:	f040 8090 	bne.w	8007656 <_printf_float+0x1d6>
 8007536:	f04f 30ff 	mov.w	r0, #4294967295
 800753a:	b011      	add	sp, #68	; 0x44
 800753c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007540:	4642      	mov	r2, r8
 8007542:	4653      	mov	r3, sl
 8007544:	4640      	mov	r0, r8
 8007546:	4651      	mov	r1, sl
 8007548:	f7f9 fa60 	bl	8000a0c <__aeabi_dcmpun>
 800754c:	b148      	cbz	r0, 8007562 <_printf_float+0xe2>
 800754e:	f1ba 0f00 	cmp.w	sl, #0
 8007552:	bfb8      	it	lt
 8007554:	232d      	movlt	r3, #45	; 0x2d
 8007556:	4880      	ldr	r0, [pc, #512]	; (8007758 <_printf_float+0x2d8>)
 8007558:	bfb8      	it	lt
 800755a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800755e:	4b7f      	ldr	r3, [pc, #508]	; (800775c <_printf_float+0x2dc>)
 8007560:	e7d3      	b.n	800750a <_printf_float+0x8a>
 8007562:	6863      	ldr	r3, [r4, #4]
 8007564:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	d142      	bne.n	80075f2 <_printf_float+0x172>
 800756c:	2306      	movs	r3, #6
 800756e:	6063      	str	r3, [r4, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	9206      	str	r2, [sp, #24]
 8007574:	aa0e      	add	r2, sp, #56	; 0x38
 8007576:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800757a:	aa0d      	add	r2, sp, #52	; 0x34
 800757c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007580:	9203      	str	r2, [sp, #12]
 8007582:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007586:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800758a:	6023      	str	r3, [r4, #0]
 800758c:	6863      	ldr	r3, [r4, #4]
 800758e:	4642      	mov	r2, r8
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	4628      	mov	r0, r5
 8007594:	4653      	mov	r3, sl
 8007596:	910b      	str	r1, [sp, #44]	; 0x2c
 8007598:	f7ff fed4 	bl	8007344 <__cvt>
 800759c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800759e:	4680      	mov	r8, r0
 80075a0:	2947      	cmp	r1, #71	; 0x47
 80075a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80075a4:	d108      	bne.n	80075b8 <_printf_float+0x138>
 80075a6:	1cc8      	adds	r0, r1, #3
 80075a8:	db02      	blt.n	80075b0 <_printf_float+0x130>
 80075aa:	6863      	ldr	r3, [r4, #4]
 80075ac:	4299      	cmp	r1, r3
 80075ae:	dd40      	ble.n	8007632 <_printf_float+0x1b2>
 80075b0:	f1a9 0902 	sub.w	r9, r9, #2
 80075b4:	fa5f f989 	uxtb.w	r9, r9
 80075b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80075bc:	d81f      	bhi.n	80075fe <_printf_float+0x17e>
 80075be:	464a      	mov	r2, r9
 80075c0:	3901      	subs	r1, #1
 80075c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075c6:	910d      	str	r1, [sp, #52]	; 0x34
 80075c8:	f7ff ff1b 	bl	8007402 <__exponent>
 80075cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075ce:	4682      	mov	sl, r0
 80075d0:	1813      	adds	r3, r2, r0
 80075d2:	2a01      	cmp	r2, #1
 80075d4:	6123      	str	r3, [r4, #16]
 80075d6:	dc02      	bgt.n	80075de <_printf_float+0x15e>
 80075d8:	6822      	ldr	r2, [r4, #0]
 80075da:	07d2      	lsls	r2, r2, #31
 80075dc:	d501      	bpl.n	80075e2 <_printf_float+0x162>
 80075de:	3301      	adds	r3, #1
 80075e0:	6123      	str	r3, [r4, #16]
 80075e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d09b      	beq.n	8007522 <_printf_float+0xa2>
 80075ea:	232d      	movs	r3, #45	; 0x2d
 80075ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f0:	e797      	b.n	8007522 <_printf_float+0xa2>
 80075f2:	2947      	cmp	r1, #71	; 0x47
 80075f4:	d1bc      	bne.n	8007570 <_printf_float+0xf0>
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1ba      	bne.n	8007570 <_printf_float+0xf0>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e7b7      	b.n	800756e <_printf_float+0xee>
 80075fe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007602:	d118      	bne.n	8007636 <_printf_float+0x1b6>
 8007604:	2900      	cmp	r1, #0
 8007606:	6863      	ldr	r3, [r4, #4]
 8007608:	dd0b      	ble.n	8007622 <_printf_float+0x1a2>
 800760a:	6121      	str	r1, [r4, #16]
 800760c:	b913      	cbnz	r3, 8007614 <_printf_float+0x194>
 800760e:	6822      	ldr	r2, [r4, #0]
 8007610:	07d0      	lsls	r0, r2, #31
 8007612:	d502      	bpl.n	800761a <_printf_float+0x19a>
 8007614:	3301      	adds	r3, #1
 8007616:	440b      	add	r3, r1
 8007618:	6123      	str	r3, [r4, #16]
 800761a:	f04f 0a00 	mov.w	sl, #0
 800761e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007620:	e7df      	b.n	80075e2 <_printf_float+0x162>
 8007622:	b913      	cbnz	r3, 800762a <_printf_float+0x1aa>
 8007624:	6822      	ldr	r2, [r4, #0]
 8007626:	07d2      	lsls	r2, r2, #31
 8007628:	d501      	bpl.n	800762e <_printf_float+0x1ae>
 800762a:	3302      	adds	r3, #2
 800762c:	e7f4      	b.n	8007618 <_printf_float+0x198>
 800762e:	2301      	movs	r3, #1
 8007630:	e7f2      	b.n	8007618 <_printf_float+0x198>
 8007632:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007638:	4299      	cmp	r1, r3
 800763a:	db05      	blt.n	8007648 <_printf_float+0x1c8>
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	6121      	str	r1, [r4, #16]
 8007640:	07d8      	lsls	r0, r3, #31
 8007642:	d5ea      	bpl.n	800761a <_printf_float+0x19a>
 8007644:	1c4b      	adds	r3, r1, #1
 8007646:	e7e7      	b.n	8007618 <_printf_float+0x198>
 8007648:	2900      	cmp	r1, #0
 800764a:	bfcc      	ite	gt
 800764c:	2201      	movgt	r2, #1
 800764e:	f1c1 0202 	rsble	r2, r1, #2
 8007652:	4413      	add	r3, r2
 8007654:	e7e0      	b.n	8007618 <_printf_float+0x198>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	055a      	lsls	r2, r3, #21
 800765a:	d407      	bmi.n	800766c <_printf_float+0x1ec>
 800765c:	6923      	ldr	r3, [r4, #16]
 800765e:	4642      	mov	r2, r8
 8007660:	4631      	mov	r1, r6
 8007662:	4628      	mov	r0, r5
 8007664:	47b8      	blx	r7
 8007666:	3001      	adds	r0, #1
 8007668:	d12b      	bne.n	80076c2 <_printf_float+0x242>
 800766a:	e764      	b.n	8007536 <_printf_float+0xb6>
 800766c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007670:	f240 80dd 	bls.w	800782e <_printf_float+0x3ae>
 8007674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007678:	2200      	movs	r2, #0
 800767a:	2300      	movs	r3, #0
 800767c:	f7f9 f994 	bl	80009a8 <__aeabi_dcmpeq>
 8007680:	2800      	cmp	r0, #0
 8007682:	d033      	beq.n	80076ec <_printf_float+0x26c>
 8007684:	2301      	movs	r3, #1
 8007686:	4631      	mov	r1, r6
 8007688:	4628      	mov	r0, r5
 800768a:	4a35      	ldr	r2, [pc, #212]	; (8007760 <_printf_float+0x2e0>)
 800768c:	47b8      	blx	r7
 800768e:	3001      	adds	r0, #1
 8007690:	f43f af51 	beq.w	8007536 <_printf_float+0xb6>
 8007694:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007698:	429a      	cmp	r2, r3
 800769a:	db02      	blt.n	80076a2 <_printf_float+0x222>
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	07d8      	lsls	r0, r3, #31
 80076a0:	d50f      	bpl.n	80076c2 <_printf_float+0x242>
 80076a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076a6:	4631      	mov	r1, r6
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b8      	blx	r7
 80076ac:	3001      	adds	r0, #1
 80076ae:	f43f af42 	beq.w	8007536 <_printf_float+0xb6>
 80076b2:	f04f 0800 	mov.w	r8, #0
 80076b6:	f104 091a 	add.w	r9, r4, #26
 80076ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076bc:	3b01      	subs	r3, #1
 80076be:	4543      	cmp	r3, r8
 80076c0:	dc09      	bgt.n	80076d6 <_printf_float+0x256>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	079b      	lsls	r3, r3, #30
 80076c6:	f100 8102 	bmi.w	80078ce <_printf_float+0x44e>
 80076ca:	68e0      	ldr	r0, [r4, #12]
 80076cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076ce:	4298      	cmp	r0, r3
 80076d0:	bfb8      	it	lt
 80076d2:	4618      	movlt	r0, r3
 80076d4:	e731      	b.n	800753a <_printf_float+0xba>
 80076d6:	2301      	movs	r3, #1
 80076d8:	464a      	mov	r2, r9
 80076da:	4631      	mov	r1, r6
 80076dc:	4628      	mov	r0, r5
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	f43f af28 	beq.w	8007536 <_printf_float+0xb6>
 80076e6:	f108 0801 	add.w	r8, r8, #1
 80076ea:	e7e6      	b.n	80076ba <_printf_float+0x23a>
 80076ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	dc38      	bgt.n	8007764 <_printf_float+0x2e4>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4631      	mov	r1, r6
 80076f6:	4628      	mov	r0, r5
 80076f8:	4a19      	ldr	r2, [pc, #100]	; (8007760 <_printf_float+0x2e0>)
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	f43f af1a 	beq.w	8007536 <_printf_float+0xb6>
 8007702:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007706:	4313      	orrs	r3, r2
 8007708:	d102      	bne.n	8007710 <_printf_float+0x290>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	07d9      	lsls	r1, r3, #31
 800770e:	d5d8      	bpl.n	80076c2 <_printf_float+0x242>
 8007710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007714:	4631      	mov	r1, r6
 8007716:	4628      	mov	r0, r5
 8007718:	47b8      	blx	r7
 800771a:	3001      	adds	r0, #1
 800771c:	f43f af0b 	beq.w	8007536 <_printf_float+0xb6>
 8007720:	f04f 0900 	mov.w	r9, #0
 8007724:	f104 0a1a 	add.w	sl, r4, #26
 8007728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800772a:	425b      	negs	r3, r3
 800772c:	454b      	cmp	r3, r9
 800772e:	dc01      	bgt.n	8007734 <_printf_float+0x2b4>
 8007730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007732:	e794      	b.n	800765e <_printf_float+0x1de>
 8007734:	2301      	movs	r3, #1
 8007736:	4652      	mov	r2, sl
 8007738:	4631      	mov	r1, r6
 800773a:	4628      	mov	r0, r5
 800773c:	47b8      	blx	r7
 800773e:	3001      	adds	r0, #1
 8007740:	f43f aef9 	beq.w	8007536 <_printf_float+0xb6>
 8007744:	f109 0901 	add.w	r9, r9, #1
 8007748:	e7ee      	b.n	8007728 <_printf_float+0x2a8>
 800774a:	bf00      	nop
 800774c:	7fefffff 	.word	0x7fefffff
 8007750:	0800c044 	.word	0x0800c044
 8007754:	0800c048 	.word	0x0800c048
 8007758:	0800c050 	.word	0x0800c050
 800775c:	0800c04c 	.word	0x0800c04c
 8007760:	0800c054 	.word	0x0800c054
 8007764:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007766:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007768:	429a      	cmp	r2, r3
 800776a:	bfa8      	it	ge
 800776c:	461a      	movge	r2, r3
 800776e:	2a00      	cmp	r2, #0
 8007770:	4691      	mov	r9, r2
 8007772:	dc37      	bgt.n	80077e4 <_printf_float+0x364>
 8007774:	f04f 0b00 	mov.w	fp, #0
 8007778:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800777c:	f104 021a 	add.w	r2, r4, #26
 8007780:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007784:	ebaa 0309 	sub.w	r3, sl, r9
 8007788:	455b      	cmp	r3, fp
 800778a:	dc33      	bgt.n	80077f4 <_printf_float+0x374>
 800778c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007790:	429a      	cmp	r2, r3
 8007792:	db3b      	blt.n	800780c <_printf_float+0x38c>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	07da      	lsls	r2, r3, #31
 8007798:	d438      	bmi.n	800780c <_printf_float+0x38c>
 800779a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800779c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800779e:	eba3 020a 	sub.w	r2, r3, sl
 80077a2:	eba3 0901 	sub.w	r9, r3, r1
 80077a6:	4591      	cmp	r9, r2
 80077a8:	bfa8      	it	ge
 80077aa:	4691      	movge	r9, r2
 80077ac:	f1b9 0f00 	cmp.w	r9, #0
 80077b0:	dc34      	bgt.n	800781c <_printf_float+0x39c>
 80077b2:	f04f 0800 	mov.w	r8, #0
 80077b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077ba:	f104 0a1a 	add.w	sl, r4, #26
 80077be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077c2:	1a9b      	subs	r3, r3, r2
 80077c4:	eba3 0309 	sub.w	r3, r3, r9
 80077c8:	4543      	cmp	r3, r8
 80077ca:	f77f af7a 	ble.w	80076c2 <_printf_float+0x242>
 80077ce:	2301      	movs	r3, #1
 80077d0:	4652      	mov	r2, sl
 80077d2:	4631      	mov	r1, r6
 80077d4:	4628      	mov	r0, r5
 80077d6:	47b8      	blx	r7
 80077d8:	3001      	adds	r0, #1
 80077da:	f43f aeac 	beq.w	8007536 <_printf_float+0xb6>
 80077de:	f108 0801 	add.w	r8, r8, #1
 80077e2:	e7ec      	b.n	80077be <_printf_float+0x33e>
 80077e4:	4613      	mov	r3, r2
 80077e6:	4631      	mov	r1, r6
 80077e8:	4642      	mov	r2, r8
 80077ea:	4628      	mov	r0, r5
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	d1c0      	bne.n	8007774 <_printf_float+0x2f4>
 80077f2:	e6a0      	b.n	8007536 <_printf_float+0xb6>
 80077f4:	2301      	movs	r3, #1
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80077fc:	47b8      	blx	r7
 80077fe:	3001      	adds	r0, #1
 8007800:	f43f ae99 	beq.w	8007536 <_printf_float+0xb6>
 8007804:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007806:	f10b 0b01 	add.w	fp, fp, #1
 800780a:	e7b9      	b.n	8007780 <_printf_float+0x300>
 800780c:	4631      	mov	r1, r6
 800780e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007812:	4628      	mov	r0, r5
 8007814:	47b8      	blx	r7
 8007816:	3001      	adds	r0, #1
 8007818:	d1bf      	bne.n	800779a <_printf_float+0x31a>
 800781a:	e68c      	b.n	8007536 <_printf_float+0xb6>
 800781c:	464b      	mov	r3, r9
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	eb08 020a 	add.w	r2, r8, sl
 8007826:	47b8      	blx	r7
 8007828:	3001      	adds	r0, #1
 800782a:	d1c2      	bne.n	80077b2 <_printf_float+0x332>
 800782c:	e683      	b.n	8007536 <_printf_float+0xb6>
 800782e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007830:	2a01      	cmp	r2, #1
 8007832:	dc01      	bgt.n	8007838 <_printf_float+0x3b8>
 8007834:	07db      	lsls	r3, r3, #31
 8007836:	d537      	bpl.n	80078a8 <_printf_float+0x428>
 8007838:	2301      	movs	r3, #1
 800783a:	4642      	mov	r2, r8
 800783c:	4631      	mov	r1, r6
 800783e:	4628      	mov	r0, r5
 8007840:	47b8      	blx	r7
 8007842:	3001      	adds	r0, #1
 8007844:	f43f ae77 	beq.w	8007536 <_printf_float+0xb6>
 8007848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800784c:	4631      	mov	r1, r6
 800784e:	4628      	mov	r0, r5
 8007850:	47b8      	blx	r7
 8007852:	3001      	adds	r0, #1
 8007854:	f43f ae6f 	beq.w	8007536 <_printf_float+0xb6>
 8007858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800785c:	2200      	movs	r2, #0
 800785e:	2300      	movs	r3, #0
 8007860:	f7f9 f8a2 	bl	80009a8 <__aeabi_dcmpeq>
 8007864:	b9d8      	cbnz	r0, 800789e <_printf_float+0x41e>
 8007866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007868:	f108 0201 	add.w	r2, r8, #1
 800786c:	3b01      	subs	r3, #1
 800786e:	4631      	mov	r1, r6
 8007870:	4628      	mov	r0, r5
 8007872:	47b8      	blx	r7
 8007874:	3001      	adds	r0, #1
 8007876:	d10e      	bne.n	8007896 <_printf_float+0x416>
 8007878:	e65d      	b.n	8007536 <_printf_float+0xb6>
 800787a:	2301      	movs	r3, #1
 800787c:	464a      	mov	r2, r9
 800787e:	4631      	mov	r1, r6
 8007880:	4628      	mov	r0, r5
 8007882:	47b8      	blx	r7
 8007884:	3001      	adds	r0, #1
 8007886:	f43f ae56 	beq.w	8007536 <_printf_float+0xb6>
 800788a:	f108 0801 	add.w	r8, r8, #1
 800788e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007890:	3b01      	subs	r3, #1
 8007892:	4543      	cmp	r3, r8
 8007894:	dcf1      	bgt.n	800787a <_printf_float+0x3fa>
 8007896:	4653      	mov	r3, sl
 8007898:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800789c:	e6e0      	b.n	8007660 <_printf_float+0x1e0>
 800789e:	f04f 0800 	mov.w	r8, #0
 80078a2:	f104 091a 	add.w	r9, r4, #26
 80078a6:	e7f2      	b.n	800788e <_printf_float+0x40e>
 80078a8:	2301      	movs	r3, #1
 80078aa:	4642      	mov	r2, r8
 80078ac:	e7df      	b.n	800786e <_printf_float+0x3ee>
 80078ae:	2301      	movs	r3, #1
 80078b0:	464a      	mov	r2, r9
 80078b2:	4631      	mov	r1, r6
 80078b4:	4628      	mov	r0, r5
 80078b6:	47b8      	blx	r7
 80078b8:	3001      	adds	r0, #1
 80078ba:	f43f ae3c 	beq.w	8007536 <_printf_float+0xb6>
 80078be:	f108 0801 	add.w	r8, r8, #1
 80078c2:	68e3      	ldr	r3, [r4, #12]
 80078c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078c6:	1a5b      	subs	r3, r3, r1
 80078c8:	4543      	cmp	r3, r8
 80078ca:	dcf0      	bgt.n	80078ae <_printf_float+0x42e>
 80078cc:	e6fd      	b.n	80076ca <_printf_float+0x24a>
 80078ce:	f04f 0800 	mov.w	r8, #0
 80078d2:	f104 0919 	add.w	r9, r4, #25
 80078d6:	e7f4      	b.n	80078c2 <_printf_float+0x442>

080078d8 <_printf_common>:
 80078d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078dc:	4616      	mov	r6, r2
 80078de:	4699      	mov	r9, r3
 80078e0:	688a      	ldr	r2, [r1, #8]
 80078e2:	690b      	ldr	r3, [r1, #16]
 80078e4:	4607      	mov	r7, r0
 80078e6:	4293      	cmp	r3, r2
 80078e8:	bfb8      	it	lt
 80078ea:	4613      	movlt	r3, r2
 80078ec:	6033      	str	r3, [r6, #0]
 80078ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078f2:	460c      	mov	r4, r1
 80078f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078f8:	b10a      	cbz	r2, 80078fe <_printf_common+0x26>
 80078fa:	3301      	adds	r3, #1
 80078fc:	6033      	str	r3, [r6, #0]
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	0699      	lsls	r1, r3, #26
 8007902:	bf42      	ittt	mi
 8007904:	6833      	ldrmi	r3, [r6, #0]
 8007906:	3302      	addmi	r3, #2
 8007908:	6033      	strmi	r3, [r6, #0]
 800790a:	6825      	ldr	r5, [r4, #0]
 800790c:	f015 0506 	ands.w	r5, r5, #6
 8007910:	d106      	bne.n	8007920 <_printf_common+0x48>
 8007912:	f104 0a19 	add.w	sl, r4, #25
 8007916:	68e3      	ldr	r3, [r4, #12]
 8007918:	6832      	ldr	r2, [r6, #0]
 800791a:	1a9b      	subs	r3, r3, r2
 800791c:	42ab      	cmp	r3, r5
 800791e:	dc28      	bgt.n	8007972 <_printf_common+0x9a>
 8007920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007924:	1e13      	subs	r3, r2, #0
 8007926:	6822      	ldr	r2, [r4, #0]
 8007928:	bf18      	it	ne
 800792a:	2301      	movne	r3, #1
 800792c:	0692      	lsls	r2, r2, #26
 800792e:	d42d      	bmi.n	800798c <_printf_common+0xb4>
 8007930:	4649      	mov	r1, r9
 8007932:	4638      	mov	r0, r7
 8007934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007938:	47c0      	blx	r8
 800793a:	3001      	adds	r0, #1
 800793c:	d020      	beq.n	8007980 <_printf_common+0xa8>
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	68e5      	ldr	r5, [r4, #12]
 8007942:	f003 0306 	and.w	r3, r3, #6
 8007946:	2b04      	cmp	r3, #4
 8007948:	bf18      	it	ne
 800794a:	2500      	movne	r5, #0
 800794c:	6832      	ldr	r2, [r6, #0]
 800794e:	f04f 0600 	mov.w	r6, #0
 8007952:	68a3      	ldr	r3, [r4, #8]
 8007954:	bf08      	it	eq
 8007956:	1aad      	subeq	r5, r5, r2
 8007958:	6922      	ldr	r2, [r4, #16]
 800795a:	bf08      	it	eq
 800795c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007960:	4293      	cmp	r3, r2
 8007962:	bfc4      	itt	gt
 8007964:	1a9b      	subgt	r3, r3, r2
 8007966:	18ed      	addgt	r5, r5, r3
 8007968:	341a      	adds	r4, #26
 800796a:	42b5      	cmp	r5, r6
 800796c:	d11a      	bne.n	80079a4 <_printf_common+0xcc>
 800796e:	2000      	movs	r0, #0
 8007970:	e008      	b.n	8007984 <_printf_common+0xac>
 8007972:	2301      	movs	r3, #1
 8007974:	4652      	mov	r2, sl
 8007976:	4649      	mov	r1, r9
 8007978:	4638      	mov	r0, r7
 800797a:	47c0      	blx	r8
 800797c:	3001      	adds	r0, #1
 800797e:	d103      	bne.n	8007988 <_printf_common+0xb0>
 8007980:	f04f 30ff 	mov.w	r0, #4294967295
 8007984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007988:	3501      	adds	r5, #1
 800798a:	e7c4      	b.n	8007916 <_printf_common+0x3e>
 800798c:	2030      	movs	r0, #48	; 0x30
 800798e:	18e1      	adds	r1, r4, r3
 8007990:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800799a:	4422      	add	r2, r4
 800799c:	3302      	adds	r3, #2
 800799e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079a2:	e7c5      	b.n	8007930 <_printf_common+0x58>
 80079a4:	2301      	movs	r3, #1
 80079a6:	4622      	mov	r2, r4
 80079a8:	4649      	mov	r1, r9
 80079aa:	4638      	mov	r0, r7
 80079ac:	47c0      	blx	r8
 80079ae:	3001      	adds	r0, #1
 80079b0:	d0e6      	beq.n	8007980 <_printf_common+0xa8>
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7d9      	b.n	800796a <_printf_common+0x92>
	...

080079b8 <_printf_i>:
 80079b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079bc:	7e0f      	ldrb	r7, [r1, #24]
 80079be:	4691      	mov	r9, r2
 80079c0:	2f78      	cmp	r7, #120	; 0x78
 80079c2:	4680      	mov	r8, r0
 80079c4:	460c      	mov	r4, r1
 80079c6:	469a      	mov	sl, r3
 80079c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079ce:	d807      	bhi.n	80079e0 <_printf_i+0x28>
 80079d0:	2f62      	cmp	r7, #98	; 0x62
 80079d2:	d80a      	bhi.n	80079ea <_printf_i+0x32>
 80079d4:	2f00      	cmp	r7, #0
 80079d6:	f000 80d9 	beq.w	8007b8c <_printf_i+0x1d4>
 80079da:	2f58      	cmp	r7, #88	; 0x58
 80079dc:	f000 80a4 	beq.w	8007b28 <_printf_i+0x170>
 80079e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079e8:	e03a      	b.n	8007a60 <_printf_i+0xa8>
 80079ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079ee:	2b15      	cmp	r3, #21
 80079f0:	d8f6      	bhi.n	80079e0 <_printf_i+0x28>
 80079f2:	a101      	add	r1, pc, #4	; (adr r1, 80079f8 <_printf_i+0x40>)
 80079f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079f8:	08007a51 	.word	0x08007a51
 80079fc:	08007a65 	.word	0x08007a65
 8007a00:	080079e1 	.word	0x080079e1
 8007a04:	080079e1 	.word	0x080079e1
 8007a08:	080079e1 	.word	0x080079e1
 8007a0c:	080079e1 	.word	0x080079e1
 8007a10:	08007a65 	.word	0x08007a65
 8007a14:	080079e1 	.word	0x080079e1
 8007a18:	080079e1 	.word	0x080079e1
 8007a1c:	080079e1 	.word	0x080079e1
 8007a20:	080079e1 	.word	0x080079e1
 8007a24:	08007b73 	.word	0x08007b73
 8007a28:	08007a95 	.word	0x08007a95
 8007a2c:	08007b55 	.word	0x08007b55
 8007a30:	080079e1 	.word	0x080079e1
 8007a34:	080079e1 	.word	0x080079e1
 8007a38:	08007b95 	.word	0x08007b95
 8007a3c:	080079e1 	.word	0x080079e1
 8007a40:	08007a95 	.word	0x08007a95
 8007a44:	080079e1 	.word	0x080079e1
 8007a48:	080079e1 	.word	0x080079e1
 8007a4c:	08007b5d 	.word	0x08007b5d
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	1d1a      	adds	r2, r3, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	602a      	str	r2, [r5, #0]
 8007a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a60:	2301      	movs	r3, #1
 8007a62:	e0a4      	b.n	8007bae <_printf_i+0x1f6>
 8007a64:	6820      	ldr	r0, [r4, #0]
 8007a66:	6829      	ldr	r1, [r5, #0]
 8007a68:	0606      	lsls	r6, r0, #24
 8007a6a:	f101 0304 	add.w	r3, r1, #4
 8007a6e:	d50a      	bpl.n	8007a86 <_printf_i+0xce>
 8007a70:	680e      	ldr	r6, [r1, #0]
 8007a72:	602b      	str	r3, [r5, #0]
 8007a74:	2e00      	cmp	r6, #0
 8007a76:	da03      	bge.n	8007a80 <_printf_i+0xc8>
 8007a78:	232d      	movs	r3, #45	; 0x2d
 8007a7a:	4276      	negs	r6, r6
 8007a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a80:	230a      	movs	r3, #10
 8007a82:	485e      	ldr	r0, [pc, #376]	; (8007bfc <_printf_i+0x244>)
 8007a84:	e019      	b.n	8007aba <_printf_i+0x102>
 8007a86:	680e      	ldr	r6, [r1, #0]
 8007a88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a8c:	602b      	str	r3, [r5, #0]
 8007a8e:	bf18      	it	ne
 8007a90:	b236      	sxthne	r6, r6
 8007a92:	e7ef      	b.n	8007a74 <_printf_i+0xbc>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	6820      	ldr	r0, [r4, #0]
 8007a98:	1d19      	adds	r1, r3, #4
 8007a9a:	6029      	str	r1, [r5, #0]
 8007a9c:	0601      	lsls	r1, r0, #24
 8007a9e:	d501      	bpl.n	8007aa4 <_printf_i+0xec>
 8007aa0:	681e      	ldr	r6, [r3, #0]
 8007aa2:	e002      	b.n	8007aaa <_printf_i+0xf2>
 8007aa4:	0646      	lsls	r6, r0, #25
 8007aa6:	d5fb      	bpl.n	8007aa0 <_printf_i+0xe8>
 8007aa8:	881e      	ldrh	r6, [r3, #0]
 8007aaa:	2f6f      	cmp	r7, #111	; 0x6f
 8007aac:	bf0c      	ite	eq
 8007aae:	2308      	moveq	r3, #8
 8007ab0:	230a      	movne	r3, #10
 8007ab2:	4852      	ldr	r0, [pc, #328]	; (8007bfc <_printf_i+0x244>)
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007aba:	6865      	ldr	r5, [r4, #4]
 8007abc:	2d00      	cmp	r5, #0
 8007abe:	bfa8      	it	ge
 8007ac0:	6821      	ldrge	r1, [r4, #0]
 8007ac2:	60a5      	str	r5, [r4, #8]
 8007ac4:	bfa4      	itt	ge
 8007ac6:	f021 0104 	bicge.w	r1, r1, #4
 8007aca:	6021      	strge	r1, [r4, #0]
 8007acc:	b90e      	cbnz	r6, 8007ad2 <_printf_i+0x11a>
 8007ace:	2d00      	cmp	r5, #0
 8007ad0:	d04d      	beq.n	8007b6e <_printf_i+0x1b6>
 8007ad2:	4615      	mov	r5, r2
 8007ad4:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ad8:	fb03 6711 	mls	r7, r3, r1, r6
 8007adc:	5dc7      	ldrb	r7, [r0, r7]
 8007ade:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ae2:	4637      	mov	r7, r6
 8007ae4:	42bb      	cmp	r3, r7
 8007ae6:	460e      	mov	r6, r1
 8007ae8:	d9f4      	bls.n	8007ad4 <_printf_i+0x11c>
 8007aea:	2b08      	cmp	r3, #8
 8007aec:	d10b      	bne.n	8007b06 <_printf_i+0x14e>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	07de      	lsls	r6, r3, #31
 8007af2:	d508      	bpl.n	8007b06 <_printf_i+0x14e>
 8007af4:	6923      	ldr	r3, [r4, #16]
 8007af6:	6861      	ldr	r1, [r4, #4]
 8007af8:	4299      	cmp	r1, r3
 8007afa:	bfde      	ittt	le
 8007afc:	2330      	movle	r3, #48	; 0x30
 8007afe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b06:	1b52      	subs	r2, r2, r5
 8007b08:	6122      	str	r2, [r4, #16]
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	4640      	mov	r0, r8
 8007b10:	f8cd a000 	str.w	sl, [sp]
 8007b14:	aa03      	add	r2, sp, #12
 8007b16:	f7ff fedf 	bl	80078d8 <_printf_common>
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	d14c      	bne.n	8007bb8 <_printf_i+0x200>
 8007b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b22:	b004      	add	sp, #16
 8007b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b28:	4834      	ldr	r0, [pc, #208]	; (8007bfc <_printf_i+0x244>)
 8007b2a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b2e:	6829      	ldr	r1, [r5, #0]
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b36:	6029      	str	r1, [r5, #0]
 8007b38:	061d      	lsls	r5, r3, #24
 8007b3a:	d514      	bpl.n	8007b66 <_printf_i+0x1ae>
 8007b3c:	07df      	lsls	r7, r3, #31
 8007b3e:	bf44      	itt	mi
 8007b40:	f043 0320 	orrmi.w	r3, r3, #32
 8007b44:	6023      	strmi	r3, [r4, #0]
 8007b46:	b91e      	cbnz	r6, 8007b50 <_printf_i+0x198>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	f023 0320 	bic.w	r3, r3, #32
 8007b4e:	6023      	str	r3, [r4, #0]
 8007b50:	2310      	movs	r3, #16
 8007b52:	e7af      	b.n	8007ab4 <_printf_i+0xfc>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	f043 0320 	orr.w	r3, r3, #32
 8007b5a:	6023      	str	r3, [r4, #0]
 8007b5c:	2378      	movs	r3, #120	; 0x78
 8007b5e:	4828      	ldr	r0, [pc, #160]	; (8007c00 <_printf_i+0x248>)
 8007b60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b64:	e7e3      	b.n	8007b2e <_printf_i+0x176>
 8007b66:	0659      	lsls	r1, r3, #25
 8007b68:	bf48      	it	mi
 8007b6a:	b2b6      	uxthmi	r6, r6
 8007b6c:	e7e6      	b.n	8007b3c <_printf_i+0x184>
 8007b6e:	4615      	mov	r5, r2
 8007b70:	e7bb      	b.n	8007aea <_printf_i+0x132>
 8007b72:	682b      	ldr	r3, [r5, #0]
 8007b74:	6826      	ldr	r6, [r4, #0]
 8007b76:	1d18      	adds	r0, r3, #4
 8007b78:	6961      	ldr	r1, [r4, #20]
 8007b7a:	6028      	str	r0, [r5, #0]
 8007b7c:	0635      	lsls	r5, r6, #24
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	d501      	bpl.n	8007b86 <_printf_i+0x1ce>
 8007b82:	6019      	str	r1, [r3, #0]
 8007b84:	e002      	b.n	8007b8c <_printf_i+0x1d4>
 8007b86:	0670      	lsls	r0, r6, #25
 8007b88:	d5fb      	bpl.n	8007b82 <_printf_i+0x1ca>
 8007b8a:	8019      	strh	r1, [r3, #0]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	4615      	mov	r5, r2
 8007b90:	6123      	str	r3, [r4, #16]
 8007b92:	e7ba      	b.n	8007b0a <_printf_i+0x152>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	2100      	movs	r1, #0
 8007b98:	1d1a      	adds	r2, r3, #4
 8007b9a:	602a      	str	r2, [r5, #0]
 8007b9c:	681d      	ldr	r5, [r3, #0]
 8007b9e:	6862      	ldr	r2, [r4, #4]
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f002 f877 	bl	8009c94 <memchr>
 8007ba6:	b108      	cbz	r0, 8007bac <_printf_i+0x1f4>
 8007ba8:	1b40      	subs	r0, r0, r5
 8007baa:	6060      	str	r0, [r4, #4]
 8007bac:	6863      	ldr	r3, [r4, #4]
 8007bae:	6123      	str	r3, [r4, #16]
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb6:	e7a8      	b.n	8007b0a <_printf_i+0x152>
 8007bb8:	462a      	mov	r2, r5
 8007bba:	4649      	mov	r1, r9
 8007bbc:	4640      	mov	r0, r8
 8007bbe:	6923      	ldr	r3, [r4, #16]
 8007bc0:	47d0      	blx	sl
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	d0ab      	beq.n	8007b1e <_printf_i+0x166>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	079b      	lsls	r3, r3, #30
 8007bca:	d413      	bmi.n	8007bf4 <_printf_i+0x23c>
 8007bcc:	68e0      	ldr	r0, [r4, #12]
 8007bce:	9b03      	ldr	r3, [sp, #12]
 8007bd0:	4298      	cmp	r0, r3
 8007bd2:	bfb8      	it	lt
 8007bd4:	4618      	movlt	r0, r3
 8007bd6:	e7a4      	b.n	8007b22 <_printf_i+0x16a>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	4632      	mov	r2, r6
 8007bdc:	4649      	mov	r1, r9
 8007bde:	4640      	mov	r0, r8
 8007be0:	47d0      	blx	sl
 8007be2:	3001      	adds	r0, #1
 8007be4:	d09b      	beq.n	8007b1e <_printf_i+0x166>
 8007be6:	3501      	adds	r5, #1
 8007be8:	68e3      	ldr	r3, [r4, #12]
 8007bea:	9903      	ldr	r1, [sp, #12]
 8007bec:	1a5b      	subs	r3, r3, r1
 8007bee:	42ab      	cmp	r3, r5
 8007bf0:	dcf2      	bgt.n	8007bd8 <_printf_i+0x220>
 8007bf2:	e7eb      	b.n	8007bcc <_printf_i+0x214>
 8007bf4:	2500      	movs	r5, #0
 8007bf6:	f104 0619 	add.w	r6, r4, #25
 8007bfa:	e7f5      	b.n	8007be8 <_printf_i+0x230>
 8007bfc:	0800c056 	.word	0x0800c056
 8007c00:	0800c067 	.word	0x0800c067

08007c04 <sniprintf>:
 8007c04:	b40c      	push	{r2, r3}
 8007c06:	b530      	push	{r4, r5, lr}
 8007c08:	4b17      	ldr	r3, [pc, #92]	; (8007c68 <sniprintf+0x64>)
 8007c0a:	1e0c      	subs	r4, r1, #0
 8007c0c:	681d      	ldr	r5, [r3, #0]
 8007c0e:	b09d      	sub	sp, #116	; 0x74
 8007c10:	da08      	bge.n	8007c24 <sniprintf+0x20>
 8007c12:	238b      	movs	r3, #139	; 0x8b
 8007c14:	f04f 30ff 	mov.w	r0, #4294967295
 8007c18:	602b      	str	r3, [r5, #0]
 8007c1a:	b01d      	add	sp, #116	; 0x74
 8007c1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c20:	b002      	add	sp, #8
 8007c22:	4770      	bx	lr
 8007c24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007c28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c2c:	bf0c      	ite	eq
 8007c2e:	4623      	moveq	r3, r4
 8007c30:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c34:	9304      	str	r3, [sp, #16]
 8007c36:	9307      	str	r3, [sp, #28]
 8007c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c3c:	9002      	str	r0, [sp, #8]
 8007c3e:	9006      	str	r0, [sp, #24]
 8007c40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c44:	4628      	mov	r0, r5
 8007c46:	ab21      	add	r3, sp, #132	; 0x84
 8007c48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c4a:	a902      	add	r1, sp, #8
 8007c4c:	9301      	str	r3, [sp, #4]
 8007c4e:	f002 fe41 	bl	800a8d4 <_svfiprintf_r>
 8007c52:	1c43      	adds	r3, r0, #1
 8007c54:	bfbc      	itt	lt
 8007c56:	238b      	movlt	r3, #139	; 0x8b
 8007c58:	602b      	strlt	r3, [r5, #0]
 8007c5a:	2c00      	cmp	r4, #0
 8007c5c:	d0dd      	beq.n	8007c1a <sniprintf+0x16>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	9b02      	ldr	r3, [sp, #8]
 8007c62:	701a      	strb	r2, [r3, #0]
 8007c64:	e7d9      	b.n	8007c1a <sniprintf+0x16>
 8007c66:	bf00      	nop
 8007c68:	20000014 	.word	0x20000014

08007c6c <sulp>:
 8007c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c70:	460f      	mov	r7, r1
 8007c72:	4690      	mov	r8, r2
 8007c74:	f002 fb9a 	bl	800a3ac <__ulp>
 8007c78:	4604      	mov	r4, r0
 8007c7a:	460d      	mov	r5, r1
 8007c7c:	f1b8 0f00 	cmp.w	r8, #0
 8007c80:	d011      	beq.n	8007ca6 <sulp+0x3a>
 8007c82:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007c86:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	dd0b      	ble.n	8007ca6 <sulp+0x3a>
 8007c8e:	2400      	movs	r4, #0
 8007c90:	051b      	lsls	r3, r3, #20
 8007c92:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007c96:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	462b      	mov	r3, r5
 8007c9e:	f7f8 fc1b 	bl	80004d8 <__aeabi_dmul>
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	460d      	mov	r5, r1
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	4629      	mov	r1, r5
 8007caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007cb0 <_strtod_l>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	469b      	mov	fp, r3
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	b09f      	sub	sp, #124	; 0x7c
 8007cba:	931a      	str	r3, [sp, #104]	; 0x68
 8007cbc:	4b9e      	ldr	r3, [pc, #632]	; (8007f38 <_strtod_l+0x288>)
 8007cbe:	4682      	mov	sl, r0
 8007cc0:	681f      	ldr	r7, [r3, #0]
 8007cc2:	460e      	mov	r6, r1
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	9215      	str	r2, [sp, #84]	; 0x54
 8007cc8:	f7f8 fa42 	bl	8000150 <strlen>
 8007ccc:	f04f 0800 	mov.w	r8, #0
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	f04f 0900 	mov.w	r9, #0
 8007cd6:	9619      	str	r6, [sp, #100]	; 0x64
 8007cd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cda:	781a      	ldrb	r2, [r3, #0]
 8007cdc:	2a2b      	cmp	r2, #43	; 0x2b
 8007cde:	d04c      	beq.n	8007d7a <_strtod_l+0xca>
 8007ce0:	d83a      	bhi.n	8007d58 <_strtod_l+0xa8>
 8007ce2:	2a0d      	cmp	r2, #13
 8007ce4:	d833      	bhi.n	8007d4e <_strtod_l+0x9e>
 8007ce6:	2a08      	cmp	r2, #8
 8007ce8:	d833      	bhi.n	8007d52 <_strtod_l+0xa2>
 8007cea:	2a00      	cmp	r2, #0
 8007cec:	d03d      	beq.n	8007d6a <_strtod_l+0xba>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	930a      	str	r3, [sp, #40]	; 0x28
 8007cf2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007cf4:	782b      	ldrb	r3, [r5, #0]
 8007cf6:	2b30      	cmp	r3, #48	; 0x30
 8007cf8:	f040 80aa 	bne.w	8007e50 <_strtod_l+0x1a0>
 8007cfc:	786b      	ldrb	r3, [r5, #1]
 8007cfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d02:	2b58      	cmp	r3, #88	; 0x58
 8007d04:	d166      	bne.n	8007dd4 <_strtod_l+0x124>
 8007d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d08:	4650      	mov	r0, sl
 8007d0a:	9301      	str	r3, [sp, #4]
 8007d0c:	ab1a      	add	r3, sp, #104	; 0x68
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	4a8a      	ldr	r2, [pc, #552]	; (8007f3c <_strtod_l+0x28c>)
 8007d12:	f8cd b008 	str.w	fp, [sp, #8]
 8007d16:	ab1b      	add	r3, sp, #108	; 0x6c
 8007d18:	a919      	add	r1, sp, #100	; 0x64
 8007d1a:	f001 fc9f 	bl	800965c <__gethex>
 8007d1e:	f010 0607 	ands.w	r6, r0, #7
 8007d22:	4604      	mov	r4, r0
 8007d24:	d005      	beq.n	8007d32 <_strtod_l+0x82>
 8007d26:	2e06      	cmp	r6, #6
 8007d28:	d129      	bne.n	8007d7e <_strtod_l+0xce>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	3501      	adds	r5, #1
 8007d2e:	9519      	str	r5, [sp, #100]	; 0x64
 8007d30:	930a      	str	r3, [sp, #40]	; 0x28
 8007d32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f040 858a 	bne.w	800884e <_strtod_l+0xb9e>
 8007d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3c:	b1d3      	cbz	r3, 8007d74 <_strtod_l+0xc4>
 8007d3e:	4642      	mov	r2, r8
 8007d40:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d44:	4610      	mov	r0, r2
 8007d46:	4619      	mov	r1, r3
 8007d48:	b01f      	add	sp, #124	; 0x7c
 8007d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4e:	2a20      	cmp	r2, #32
 8007d50:	d1cd      	bne.n	8007cee <_strtod_l+0x3e>
 8007d52:	3301      	adds	r3, #1
 8007d54:	9319      	str	r3, [sp, #100]	; 0x64
 8007d56:	e7bf      	b.n	8007cd8 <_strtod_l+0x28>
 8007d58:	2a2d      	cmp	r2, #45	; 0x2d
 8007d5a:	d1c8      	bne.n	8007cee <_strtod_l+0x3e>
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	920a      	str	r2, [sp, #40]	; 0x28
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	9219      	str	r2, [sp, #100]	; 0x64
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1c3      	bne.n	8007cf2 <_strtod_l+0x42>
 8007d6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d6c:	9619      	str	r6, [sp, #100]	; 0x64
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f040 856b 	bne.w	800884a <_strtod_l+0xb9a>
 8007d74:	4642      	mov	r2, r8
 8007d76:	464b      	mov	r3, r9
 8007d78:	e7e4      	b.n	8007d44 <_strtod_l+0x94>
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	e7ef      	b.n	8007d5e <_strtod_l+0xae>
 8007d7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007d80:	b13a      	cbz	r2, 8007d92 <_strtod_l+0xe2>
 8007d82:	2135      	movs	r1, #53	; 0x35
 8007d84:	a81c      	add	r0, sp, #112	; 0x70
 8007d86:	f002 fc15 	bl	800a5b4 <__copybits>
 8007d8a:	4650      	mov	r0, sl
 8007d8c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d8e:	f001 ffdd 	bl	8009d4c <_Bfree>
 8007d92:	3e01      	subs	r6, #1
 8007d94:	2e04      	cmp	r6, #4
 8007d96:	d806      	bhi.n	8007da6 <_strtod_l+0xf6>
 8007d98:	e8df f006 	tbb	[pc, r6]
 8007d9c:	1714030a 	.word	0x1714030a
 8007da0:	0a          	.byte	0x0a
 8007da1:	00          	.byte	0x00
 8007da2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007da6:	0721      	lsls	r1, r4, #28
 8007da8:	d5c3      	bpl.n	8007d32 <_strtod_l+0x82>
 8007daa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007dae:	e7c0      	b.n	8007d32 <_strtod_l+0x82>
 8007db0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007db2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007db6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007dba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007dbe:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007dc2:	e7f0      	b.n	8007da6 <_strtod_l+0xf6>
 8007dc4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007f40 <_strtod_l+0x290>
 8007dc8:	e7ed      	b.n	8007da6 <_strtod_l+0xf6>
 8007dca:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007dce:	f04f 38ff 	mov.w	r8, #4294967295
 8007dd2:	e7e8      	b.n	8007da6 <_strtod_l+0xf6>
 8007dd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	9219      	str	r2, [sp, #100]	; 0x64
 8007dda:	785b      	ldrb	r3, [r3, #1]
 8007ddc:	2b30      	cmp	r3, #48	; 0x30
 8007dde:	d0f9      	beq.n	8007dd4 <_strtod_l+0x124>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d0a6      	beq.n	8007d32 <_strtod_l+0x82>
 8007de4:	2301      	movs	r3, #1
 8007de6:	9307      	str	r3, [sp, #28]
 8007de8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007dea:	220a      	movs	r2, #10
 8007dec:	9308      	str	r3, [sp, #32]
 8007dee:	2300      	movs	r3, #0
 8007df0:	469b      	mov	fp, r3
 8007df2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007df6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007df8:	7805      	ldrb	r5, [r0, #0]
 8007dfa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007dfe:	b2d9      	uxtb	r1, r3
 8007e00:	2909      	cmp	r1, #9
 8007e02:	d927      	bls.n	8007e54 <_strtod_l+0x1a4>
 8007e04:	4622      	mov	r2, r4
 8007e06:	4639      	mov	r1, r7
 8007e08:	f002 fe7a 	bl	800ab00 <strncmp>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d033      	beq.n	8007e78 <_strtod_l+0x1c8>
 8007e10:	2000      	movs	r0, #0
 8007e12:	462a      	mov	r2, r5
 8007e14:	465c      	mov	r4, fp
 8007e16:	4603      	mov	r3, r0
 8007e18:	9004      	str	r0, [sp, #16]
 8007e1a:	2a65      	cmp	r2, #101	; 0x65
 8007e1c:	d001      	beq.n	8007e22 <_strtod_l+0x172>
 8007e1e:	2a45      	cmp	r2, #69	; 0x45
 8007e20:	d114      	bne.n	8007e4c <_strtod_l+0x19c>
 8007e22:	b91c      	cbnz	r4, 8007e2c <_strtod_l+0x17c>
 8007e24:	9a07      	ldr	r2, [sp, #28]
 8007e26:	4302      	orrs	r2, r0
 8007e28:	d09f      	beq.n	8007d6a <_strtod_l+0xba>
 8007e2a:	2400      	movs	r4, #0
 8007e2c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007e2e:	1c72      	adds	r2, r6, #1
 8007e30:	9219      	str	r2, [sp, #100]	; 0x64
 8007e32:	7872      	ldrb	r2, [r6, #1]
 8007e34:	2a2b      	cmp	r2, #43	; 0x2b
 8007e36:	d079      	beq.n	8007f2c <_strtod_l+0x27c>
 8007e38:	2a2d      	cmp	r2, #45	; 0x2d
 8007e3a:	f000 8083 	beq.w	8007f44 <_strtod_l+0x294>
 8007e3e:	2700      	movs	r7, #0
 8007e40:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007e44:	2909      	cmp	r1, #9
 8007e46:	f240 8083 	bls.w	8007f50 <_strtod_l+0x2a0>
 8007e4a:	9619      	str	r6, [sp, #100]	; 0x64
 8007e4c:	2500      	movs	r5, #0
 8007e4e:	e09f      	b.n	8007f90 <_strtod_l+0x2e0>
 8007e50:	2300      	movs	r3, #0
 8007e52:	e7c8      	b.n	8007de6 <_strtod_l+0x136>
 8007e54:	f1bb 0f08 	cmp.w	fp, #8
 8007e58:	bfd5      	itete	le
 8007e5a:	9906      	ldrle	r1, [sp, #24]
 8007e5c:	9905      	ldrgt	r1, [sp, #20]
 8007e5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e62:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007e66:	f100 0001 	add.w	r0, r0, #1
 8007e6a:	bfd4      	ite	le
 8007e6c:	9306      	strle	r3, [sp, #24]
 8007e6e:	9305      	strgt	r3, [sp, #20]
 8007e70:	f10b 0b01 	add.w	fp, fp, #1
 8007e74:	9019      	str	r0, [sp, #100]	; 0x64
 8007e76:	e7be      	b.n	8007df6 <_strtod_l+0x146>
 8007e78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e7a:	191a      	adds	r2, r3, r4
 8007e7c:	9219      	str	r2, [sp, #100]	; 0x64
 8007e7e:	5d1a      	ldrb	r2, [r3, r4]
 8007e80:	f1bb 0f00 	cmp.w	fp, #0
 8007e84:	d036      	beq.n	8007ef4 <_strtod_l+0x244>
 8007e86:	465c      	mov	r4, fp
 8007e88:	9004      	str	r0, [sp, #16]
 8007e8a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007e8e:	2b09      	cmp	r3, #9
 8007e90:	d912      	bls.n	8007eb8 <_strtod_l+0x208>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e7c1      	b.n	8007e1a <_strtod_l+0x16a>
 8007e96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e98:	3001      	adds	r0, #1
 8007e9a:	1c5a      	adds	r2, r3, #1
 8007e9c:	9219      	str	r2, [sp, #100]	; 0x64
 8007e9e:	785a      	ldrb	r2, [r3, #1]
 8007ea0:	2a30      	cmp	r2, #48	; 0x30
 8007ea2:	d0f8      	beq.n	8007e96 <_strtod_l+0x1e6>
 8007ea4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	f200 84d5 	bhi.w	8008858 <_strtod_l+0xba8>
 8007eae:	9004      	str	r0, [sp, #16]
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007eb6:	9308      	str	r3, [sp, #32]
 8007eb8:	3a30      	subs	r2, #48	; 0x30
 8007eba:	f100 0301 	add.w	r3, r0, #1
 8007ebe:	d013      	beq.n	8007ee8 <_strtod_l+0x238>
 8007ec0:	9904      	ldr	r1, [sp, #16]
 8007ec2:	1905      	adds	r5, r0, r4
 8007ec4:	4419      	add	r1, r3
 8007ec6:	9104      	str	r1, [sp, #16]
 8007ec8:	4623      	mov	r3, r4
 8007eca:	210a      	movs	r1, #10
 8007ecc:	42ab      	cmp	r3, r5
 8007ece:	d113      	bne.n	8007ef8 <_strtod_l+0x248>
 8007ed0:	1823      	adds	r3, r4, r0
 8007ed2:	2b08      	cmp	r3, #8
 8007ed4:	f104 0401 	add.w	r4, r4, #1
 8007ed8:	4404      	add	r4, r0
 8007eda:	dc1b      	bgt.n	8007f14 <_strtod_l+0x264>
 8007edc:	230a      	movs	r3, #10
 8007ede:	9906      	ldr	r1, [sp, #24]
 8007ee0:	fb03 2301 	mla	r3, r3, r1, r2
 8007ee4:	9306      	str	r3, [sp, #24]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007eea:	4618      	mov	r0, r3
 8007eec:	1c51      	adds	r1, r2, #1
 8007eee:	9119      	str	r1, [sp, #100]	; 0x64
 8007ef0:	7852      	ldrb	r2, [r2, #1]
 8007ef2:	e7ca      	b.n	8007e8a <_strtod_l+0x1da>
 8007ef4:	4658      	mov	r0, fp
 8007ef6:	e7d3      	b.n	8007ea0 <_strtod_l+0x1f0>
 8007ef8:	2b08      	cmp	r3, #8
 8007efa:	dc04      	bgt.n	8007f06 <_strtod_l+0x256>
 8007efc:	9f06      	ldr	r7, [sp, #24]
 8007efe:	434f      	muls	r7, r1
 8007f00:	9706      	str	r7, [sp, #24]
 8007f02:	3301      	adds	r3, #1
 8007f04:	e7e2      	b.n	8007ecc <_strtod_l+0x21c>
 8007f06:	1c5f      	adds	r7, r3, #1
 8007f08:	2f10      	cmp	r7, #16
 8007f0a:	bfde      	ittt	le
 8007f0c:	9f05      	ldrle	r7, [sp, #20]
 8007f0e:	434f      	mulle	r7, r1
 8007f10:	9705      	strle	r7, [sp, #20]
 8007f12:	e7f6      	b.n	8007f02 <_strtod_l+0x252>
 8007f14:	2c10      	cmp	r4, #16
 8007f16:	bfdf      	itttt	le
 8007f18:	230a      	movle	r3, #10
 8007f1a:	9905      	ldrle	r1, [sp, #20]
 8007f1c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007f20:	9305      	strle	r3, [sp, #20]
 8007f22:	e7e0      	b.n	8007ee6 <_strtod_l+0x236>
 8007f24:	2300      	movs	r3, #0
 8007f26:	9304      	str	r3, [sp, #16]
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e77b      	b.n	8007e24 <_strtod_l+0x174>
 8007f2c:	2700      	movs	r7, #0
 8007f2e:	1cb2      	adds	r2, r6, #2
 8007f30:	9219      	str	r2, [sp, #100]	; 0x64
 8007f32:	78b2      	ldrb	r2, [r6, #2]
 8007f34:	e784      	b.n	8007e40 <_strtod_l+0x190>
 8007f36:	bf00      	nop
 8007f38:	0800c1c0 	.word	0x0800c1c0
 8007f3c:	0800c078 	.word	0x0800c078
 8007f40:	7ff00000 	.word	0x7ff00000
 8007f44:	2701      	movs	r7, #1
 8007f46:	e7f2      	b.n	8007f2e <_strtod_l+0x27e>
 8007f48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f4a:	1c51      	adds	r1, r2, #1
 8007f4c:	9119      	str	r1, [sp, #100]	; 0x64
 8007f4e:	7852      	ldrb	r2, [r2, #1]
 8007f50:	2a30      	cmp	r2, #48	; 0x30
 8007f52:	d0f9      	beq.n	8007f48 <_strtod_l+0x298>
 8007f54:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007f58:	2908      	cmp	r1, #8
 8007f5a:	f63f af77 	bhi.w	8007e4c <_strtod_l+0x19c>
 8007f5e:	f04f 0e0a 	mov.w	lr, #10
 8007f62:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007f66:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f68:	9209      	str	r2, [sp, #36]	; 0x24
 8007f6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f6c:	1c51      	adds	r1, r2, #1
 8007f6e:	9119      	str	r1, [sp, #100]	; 0x64
 8007f70:	7852      	ldrb	r2, [r2, #1]
 8007f72:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007f76:	2d09      	cmp	r5, #9
 8007f78:	d935      	bls.n	8007fe6 <_strtod_l+0x336>
 8007f7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007f7c:	1b49      	subs	r1, r1, r5
 8007f7e:	2908      	cmp	r1, #8
 8007f80:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007f84:	dc02      	bgt.n	8007f8c <_strtod_l+0x2dc>
 8007f86:	4565      	cmp	r5, ip
 8007f88:	bfa8      	it	ge
 8007f8a:	4665      	movge	r5, ip
 8007f8c:	b107      	cbz	r7, 8007f90 <_strtod_l+0x2e0>
 8007f8e:	426d      	negs	r5, r5
 8007f90:	2c00      	cmp	r4, #0
 8007f92:	d14c      	bne.n	800802e <_strtod_l+0x37e>
 8007f94:	9907      	ldr	r1, [sp, #28]
 8007f96:	4301      	orrs	r1, r0
 8007f98:	f47f aecb 	bne.w	8007d32 <_strtod_l+0x82>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f47f aee4 	bne.w	8007d6a <_strtod_l+0xba>
 8007fa2:	2a69      	cmp	r2, #105	; 0x69
 8007fa4:	d026      	beq.n	8007ff4 <_strtod_l+0x344>
 8007fa6:	dc23      	bgt.n	8007ff0 <_strtod_l+0x340>
 8007fa8:	2a49      	cmp	r2, #73	; 0x49
 8007faa:	d023      	beq.n	8007ff4 <_strtod_l+0x344>
 8007fac:	2a4e      	cmp	r2, #78	; 0x4e
 8007fae:	f47f aedc 	bne.w	8007d6a <_strtod_l+0xba>
 8007fb2:	499d      	ldr	r1, [pc, #628]	; (8008228 <_strtod_l+0x578>)
 8007fb4:	a819      	add	r0, sp, #100	; 0x64
 8007fb6:	f001 fd9f 	bl	8009af8 <__match>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	f43f aed5 	beq.w	8007d6a <_strtod_l+0xba>
 8007fc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2b28      	cmp	r3, #40	; 0x28
 8007fc6:	d12c      	bne.n	8008022 <_strtod_l+0x372>
 8007fc8:	4998      	ldr	r1, [pc, #608]	; (800822c <_strtod_l+0x57c>)
 8007fca:	aa1c      	add	r2, sp, #112	; 0x70
 8007fcc:	a819      	add	r0, sp, #100	; 0x64
 8007fce:	f001 fda7 	bl	8009b20 <__hexnan>
 8007fd2:	2805      	cmp	r0, #5
 8007fd4:	d125      	bne.n	8008022 <_strtod_l+0x372>
 8007fd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fd8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007fdc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007fe0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007fe4:	e6a5      	b.n	8007d32 <_strtod_l+0x82>
 8007fe6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007fea:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007fee:	e7bc      	b.n	8007f6a <_strtod_l+0x2ba>
 8007ff0:	2a6e      	cmp	r2, #110	; 0x6e
 8007ff2:	e7dc      	b.n	8007fae <_strtod_l+0x2fe>
 8007ff4:	498e      	ldr	r1, [pc, #568]	; (8008230 <_strtod_l+0x580>)
 8007ff6:	a819      	add	r0, sp, #100	; 0x64
 8007ff8:	f001 fd7e 	bl	8009af8 <__match>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	f43f aeb4 	beq.w	8007d6a <_strtod_l+0xba>
 8008002:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008004:	498b      	ldr	r1, [pc, #556]	; (8008234 <_strtod_l+0x584>)
 8008006:	3b01      	subs	r3, #1
 8008008:	a819      	add	r0, sp, #100	; 0x64
 800800a:	9319      	str	r3, [sp, #100]	; 0x64
 800800c:	f001 fd74 	bl	8009af8 <__match>
 8008010:	b910      	cbnz	r0, 8008018 <_strtod_l+0x368>
 8008012:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008014:	3301      	adds	r3, #1
 8008016:	9319      	str	r3, [sp, #100]	; 0x64
 8008018:	f04f 0800 	mov.w	r8, #0
 800801c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008238 <_strtod_l+0x588>
 8008020:	e687      	b.n	8007d32 <_strtod_l+0x82>
 8008022:	4886      	ldr	r0, [pc, #536]	; (800823c <_strtod_l+0x58c>)
 8008024:	f002 fd56 	bl	800aad4 <nan>
 8008028:	4680      	mov	r8, r0
 800802a:	4689      	mov	r9, r1
 800802c:	e681      	b.n	8007d32 <_strtod_l+0x82>
 800802e:	9b04      	ldr	r3, [sp, #16]
 8008030:	f1bb 0f00 	cmp.w	fp, #0
 8008034:	bf08      	it	eq
 8008036:	46a3      	moveq	fp, r4
 8008038:	1aeb      	subs	r3, r5, r3
 800803a:	2c10      	cmp	r4, #16
 800803c:	9806      	ldr	r0, [sp, #24]
 800803e:	4626      	mov	r6, r4
 8008040:	9307      	str	r3, [sp, #28]
 8008042:	bfa8      	it	ge
 8008044:	2610      	movge	r6, #16
 8008046:	f7f8 f9cd 	bl	80003e4 <__aeabi_ui2d>
 800804a:	2c09      	cmp	r4, #9
 800804c:	4680      	mov	r8, r0
 800804e:	4689      	mov	r9, r1
 8008050:	dd13      	ble.n	800807a <_strtod_l+0x3ca>
 8008052:	4b7b      	ldr	r3, [pc, #492]	; (8008240 <_strtod_l+0x590>)
 8008054:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008058:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800805c:	f7f8 fa3c 	bl	80004d8 <__aeabi_dmul>
 8008060:	4680      	mov	r8, r0
 8008062:	9805      	ldr	r0, [sp, #20]
 8008064:	4689      	mov	r9, r1
 8008066:	f7f8 f9bd 	bl	80003e4 <__aeabi_ui2d>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	4640      	mov	r0, r8
 8008070:	4649      	mov	r1, r9
 8008072:	f7f8 f87b 	bl	800016c <__adddf3>
 8008076:	4680      	mov	r8, r0
 8008078:	4689      	mov	r9, r1
 800807a:	2c0f      	cmp	r4, #15
 800807c:	dc36      	bgt.n	80080ec <_strtod_l+0x43c>
 800807e:	9b07      	ldr	r3, [sp, #28]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f43f ae56 	beq.w	8007d32 <_strtod_l+0x82>
 8008086:	dd22      	ble.n	80080ce <_strtod_l+0x41e>
 8008088:	2b16      	cmp	r3, #22
 800808a:	dc09      	bgt.n	80080a0 <_strtod_l+0x3f0>
 800808c:	496c      	ldr	r1, [pc, #432]	; (8008240 <_strtod_l+0x590>)
 800808e:	4642      	mov	r2, r8
 8008090:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008094:	464b      	mov	r3, r9
 8008096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800809a:	f7f8 fa1d 	bl	80004d8 <__aeabi_dmul>
 800809e:	e7c3      	b.n	8008028 <_strtod_l+0x378>
 80080a0:	9a07      	ldr	r2, [sp, #28]
 80080a2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80080a6:	4293      	cmp	r3, r2
 80080a8:	db20      	blt.n	80080ec <_strtod_l+0x43c>
 80080aa:	4d65      	ldr	r5, [pc, #404]	; (8008240 <_strtod_l+0x590>)
 80080ac:	f1c4 040f 	rsb	r4, r4, #15
 80080b0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80080b4:	4642      	mov	r2, r8
 80080b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ba:	464b      	mov	r3, r9
 80080bc:	f7f8 fa0c 	bl	80004d8 <__aeabi_dmul>
 80080c0:	9b07      	ldr	r3, [sp, #28]
 80080c2:	1b1c      	subs	r4, r3, r4
 80080c4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80080c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080cc:	e7e5      	b.n	800809a <_strtod_l+0x3ea>
 80080ce:	9b07      	ldr	r3, [sp, #28]
 80080d0:	3316      	adds	r3, #22
 80080d2:	db0b      	blt.n	80080ec <_strtod_l+0x43c>
 80080d4:	9b04      	ldr	r3, [sp, #16]
 80080d6:	4640      	mov	r0, r8
 80080d8:	1b5d      	subs	r5, r3, r5
 80080da:	4b59      	ldr	r3, [pc, #356]	; (8008240 <_strtod_l+0x590>)
 80080dc:	4649      	mov	r1, r9
 80080de:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80080e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080e6:	f7f8 fb21 	bl	800072c <__aeabi_ddiv>
 80080ea:	e79d      	b.n	8008028 <_strtod_l+0x378>
 80080ec:	9b07      	ldr	r3, [sp, #28]
 80080ee:	1ba6      	subs	r6, r4, r6
 80080f0:	441e      	add	r6, r3
 80080f2:	2e00      	cmp	r6, #0
 80080f4:	dd74      	ble.n	80081e0 <_strtod_l+0x530>
 80080f6:	f016 030f 	ands.w	r3, r6, #15
 80080fa:	d00a      	beq.n	8008112 <_strtod_l+0x462>
 80080fc:	4950      	ldr	r1, [pc, #320]	; (8008240 <_strtod_l+0x590>)
 80080fe:	4642      	mov	r2, r8
 8008100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008108:	464b      	mov	r3, r9
 800810a:	f7f8 f9e5 	bl	80004d8 <__aeabi_dmul>
 800810e:	4680      	mov	r8, r0
 8008110:	4689      	mov	r9, r1
 8008112:	f036 060f 	bics.w	r6, r6, #15
 8008116:	d052      	beq.n	80081be <_strtod_l+0x50e>
 8008118:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800811c:	dd27      	ble.n	800816e <_strtod_l+0x4be>
 800811e:	f04f 0b00 	mov.w	fp, #0
 8008122:	f8cd b010 	str.w	fp, [sp, #16]
 8008126:	f8cd b020 	str.w	fp, [sp, #32]
 800812a:	f8cd b018 	str.w	fp, [sp, #24]
 800812e:	2322      	movs	r3, #34	; 0x22
 8008130:	f04f 0800 	mov.w	r8, #0
 8008134:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008238 <_strtod_l+0x588>
 8008138:	f8ca 3000 	str.w	r3, [sl]
 800813c:	9b08      	ldr	r3, [sp, #32]
 800813e:	2b00      	cmp	r3, #0
 8008140:	f43f adf7 	beq.w	8007d32 <_strtod_l+0x82>
 8008144:	4650      	mov	r0, sl
 8008146:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008148:	f001 fe00 	bl	8009d4c <_Bfree>
 800814c:	4650      	mov	r0, sl
 800814e:	9906      	ldr	r1, [sp, #24]
 8008150:	f001 fdfc 	bl	8009d4c <_Bfree>
 8008154:	4650      	mov	r0, sl
 8008156:	9904      	ldr	r1, [sp, #16]
 8008158:	f001 fdf8 	bl	8009d4c <_Bfree>
 800815c:	4650      	mov	r0, sl
 800815e:	9908      	ldr	r1, [sp, #32]
 8008160:	f001 fdf4 	bl	8009d4c <_Bfree>
 8008164:	4659      	mov	r1, fp
 8008166:	4650      	mov	r0, sl
 8008168:	f001 fdf0 	bl	8009d4c <_Bfree>
 800816c:	e5e1      	b.n	8007d32 <_strtod_l+0x82>
 800816e:	4b35      	ldr	r3, [pc, #212]	; (8008244 <_strtod_l+0x594>)
 8008170:	4640      	mov	r0, r8
 8008172:	9305      	str	r3, [sp, #20]
 8008174:	2300      	movs	r3, #0
 8008176:	4649      	mov	r1, r9
 8008178:	461f      	mov	r7, r3
 800817a:	1136      	asrs	r6, r6, #4
 800817c:	2e01      	cmp	r6, #1
 800817e:	dc21      	bgt.n	80081c4 <_strtod_l+0x514>
 8008180:	b10b      	cbz	r3, 8008186 <_strtod_l+0x4d6>
 8008182:	4680      	mov	r8, r0
 8008184:	4689      	mov	r9, r1
 8008186:	4b2f      	ldr	r3, [pc, #188]	; (8008244 <_strtod_l+0x594>)
 8008188:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800818c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008190:	4642      	mov	r2, r8
 8008192:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008196:	464b      	mov	r3, r9
 8008198:	f7f8 f99e 	bl	80004d8 <__aeabi_dmul>
 800819c:	4b26      	ldr	r3, [pc, #152]	; (8008238 <_strtod_l+0x588>)
 800819e:	460a      	mov	r2, r1
 80081a0:	400b      	ands	r3, r1
 80081a2:	4929      	ldr	r1, [pc, #164]	; (8008248 <_strtod_l+0x598>)
 80081a4:	4680      	mov	r8, r0
 80081a6:	428b      	cmp	r3, r1
 80081a8:	d8b9      	bhi.n	800811e <_strtod_l+0x46e>
 80081aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80081ae:	428b      	cmp	r3, r1
 80081b0:	bf86      	itte	hi
 80081b2:	f04f 38ff 	movhi.w	r8, #4294967295
 80081b6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800824c <_strtod_l+0x59c>
 80081ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80081be:	2300      	movs	r3, #0
 80081c0:	9305      	str	r3, [sp, #20]
 80081c2:	e07f      	b.n	80082c4 <_strtod_l+0x614>
 80081c4:	07f2      	lsls	r2, r6, #31
 80081c6:	d505      	bpl.n	80081d4 <_strtod_l+0x524>
 80081c8:	9b05      	ldr	r3, [sp, #20]
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	f7f8 f983 	bl	80004d8 <__aeabi_dmul>
 80081d2:	2301      	movs	r3, #1
 80081d4:	9a05      	ldr	r2, [sp, #20]
 80081d6:	3701      	adds	r7, #1
 80081d8:	3208      	adds	r2, #8
 80081da:	1076      	asrs	r6, r6, #1
 80081dc:	9205      	str	r2, [sp, #20]
 80081de:	e7cd      	b.n	800817c <_strtod_l+0x4cc>
 80081e0:	d0ed      	beq.n	80081be <_strtod_l+0x50e>
 80081e2:	4276      	negs	r6, r6
 80081e4:	f016 020f 	ands.w	r2, r6, #15
 80081e8:	d00a      	beq.n	8008200 <_strtod_l+0x550>
 80081ea:	4b15      	ldr	r3, [pc, #84]	; (8008240 <_strtod_l+0x590>)
 80081ec:	4640      	mov	r0, r8
 80081ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f2:	4649      	mov	r1, r9
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f7f8 fa98 	bl	800072c <__aeabi_ddiv>
 80081fc:	4680      	mov	r8, r0
 80081fe:	4689      	mov	r9, r1
 8008200:	1136      	asrs	r6, r6, #4
 8008202:	d0dc      	beq.n	80081be <_strtod_l+0x50e>
 8008204:	2e1f      	cmp	r6, #31
 8008206:	dd23      	ble.n	8008250 <_strtod_l+0x5a0>
 8008208:	f04f 0b00 	mov.w	fp, #0
 800820c:	f8cd b010 	str.w	fp, [sp, #16]
 8008210:	f8cd b020 	str.w	fp, [sp, #32]
 8008214:	f8cd b018 	str.w	fp, [sp, #24]
 8008218:	2322      	movs	r3, #34	; 0x22
 800821a:	f04f 0800 	mov.w	r8, #0
 800821e:	f04f 0900 	mov.w	r9, #0
 8008222:	f8ca 3000 	str.w	r3, [sl]
 8008226:	e789      	b.n	800813c <_strtod_l+0x48c>
 8008228:	0800c051 	.word	0x0800c051
 800822c:	0800c08c 	.word	0x0800c08c
 8008230:	0800c049 	.word	0x0800c049
 8008234:	0800c0cb 	.word	0x0800c0cb
 8008238:	7ff00000 	.word	0x7ff00000
 800823c:	0800c378 	.word	0x0800c378
 8008240:	0800c258 	.word	0x0800c258
 8008244:	0800c230 	.word	0x0800c230
 8008248:	7ca00000 	.word	0x7ca00000
 800824c:	7fefffff 	.word	0x7fefffff
 8008250:	f016 0310 	ands.w	r3, r6, #16
 8008254:	bf18      	it	ne
 8008256:	236a      	movne	r3, #106	; 0x6a
 8008258:	4640      	mov	r0, r8
 800825a:	9305      	str	r3, [sp, #20]
 800825c:	4649      	mov	r1, r9
 800825e:	2300      	movs	r3, #0
 8008260:	4fb0      	ldr	r7, [pc, #704]	; (8008524 <_strtod_l+0x874>)
 8008262:	07f2      	lsls	r2, r6, #31
 8008264:	d504      	bpl.n	8008270 <_strtod_l+0x5c0>
 8008266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800826a:	f7f8 f935 	bl	80004d8 <__aeabi_dmul>
 800826e:	2301      	movs	r3, #1
 8008270:	1076      	asrs	r6, r6, #1
 8008272:	f107 0708 	add.w	r7, r7, #8
 8008276:	d1f4      	bne.n	8008262 <_strtod_l+0x5b2>
 8008278:	b10b      	cbz	r3, 800827e <_strtod_l+0x5ce>
 800827a:	4680      	mov	r8, r0
 800827c:	4689      	mov	r9, r1
 800827e:	9b05      	ldr	r3, [sp, #20]
 8008280:	b1c3      	cbz	r3, 80082b4 <_strtod_l+0x604>
 8008282:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008286:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800828a:	2b00      	cmp	r3, #0
 800828c:	4649      	mov	r1, r9
 800828e:	dd11      	ble.n	80082b4 <_strtod_l+0x604>
 8008290:	2b1f      	cmp	r3, #31
 8008292:	f340 8127 	ble.w	80084e4 <_strtod_l+0x834>
 8008296:	2b34      	cmp	r3, #52	; 0x34
 8008298:	bfd8      	it	le
 800829a:	f04f 33ff 	movle.w	r3, #4294967295
 800829e:	f04f 0800 	mov.w	r8, #0
 80082a2:	bfcf      	iteee	gt
 80082a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80082a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80082ac:	fa03 f202 	lslle.w	r2, r3, r2
 80082b0:	ea02 0901 	andle.w	r9, r2, r1
 80082b4:	2200      	movs	r2, #0
 80082b6:	2300      	movs	r3, #0
 80082b8:	4640      	mov	r0, r8
 80082ba:	4649      	mov	r1, r9
 80082bc:	f7f8 fb74 	bl	80009a8 <__aeabi_dcmpeq>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d1a1      	bne.n	8008208 <_strtod_l+0x558>
 80082c4:	9b06      	ldr	r3, [sp, #24]
 80082c6:	465a      	mov	r2, fp
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	4650      	mov	r0, sl
 80082cc:	4623      	mov	r3, r4
 80082ce:	9908      	ldr	r1, [sp, #32]
 80082d0:	f001 fda4 	bl	8009e1c <__s2b>
 80082d4:	9008      	str	r0, [sp, #32]
 80082d6:	2800      	cmp	r0, #0
 80082d8:	f43f af21 	beq.w	800811e <_strtod_l+0x46e>
 80082dc:	9b04      	ldr	r3, [sp, #16]
 80082de:	f04f 0b00 	mov.w	fp, #0
 80082e2:	1b5d      	subs	r5, r3, r5
 80082e4:	9b07      	ldr	r3, [sp, #28]
 80082e6:	f8cd b010 	str.w	fp, [sp, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	bfb4      	ite	lt
 80082ee:	462b      	movlt	r3, r5
 80082f0:	2300      	movge	r3, #0
 80082f2:	930e      	str	r3, [sp, #56]	; 0x38
 80082f4:	9b07      	ldr	r3, [sp, #28]
 80082f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80082fa:	9314      	str	r3, [sp, #80]	; 0x50
 80082fc:	9b08      	ldr	r3, [sp, #32]
 80082fe:	4650      	mov	r0, sl
 8008300:	6859      	ldr	r1, [r3, #4]
 8008302:	f001 fce3 	bl	8009ccc <_Balloc>
 8008306:	9006      	str	r0, [sp, #24]
 8008308:	2800      	cmp	r0, #0
 800830a:	f43f af10 	beq.w	800812e <_strtod_l+0x47e>
 800830e:	9b08      	ldr	r3, [sp, #32]
 8008310:	300c      	adds	r0, #12
 8008312:	691a      	ldr	r2, [r3, #16]
 8008314:	f103 010c 	add.w	r1, r3, #12
 8008318:	3202      	adds	r2, #2
 800831a:	0092      	lsls	r2, r2, #2
 800831c:	f001 fcc8 	bl	8009cb0 <memcpy>
 8008320:	ab1c      	add	r3, sp, #112	; 0x70
 8008322:	9301      	str	r3, [sp, #4]
 8008324:	ab1b      	add	r3, sp, #108	; 0x6c
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	4642      	mov	r2, r8
 800832a:	464b      	mov	r3, r9
 800832c:	4650      	mov	r0, sl
 800832e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8008332:	f002 f8b5 	bl	800a4a0 <__d2b>
 8008336:	901a      	str	r0, [sp, #104]	; 0x68
 8008338:	2800      	cmp	r0, #0
 800833a:	f43f aef8 	beq.w	800812e <_strtod_l+0x47e>
 800833e:	2101      	movs	r1, #1
 8008340:	4650      	mov	r0, sl
 8008342:	f001 fe03 	bl	8009f4c <__i2b>
 8008346:	4603      	mov	r3, r0
 8008348:	9004      	str	r0, [sp, #16]
 800834a:	2800      	cmp	r0, #0
 800834c:	f43f aeef 	beq.w	800812e <_strtod_l+0x47e>
 8008350:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008352:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008354:	2d00      	cmp	r5, #0
 8008356:	bfab      	itete	ge
 8008358:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800835a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800835c:	18ee      	addge	r6, r5, r3
 800835e:	1b5c      	sublt	r4, r3, r5
 8008360:	9b05      	ldr	r3, [sp, #20]
 8008362:	bfa8      	it	ge
 8008364:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8008366:	eba5 0503 	sub.w	r5, r5, r3
 800836a:	4415      	add	r5, r2
 800836c:	4b6e      	ldr	r3, [pc, #440]	; (8008528 <_strtod_l+0x878>)
 800836e:	f105 35ff 	add.w	r5, r5, #4294967295
 8008372:	bfb8      	it	lt
 8008374:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008376:	429d      	cmp	r5, r3
 8008378:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800837c:	f280 80c4 	bge.w	8008508 <_strtod_l+0x858>
 8008380:	1b5b      	subs	r3, r3, r5
 8008382:	2b1f      	cmp	r3, #31
 8008384:	f04f 0701 	mov.w	r7, #1
 8008388:	eba2 0203 	sub.w	r2, r2, r3
 800838c:	f300 80b1 	bgt.w	80084f2 <_strtod_l+0x842>
 8008390:	2500      	movs	r5, #0
 8008392:	fa07 f303 	lsl.w	r3, r7, r3
 8008396:	930f      	str	r3, [sp, #60]	; 0x3c
 8008398:	18b7      	adds	r7, r6, r2
 800839a:	9b05      	ldr	r3, [sp, #20]
 800839c:	42be      	cmp	r6, r7
 800839e:	4414      	add	r4, r2
 80083a0:	441c      	add	r4, r3
 80083a2:	4633      	mov	r3, r6
 80083a4:	bfa8      	it	ge
 80083a6:	463b      	movge	r3, r7
 80083a8:	42a3      	cmp	r3, r4
 80083aa:	bfa8      	it	ge
 80083ac:	4623      	movge	r3, r4
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	bfc2      	ittt	gt
 80083b2:	1aff      	subgt	r7, r7, r3
 80083b4:	1ae4      	subgt	r4, r4, r3
 80083b6:	1af6      	subgt	r6, r6, r3
 80083b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	dd17      	ble.n	80083ee <_strtod_l+0x73e>
 80083be:	461a      	mov	r2, r3
 80083c0:	4650      	mov	r0, sl
 80083c2:	9904      	ldr	r1, [sp, #16]
 80083c4:	f001 fe80 	bl	800a0c8 <__pow5mult>
 80083c8:	9004      	str	r0, [sp, #16]
 80083ca:	2800      	cmp	r0, #0
 80083cc:	f43f aeaf 	beq.w	800812e <_strtod_l+0x47e>
 80083d0:	4601      	mov	r1, r0
 80083d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80083d4:	4650      	mov	r0, sl
 80083d6:	f001 fdcf 	bl	8009f78 <__multiply>
 80083da:	9009      	str	r0, [sp, #36]	; 0x24
 80083dc:	2800      	cmp	r0, #0
 80083de:	f43f aea6 	beq.w	800812e <_strtod_l+0x47e>
 80083e2:	4650      	mov	r0, sl
 80083e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80083e6:	f001 fcb1 	bl	8009d4c <_Bfree>
 80083ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ec:	931a      	str	r3, [sp, #104]	; 0x68
 80083ee:	2f00      	cmp	r7, #0
 80083f0:	f300 808e 	bgt.w	8008510 <_strtod_l+0x860>
 80083f4:	9b07      	ldr	r3, [sp, #28]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	dd08      	ble.n	800840c <_strtod_l+0x75c>
 80083fa:	4650      	mov	r0, sl
 80083fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083fe:	9906      	ldr	r1, [sp, #24]
 8008400:	f001 fe62 	bl	800a0c8 <__pow5mult>
 8008404:	9006      	str	r0, [sp, #24]
 8008406:	2800      	cmp	r0, #0
 8008408:	f43f ae91 	beq.w	800812e <_strtod_l+0x47e>
 800840c:	2c00      	cmp	r4, #0
 800840e:	dd08      	ble.n	8008422 <_strtod_l+0x772>
 8008410:	4622      	mov	r2, r4
 8008412:	4650      	mov	r0, sl
 8008414:	9906      	ldr	r1, [sp, #24]
 8008416:	f001 feb1 	bl	800a17c <__lshift>
 800841a:	9006      	str	r0, [sp, #24]
 800841c:	2800      	cmp	r0, #0
 800841e:	f43f ae86 	beq.w	800812e <_strtod_l+0x47e>
 8008422:	2e00      	cmp	r6, #0
 8008424:	dd08      	ble.n	8008438 <_strtod_l+0x788>
 8008426:	4632      	mov	r2, r6
 8008428:	4650      	mov	r0, sl
 800842a:	9904      	ldr	r1, [sp, #16]
 800842c:	f001 fea6 	bl	800a17c <__lshift>
 8008430:	9004      	str	r0, [sp, #16]
 8008432:	2800      	cmp	r0, #0
 8008434:	f43f ae7b 	beq.w	800812e <_strtod_l+0x47e>
 8008438:	4650      	mov	r0, sl
 800843a:	9a06      	ldr	r2, [sp, #24]
 800843c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800843e:	f001 ff29 	bl	800a294 <__mdiff>
 8008442:	4683      	mov	fp, r0
 8008444:	2800      	cmp	r0, #0
 8008446:	f43f ae72 	beq.w	800812e <_strtod_l+0x47e>
 800844a:	2400      	movs	r4, #0
 800844c:	68c3      	ldr	r3, [r0, #12]
 800844e:	9904      	ldr	r1, [sp, #16]
 8008450:	60c4      	str	r4, [r0, #12]
 8008452:	930b      	str	r3, [sp, #44]	; 0x2c
 8008454:	f001 ff02 	bl	800a25c <__mcmp>
 8008458:	42a0      	cmp	r0, r4
 800845a:	da6b      	bge.n	8008534 <_strtod_l+0x884>
 800845c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800845e:	ea53 0308 	orrs.w	r3, r3, r8
 8008462:	f040 8091 	bne.w	8008588 <_strtod_l+0x8d8>
 8008466:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800846a:	2b00      	cmp	r3, #0
 800846c:	f040 808c 	bne.w	8008588 <_strtod_l+0x8d8>
 8008470:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008474:	0d1b      	lsrs	r3, r3, #20
 8008476:	051b      	lsls	r3, r3, #20
 8008478:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800847c:	f240 8084 	bls.w	8008588 <_strtod_l+0x8d8>
 8008480:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008484:	b91b      	cbnz	r3, 800848e <_strtod_l+0x7de>
 8008486:	f8db 3010 	ldr.w	r3, [fp, #16]
 800848a:	2b01      	cmp	r3, #1
 800848c:	dd7c      	ble.n	8008588 <_strtod_l+0x8d8>
 800848e:	4659      	mov	r1, fp
 8008490:	2201      	movs	r2, #1
 8008492:	4650      	mov	r0, sl
 8008494:	f001 fe72 	bl	800a17c <__lshift>
 8008498:	9904      	ldr	r1, [sp, #16]
 800849a:	4683      	mov	fp, r0
 800849c:	f001 fede 	bl	800a25c <__mcmp>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	dd71      	ble.n	8008588 <_strtod_l+0x8d8>
 80084a4:	9905      	ldr	r1, [sp, #20]
 80084a6:	464b      	mov	r3, r9
 80084a8:	4a20      	ldr	r2, [pc, #128]	; (800852c <_strtod_l+0x87c>)
 80084aa:	2900      	cmp	r1, #0
 80084ac:	f000 808c 	beq.w	80085c8 <_strtod_l+0x918>
 80084b0:	ea02 0109 	and.w	r1, r2, r9
 80084b4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80084b8:	f300 8086 	bgt.w	80085c8 <_strtod_l+0x918>
 80084bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80084c0:	f77f aeaa 	ble.w	8008218 <_strtod_l+0x568>
 80084c4:	4640      	mov	r0, r8
 80084c6:	4649      	mov	r1, r9
 80084c8:	4b19      	ldr	r3, [pc, #100]	; (8008530 <_strtod_l+0x880>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	f7f8 f804 	bl	80004d8 <__aeabi_dmul>
 80084d0:	460b      	mov	r3, r1
 80084d2:	4303      	orrs	r3, r0
 80084d4:	bf08      	it	eq
 80084d6:	2322      	moveq	r3, #34	; 0x22
 80084d8:	4680      	mov	r8, r0
 80084da:	4689      	mov	r9, r1
 80084dc:	bf08      	it	eq
 80084de:	f8ca 3000 	streq.w	r3, [sl]
 80084e2:	e62f      	b.n	8008144 <_strtod_l+0x494>
 80084e4:	f04f 32ff 	mov.w	r2, #4294967295
 80084e8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ec:	ea03 0808 	and.w	r8, r3, r8
 80084f0:	e6e0      	b.n	80082b4 <_strtod_l+0x604>
 80084f2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80084f6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80084fa:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80084fe:	35e2      	adds	r5, #226	; 0xe2
 8008500:	fa07 f505 	lsl.w	r5, r7, r5
 8008504:	970f      	str	r7, [sp, #60]	; 0x3c
 8008506:	e747      	b.n	8008398 <_strtod_l+0x6e8>
 8008508:	2301      	movs	r3, #1
 800850a:	2500      	movs	r5, #0
 800850c:	930f      	str	r3, [sp, #60]	; 0x3c
 800850e:	e743      	b.n	8008398 <_strtod_l+0x6e8>
 8008510:	463a      	mov	r2, r7
 8008512:	4650      	mov	r0, sl
 8008514:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008516:	f001 fe31 	bl	800a17c <__lshift>
 800851a:	901a      	str	r0, [sp, #104]	; 0x68
 800851c:	2800      	cmp	r0, #0
 800851e:	f47f af69 	bne.w	80083f4 <_strtod_l+0x744>
 8008522:	e604      	b.n	800812e <_strtod_l+0x47e>
 8008524:	0800c0a0 	.word	0x0800c0a0
 8008528:	fffffc02 	.word	0xfffffc02
 800852c:	7ff00000 	.word	0x7ff00000
 8008530:	39500000 	.word	0x39500000
 8008534:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008538:	d165      	bne.n	8008606 <_strtod_l+0x956>
 800853a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800853c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008540:	b35a      	cbz	r2, 800859a <_strtod_l+0x8ea>
 8008542:	4a99      	ldr	r2, [pc, #612]	; (80087a8 <_strtod_l+0xaf8>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d12b      	bne.n	80085a0 <_strtod_l+0x8f0>
 8008548:	9b05      	ldr	r3, [sp, #20]
 800854a:	4641      	mov	r1, r8
 800854c:	b303      	cbz	r3, 8008590 <_strtod_l+0x8e0>
 800854e:	464a      	mov	r2, r9
 8008550:	4b96      	ldr	r3, [pc, #600]	; (80087ac <_strtod_l+0xafc>)
 8008552:	4013      	ands	r3, r2
 8008554:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008558:	f04f 32ff 	mov.w	r2, #4294967295
 800855c:	d81b      	bhi.n	8008596 <_strtod_l+0x8e6>
 800855e:	0d1b      	lsrs	r3, r3, #20
 8008560:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008564:	fa02 f303 	lsl.w	r3, r2, r3
 8008568:	4299      	cmp	r1, r3
 800856a:	d119      	bne.n	80085a0 <_strtod_l+0x8f0>
 800856c:	4b90      	ldr	r3, [pc, #576]	; (80087b0 <_strtod_l+0xb00>)
 800856e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008570:	429a      	cmp	r2, r3
 8008572:	d102      	bne.n	800857a <_strtod_l+0x8ca>
 8008574:	3101      	adds	r1, #1
 8008576:	f43f adda 	beq.w	800812e <_strtod_l+0x47e>
 800857a:	f04f 0800 	mov.w	r8, #0
 800857e:	4b8b      	ldr	r3, [pc, #556]	; (80087ac <_strtod_l+0xafc>)
 8008580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008582:	401a      	ands	r2, r3
 8008584:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008588:	9b05      	ldr	r3, [sp, #20]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d19a      	bne.n	80084c4 <_strtod_l+0x814>
 800858e:	e5d9      	b.n	8008144 <_strtod_l+0x494>
 8008590:	f04f 33ff 	mov.w	r3, #4294967295
 8008594:	e7e8      	b.n	8008568 <_strtod_l+0x8b8>
 8008596:	4613      	mov	r3, r2
 8008598:	e7e6      	b.n	8008568 <_strtod_l+0x8b8>
 800859a:	ea53 0308 	orrs.w	r3, r3, r8
 800859e:	d081      	beq.n	80084a4 <_strtod_l+0x7f4>
 80085a0:	b1e5      	cbz	r5, 80085dc <_strtod_l+0x92c>
 80085a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a4:	421d      	tst	r5, r3
 80085a6:	d0ef      	beq.n	8008588 <_strtod_l+0x8d8>
 80085a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085aa:	4640      	mov	r0, r8
 80085ac:	4649      	mov	r1, r9
 80085ae:	9a05      	ldr	r2, [sp, #20]
 80085b0:	b1c3      	cbz	r3, 80085e4 <_strtod_l+0x934>
 80085b2:	f7ff fb5b 	bl	8007c6c <sulp>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085be:	f7f7 fdd5 	bl	800016c <__adddf3>
 80085c2:	4680      	mov	r8, r0
 80085c4:	4689      	mov	r9, r1
 80085c6:	e7df      	b.n	8008588 <_strtod_l+0x8d8>
 80085c8:	4013      	ands	r3, r2
 80085ca:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80085ce:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80085d2:	f04f 38ff 	mov.w	r8, #4294967295
 80085d6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80085da:	e7d5      	b.n	8008588 <_strtod_l+0x8d8>
 80085dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085de:	ea13 0f08 	tst.w	r3, r8
 80085e2:	e7e0      	b.n	80085a6 <_strtod_l+0x8f6>
 80085e4:	f7ff fb42 	bl	8007c6c <sulp>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085f0:	f7f7 fdba 	bl	8000168 <__aeabi_dsub>
 80085f4:	2200      	movs	r2, #0
 80085f6:	2300      	movs	r3, #0
 80085f8:	4680      	mov	r8, r0
 80085fa:	4689      	mov	r9, r1
 80085fc:	f7f8 f9d4 	bl	80009a8 <__aeabi_dcmpeq>
 8008600:	2800      	cmp	r0, #0
 8008602:	d0c1      	beq.n	8008588 <_strtod_l+0x8d8>
 8008604:	e608      	b.n	8008218 <_strtod_l+0x568>
 8008606:	4658      	mov	r0, fp
 8008608:	9904      	ldr	r1, [sp, #16]
 800860a:	f001 ffa5 	bl	800a558 <__ratio>
 800860e:	2200      	movs	r2, #0
 8008610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008614:	4606      	mov	r6, r0
 8008616:	460f      	mov	r7, r1
 8008618:	f7f8 f9da 	bl	80009d0 <__aeabi_dcmple>
 800861c:	2800      	cmp	r0, #0
 800861e:	d070      	beq.n	8008702 <_strtod_l+0xa52>
 8008620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008622:	2b00      	cmp	r3, #0
 8008624:	d042      	beq.n	80086ac <_strtod_l+0x9fc>
 8008626:	2600      	movs	r6, #0
 8008628:	4f62      	ldr	r7, [pc, #392]	; (80087b4 <_strtod_l+0xb04>)
 800862a:	4d62      	ldr	r5, [pc, #392]	; (80087b4 <_strtod_l+0xb04>)
 800862c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008632:	0d1b      	lsrs	r3, r3, #20
 8008634:	051b      	lsls	r3, r3, #20
 8008636:	930f      	str	r3, [sp, #60]	; 0x3c
 8008638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800863a:	4b5f      	ldr	r3, [pc, #380]	; (80087b8 <_strtod_l+0xb08>)
 800863c:	429a      	cmp	r2, r3
 800863e:	f040 80c3 	bne.w	80087c8 <_strtod_l+0xb18>
 8008642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008644:	4640      	mov	r0, r8
 8008646:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800864a:	4649      	mov	r1, r9
 800864c:	f001 feae 	bl	800a3ac <__ulp>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4630      	mov	r0, r6
 8008656:	4639      	mov	r1, r7
 8008658:	f7f7 ff3e 	bl	80004d8 <__aeabi_dmul>
 800865c:	4642      	mov	r2, r8
 800865e:	464b      	mov	r3, r9
 8008660:	f7f7 fd84 	bl	800016c <__adddf3>
 8008664:	460b      	mov	r3, r1
 8008666:	4951      	ldr	r1, [pc, #324]	; (80087ac <_strtod_l+0xafc>)
 8008668:	4a54      	ldr	r2, [pc, #336]	; (80087bc <_strtod_l+0xb0c>)
 800866a:	4019      	ands	r1, r3
 800866c:	4291      	cmp	r1, r2
 800866e:	4680      	mov	r8, r0
 8008670:	d95d      	bls.n	800872e <_strtod_l+0xa7e>
 8008672:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008674:	4b4e      	ldr	r3, [pc, #312]	; (80087b0 <_strtod_l+0xb00>)
 8008676:	429a      	cmp	r2, r3
 8008678:	d103      	bne.n	8008682 <_strtod_l+0x9d2>
 800867a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800867c:	3301      	adds	r3, #1
 800867e:	f43f ad56 	beq.w	800812e <_strtod_l+0x47e>
 8008682:	f04f 38ff 	mov.w	r8, #4294967295
 8008686:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80087b0 <_strtod_l+0xb00>
 800868a:	4650      	mov	r0, sl
 800868c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800868e:	f001 fb5d 	bl	8009d4c <_Bfree>
 8008692:	4650      	mov	r0, sl
 8008694:	9906      	ldr	r1, [sp, #24]
 8008696:	f001 fb59 	bl	8009d4c <_Bfree>
 800869a:	4650      	mov	r0, sl
 800869c:	9904      	ldr	r1, [sp, #16]
 800869e:	f001 fb55 	bl	8009d4c <_Bfree>
 80086a2:	4659      	mov	r1, fp
 80086a4:	4650      	mov	r0, sl
 80086a6:	f001 fb51 	bl	8009d4c <_Bfree>
 80086aa:	e627      	b.n	80082fc <_strtod_l+0x64c>
 80086ac:	f1b8 0f00 	cmp.w	r8, #0
 80086b0:	d119      	bne.n	80086e6 <_strtod_l+0xa36>
 80086b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086b8:	b9e3      	cbnz	r3, 80086f4 <_strtod_l+0xa44>
 80086ba:	2200      	movs	r2, #0
 80086bc:	4630      	mov	r0, r6
 80086be:	4639      	mov	r1, r7
 80086c0:	4b3c      	ldr	r3, [pc, #240]	; (80087b4 <_strtod_l+0xb04>)
 80086c2:	f7f8 f97b 	bl	80009bc <__aeabi_dcmplt>
 80086c6:	b9c8      	cbnz	r0, 80086fc <_strtod_l+0xa4c>
 80086c8:	2200      	movs	r2, #0
 80086ca:	4630      	mov	r0, r6
 80086cc:	4639      	mov	r1, r7
 80086ce:	4b3c      	ldr	r3, [pc, #240]	; (80087c0 <_strtod_l+0xb10>)
 80086d0:	f7f7 ff02 	bl	80004d8 <__aeabi_dmul>
 80086d4:	4604      	mov	r4, r0
 80086d6:	460d      	mov	r5, r1
 80086d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80086dc:	9416      	str	r4, [sp, #88]	; 0x58
 80086de:	9317      	str	r3, [sp, #92]	; 0x5c
 80086e0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80086e4:	e7a2      	b.n	800862c <_strtod_l+0x97c>
 80086e6:	f1b8 0f01 	cmp.w	r8, #1
 80086ea:	d103      	bne.n	80086f4 <_strtod_l+0xa44>
 80086ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f43f ad92 	beq.w	8008218 <_strtod_l+0x568>
 80086f4:	2600      	movs	r6, #0
 80086f6:	2400      	movs	r4, #0
 80086f8:	4f32      	ldr	r7, [pc, #200]	; (80087c4 <_strtod_l+0xb14>)
 80086fa:	e796      	b.n	800862a <_strtod_l+0x97a>
 80086fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80086fe:	4d30      	ldr	r5, [pc, #192]	; (80087c0 <_strtod_l+0xb10>)
 8008700:	e7ea      	b.n	80086d8 <_strtod_l+0xa28>
 8008702:	4b2f      	ldr	r3, [pc, #188]	; (80087c0 <_strtod_l+0xb10>)
 8008704:	2200      	movs	r2, #0
 8008706:	4630      	mov	r0, r6
 8008708:	4639      	mov	r1, r7
 800870a:	f7f7 fee5 	bl	80004d8 <__aeabi_dmul>
 800870e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008710:	4604      	mov	r4, r0
 8008712:	460d      	mov	r5, r1
 8008714:	b933      	cbnz	r3, 8008724 <_strtod_l+0xa74>
 8008716:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800871a:	9010      	str	r0, [sp, #64]	; 0x40
 800871c:	9311      	str	r3, [sp, #68]	; 0x44
 800871e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008722:	e783      	b.n	800862c <_strtod_l+0x97c>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800872c:	e7f7      	b.n	800871e <_strtod_l+0xa6e>
 800872e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008732:	9b05      	ldr	r3, [sp, #20]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1a8      	bne.n	800868a <_strtod_l+0x9da>
 8008738:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800873c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800873e:	0d1b      	lsrs	r3, r3, #20
 8008740:	051b      	lsls	r3, r3, #20
 8008742:	429a      	cmp	r2, r3
 8008744:	d1a1      	bne.n	800868a <_strtod_l+0x9da>
 8008746:	4620      	mov	r0, r4
 8008748:	4629      	mov	r1, r5
 800874a:	f7f8 fd67 	bl	800121c <__aeabi_d2lz>
 800874e:	f7f7 fe95 	bl	800047c <__aeabi_l2d>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4620      	mov	r0, r4
 8008758:	4629      	mov	r1, r5
 800875a:	f7f7 fd05 	bl	8000168 <__aeabi_dsub>
 800875e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008764:	ea43 0308 	orr.w	r3, r3, r8
 8008768:	4313      	orrs	r3, r2
 800876a:	4604      	mov	r4, r0
 800876c:	460d      	mov	r5, r1
 800876e:	d066      	beq.n	800883e <_strtod_l+0xb8e>
 8008770:	a309      	add	r3, pc, #36	; (adr r3, 8008798 <_strtod_l+0xae8>)
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	f7f8 f921 	bl	80009bc <__aeabi_dcmplt>
 800877a:	2800      	cmp	r0, #0
 800877c:	f47f ace2 	bne.w	8008144 <_strtod_l+0x494>
 8008780:	a307      	add	r3, pc, #28	; (adr r3, 80087a0 <_strtod_l+0xaf0>)
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	4620      	mov	r0, r4
 8008788:	4629      	mov	r1, r5
 800878a:	f7f8 f935 	bl	80009f8 <__aeabi_dcmpgt>
 800878e:	2800      	cmp	r0, #0
 8008790:	f43f af7b 	beq.w	800868a <_strtod_l+0x9da>
 8008794:	e4d6      	b.n	8008144 <_strtod_l+0x494>
 8008796:	bf00      	nop
 8008798:	94a03595 	.word	0x94a03595
 800879c:	3fdfffff 	.word	0x3fdfffff
 80087a0:	35afe535 	.word	0x35afe535
 80087a4:	3fe00000 	.word	0x3fe00000
 80087a8:	000fffff 	.word	0x000fffff
 80087ac:	7ff00000 	.word	0x7ff00000
 80087b0:	7fefffff 	.word	0x7fefffff
 80087b4:	3ff00000 	.word	0x3ff00000
 80087b8:	7fe00000 	.word	0x7fe00000
 80087bc:	7c9fffff 	.word	0x7c9fffff
 80087c0:	3fe00000 	.word	0x3fe00000
 80087c4:	bff00000 	.word	0xbff00000
 80087c8:	9b05      	ldr	r3, [sp, #20]
 80087ca:	b313      	cbz	r3, 8008812 <_strtod_l+0xb62>
 80087cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80087d2:	d81e      	bhi.n	8008812 <_strtod_l+0xb62>
 80087d4:	a326      	add	r3, pc, #152	; (adr r3, 8008870 <_strtod_l+0xbc0>)
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	4620      	mov	r0, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	f7f8 f8f7 	bl	80009d0 <__aeabi_dcmple>
 80087e2:	b190      	cbz	r0, 800880a <_strtod_l+0xb5a>
 80087e4:	4629      	mov	r1, r5
 80087e6:	4620      	mov	r0, r4
 80087e8:	f7f8 f94e 	bl	8000a88 <__aeabi_d2uiz>
 80087ec:	2801      	cmp	r0, #1
 80087ee:	bf38      	it	cc
 80087f0:	2001      	movcc	r0, #1
 80087f2:	f7f7 fdf7 	bl	80003e4 <__aeabi_ui2d>
 80087f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087f8:	4604      	mov	r4, r0
 80087fa:	460d      	mov	r5, r1
 80087fc:	b9d3      	cbnz	r3, 8008834 <_strtod_l+0xb84>
 80087fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008802:	9012      	str	r0, [sp, #72]	; 0x48
 8008804:	9313      	str	r3, [sp, #76]	; 0x4c
 8008806:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800880a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800880c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008810:	1a9f      	subs	r7, r3, r2
 8008812:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008816:	f001 fdc9 	bl	800a3ac <__ulp>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4630      	mov	r0, r6
 8008820:	4639      	mov	r1, r7
 8008822:	f7f7 fe59 	bl	80004d8 <__aeabi_dmul>
 8008826:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800882a:	f7f7 fc9f 	bl	800016c <__adddf3>
 800882e:	4680      	mov	r8, r0
 8008830:	4689      	mov	r9, r1
 8008832:	e77e      	b.n	8008732 <_strtod_l+0xa82>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800883c:	e7e3      	b.n	8008806 <_strtod_l+0xb56>
 800883e:	a30e      	add	r3, pc, #56	; (adr r3, 8008878 <_strtod_l+0xbc8>)
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	f7f8 f8ba 	bl	80009bc <__aeabi_dcmplt>
 8008848:	e7a1      	b.n	800878e <_strtod_l+0xade>
 800884a:	2300      	movs	r3, #0
 800884c:	930a      	str	r3, [sp, #40]	; 0x28
 800884e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008850:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008852:	6013      	str	r3, [r2, #0]
 8008854:	f7ff ba71 	b.w	8007d3a <_strtod_l+0x8a>
 8008858:	2a65      	cmp	r2, #101	; 0x65
 800885a:	f43f ab63 	beq.w	8007f24 <_strtod_l+0x274>
 800885e:	2a45      	cmp	r2, #69	; 0x45
 8008860:	f43f ab60 	beq.w	8007f24 <_strtod_l+0x274>
 8008864:	2301      	movs	r3, #1
 8008866:	f7ff bb95 	b.w	8007f94 <_strtod_l+0x2e4>
 800886a:	bf00      	nop
 800886c:	f3af 8000 	nop.w
 8008870:	ffc00000 	.word	0xffc00000
 8008874:	41dfffff 	.word	0x41dfffff
 8008878:	94a03595 	.word	0x94a03595
 800887c:	3fcfffff 	.word	0x3fcfffff

08008880 <strtod>:
 8008880:	460a      	mov	r2, r1
 8008882:	4601      	mov	r1, r0
 8008884:	4802      	ldr	r0, [pc, #8]	; (8008890 <strtod+0x10>)
 8008886:	4b03      	ldr	r3, [pc, #12]	; (8008894 <strtod+0x14>)
 8008888:	6800      	ldr	r0, [r0, #0]
 800888a:	f7ff ba11 	b.w	8007cb0 <_strtod_l>
 800888e:	bf00      	nop
 8008890:	20000014 	.word	0x20000014
 8008894:	2000007c 	.word	0x2000007c

08008898 <quorem>:
 8008898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889c:	6903      	ldr	r3, [r0, #16]
 800889e:	690c      	ldr	r4, [r1, #16]
 80088a0:	4607      	mov	r7, r0
 80088a2:	42a3      	cmp	r3, r4
 80088a4:	f2c0 8082 	blt.w	80089ac <quorem+0x114>
 80088a8:	3c01      	subs	r4, #1
 80088aa:	f100 0514 	add.w	r5, r0, #20
 80088ae:	f101 0814 	add.w	r8, r1, #20
 80088b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088c0:	3301      	adds	r3, #1
 80088c2:	429a      	cmp	r2, r3
 80088c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80088c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088d0:	d331      	bcc.n	8008936 <quorem+0x9e>
 80088d2:	f04f 0e00 	mov.w	lr, #0
 80088d6:	4640      	mov	r0, r8
 80088d8:	46ac      	mov	ip, r5
 80088da:	46f2      	mov	sl, lr
 80088dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80088e0:	b293      	uxth	r3, r2
 80088e2:	fb06 e303 	mla	r3, r6, r3, lr
 80088e6:	0c12      	lsrs	r2, r2, #16
 80088e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	fb06 e202 	mla	r2, r6, r2, lr
 80088f2:	ebaa 0303 	sub.w	r3, sl, r3
 80088f6:	f8dc a000 	ldr.w	sl, [ip]
 80088fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088fe:	fa1f fa8a 	uxth.w	sl, sl
 8008902:	4453      	add	r3, sl
 8008904:	f8dc a000 	ldr.w	sl, [ip]
 8008908:	b292      	uxth	r2, r2
 800890a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800890e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008912:	b29b      	uxth	r3, r3
 8008914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008918:	4581      	cmp	r9, r0
 800891a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800891e:	f84c 3b04 	str.w	r3, [ip], #4
 8008922:	d2db      	bcs.n	80088dc <quorem+0x44>
 8008924:	f855 300b 	ldr.w	r3, [r5, fp]
 8008928:	b92b      	cbnz	r3, 8008936 <quorem+0x9e>
 800892a:	9b01      	ldr	r3, [sp, #4]
 800892c:	3b04      	subs	r3, #4
 800892e:	429d      	cmp	r5, r3
 8008930:	461a      	mov	r2, r3
 8008932:	d32f      	bcc.n	8008994 <quorem+0xfc>
 8008934:	613c      	str	r4, [r7, #16]
 8008936:	4638      	mov	r0, r7
 8008938:	f001 fc90 	bl	800a25c <__mcmp>
 800893c:	2800      	cmp	r0, #0
 800893e:	db25      	blt.n	800898c <quorem+0xf4>
 8008940:	4628      	mov	r0, r5
 8008942:	f04f 0c00 	mov.w	ip, #0
 8008946:	3601      	adds	r6, #1
 8008948:	f858 1b04 	ldr.w	r1, [r8], #4
 800894c:	f8d0 e000 	ldr.w	lr, [r0]
 8008950:	b28b      	uxth	r3, r1
 8008952:	ebac 0303 	sub.w	r3, ip, r3
 8008956:	fa1f f28e 	uxth.w	r2, lr
 800895a:	4413      	add	r3, r2
 800895c:	0c0a      	lsrs	r2, r1, #16
 800895e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008962:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008966:	b29b      	uxth	r3, r3
 8008968:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800896c:	45c1      	cmp	r9, r8
 800896e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008972:	f840 3b04 	str.w	r3, [r0], #4
 8008976:	d2e7      	bcs.n	8008948 <quorem+0xb0>
 8008978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800897c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008980:	b922      	cbnz	r2, 800898c <quorem+0xf4>
 8008982:	3b04      	subs	r3, #4
 8008984:	429d      	cmp	r5, r3
 8008986:	461a      	mov	r2, r3
 8008988:	d30a      	bcc.n	80089a0 <quorem+0x108>
 800898a:	613c      	str	r4, [r7, #16]
 800898c:	4630      	mov	r0, r6
 800898e:	b003      	add	sp, #12
 8008990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008994:	6812      	ldr	r2, [r2, #0]
 8008996:	3b04      	subs	r3, #4
 8008998:	2a00      	cmp	r2, #0
 800899a:	d1cb      	bne.n	8008934 <quorem+0x9c>
 800899c:	3c01      	subs	r4, #1
 800899e:	e7c6      	b.n	800892e <quorem+0x96>
 80089a0:	6812      	ldr	r2, [r2, #0]
 80089a2:	3b04      	subs	r3, #4
 80089a4:	2a00      	cmp	r2, #0
 80089a6:	d1f0      	bne.n	800898a <quorem+0xf2>
 80089a8:	3c01      	subs	r4, #1
 80089aa:	e7eb      	b.n	8008984 <quorem+0xec>
 80089ac:	2000      	movs	r0, #0
 80089ae:	e7ee      	b.n	800898e <quorem+0xf6>

080089b0 <_dtoa_r>:
 80089b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	4616      	mov	r6, r2
 80089b6:	461f      	mov	r7, r3
 80089b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80089ba:	b099      	sub	sp, #100	; 0x64
 80089bc:	4605      	mov	r5, r0
 80089be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80089c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80089c6:	b974      	cbnz	r4, 80089e6 <_dtoa_r+0x36>
 80089c8:	2010      	movs	r0, #16
 80089ca:	f001 f949 	bl	8009c60 <malloc>
 80089ce:	4602      	mov	r2, r0
 80089d0:	6268      	str	r0, [r5, #36]	; 0x24
 80089d2:	b920      	cbnz	r0, 80089de <_dtoa_r+0x2e>
 80089d4:	21ea      	movs	r1, #234	; 0xea
 80089d6:	4ba8      	ldr	r3, [pc, #672]	; (8008c78 <_dtoa_r+0x2c8>)
 80089d8:	48a8      	ldr	r0, [pc, #672]	; (8008c7c <_dtoa_r+0x2cc>)
 80089da:	f002 f8b3 	bl	800ab44 <__assert_func>
 80089de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089e2:	6004      	str	r4, [r0, #0]
 80089e4:	60c4      	str	r4, [r0, #12]
 80089e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089e8:	6819      	ldr	r1, [r3, #0]
 80089ea:	b151      	cbz	r1, 8008a02 <_dtoa_r+0x52>
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	2301      	movs	r3, #1
 80089f0:	4093      	lsls	r3, r2
 80089f2:	604a      	str	r2, [r1, #4]
 80089f4:	608b      	str	r3, [r1, #8]
 80089f6:	4628      	mov	r0, r5
 80089f8:	f001 f9a8 	bl	8009d4c <_Bfree>
 80089fc:	2200      	movs	r2, #0
 80089fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	1e3b      	subs	r3, r7, #0
 8008a04:	bfaf      	iteee	ge
 8008a06:	2300      	movge	r3, #0
 8008a08:	2201      	movlt	r2, #1
 8008a0a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a0e:	9305      	strlt	r3, [sp, #20]
 8008a10:	bfa8      	it	ge
 8008a12:	f8c8 3000 	strge.w	r3, [r8]
 8008a16:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008a1a:	4b99      	ldr	r3, [pc, #612]	; (8008c80 <_dtoa_r+0x2d0>)
 8008a1c:	bfb8      	it	lt
 8008a1e:	f8c8 2000 	strlt.w	r2, [r8]
 8008a22:	ea33 0309 	bics.w	r3, r3, r9
 8008a26:	d119      	bne.n	8008a5c <_dtoa_r+0xac>
 8008a28:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a2e:	6013      	str	r3, [r2, #0]
 8008a30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a34:	4333      	orrs	r3, r6
 8008a36:	f000 857f 	beq.w	8009538 <_dtoa_r+0xb88>
 8008a3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a3c:	b953      	cbnz	r3, 8008a54 <_dtoa_r+0xa4>
 8008a3e:	4b91      	ldr	r3, [pc, #580]	; (8008c84 <_dtoa_r+0x2d4>)
 8008a40:	e022      	b.n	8008a88 <_dtoa_r+0xd8>
 8008a42:	4b91      	ldr	r3, [pc, #580]	; (8008c88 <_dtoa_r+0x2d8>)
 8008a44:	9303      	str	r3, [sp, #12]
 8008a46:	3308      	adds	r3, #8
 8008a48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	9803      	ldr	r0, [sp, #12]
 8008a4e:	b019      	add	sp, #100	; 0x64
 8008a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a54:	4b8b      	ldr	r3, [pc, #556]	; (8008c84 <_dtoa_r+0x2d4>)
 8008a56:	9303      	str	r3, [sp, #12]
 8008a58:	3303      	adds	r3, #3
 8008a5a:	e7f5      	b.n	8008a48 <_dtoa_r+0x98>
 8008a5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008a60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008a64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f7f7 ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8008a70:	4680      	mov	r8, r0
 8008a72:	b158      	cbz	r0, 8008a8c <_dtoa_r+0xdc>
 8008a74:	2301      	movs	r3, #1
 8008a76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 8558 	beq.w	8009532 <_dtoa_r+0xb82>
 8008a82:	4882      	ldr	r0, [pc, #520]	; (8008c8c <_dtoa_r+0x2dc>)
 8008a84:	6018      	str	r0, [r3, #0]
 8008a86:	1e43      	subs	r3, r0, #1
 8008a88:	9303      	str	r3, [sp, #12]
 8008a8a:	e7df      	b.n	8008a4c <_dtoa_r+0x9c>
 8008a8c:	ab16      	add	r3, sp, #88	; 0x58
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	ab17      	add	r3, sp, #92	; 0x5c
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	4628      	mov	r0, r5
 8008a96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a9a:	f001 fd01 	bl	800a4a0 <__d2b>
 8008a9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008aa2:	4683      	mov	fp, r0
 8008aa4:	2c00      	cmp	r4, #0
 8008aa6:	d07f      	beq.n	8008ba8 <_dtoa_r+0x1f8>
 8008aa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008ab2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ab6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008aba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008abe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	4b72      	ldr	r3, [pc, #456]	; (8008c90 <_dtoa_r+0x2e0>)
 8008ac6:	f7f7 fb4f 	bl	8000168 <__aeabi_dsub>
 8008aca:	a365      	add	r3, pc, #404	; (adr r3, 8008c60 <_dtoa_r+0x2b0>)
 8008acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad0:	f7f7 fd02 	bl	80004d8 <__aeabi_dmul>
 8008ad4:	a364      	add	r3, pc, #400	; (adr r3, 8008c68 <_dtoa_r+0x2b8>)
 8008ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ada:	f7f7 fb47 	bl	800016c <__adddf3>
 8008ade:	4606      	mov	r6, r0
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	460f      	mov	r7, r1
 8008ae4:	f7f7 fc8e 	bl	8000404 <__aeabi_i2d>
 8008ae8:	a361      	add	r3, pc, #388	; (adr r3, 8008c70 <_dtoa_r+0x2c0>)
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	f7f7 fcf3 	bl	80004d8 <__aeabi_dmul>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4630      	mov	r0, r6
 8008af8:	4639      	mov	r1, r7
 8008afa:	f7f7 fb37 	bl	800016c <__adddf3>
 8008afe:	4606      	mov	r6, r0
 8008b00:	460f      	mov	r7, r1
 8008b02:	f7f7 ff99 	bl	8000a38 <__aeabi_d2iz>
 8008b06:	2200      	movs	r2, #0
 8008b08:	4682      	mov	sl, r0
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	4639      	mov	r1, r7
 8008b10:	f7f7 ff54 	bl	80009bc <__aeabi_dcmplt>
 8008b14:	b148      	cbz	r0, 8008b2a <_dtoa_r+0x17a>
 8008b16:	4650      	mov	r0, sl
 8008b18:	f7f7 fc74 	bl	8000404 <__aeabi_i2d>
 8008b1c:	4632      	mov	r2, r6
 8008b1e:	463b      	mov	r3, r7
 8008b20:	f7f7 ff42 	bl	80009a8 <__aeabi_dcmpeq>
 8008b24:	b908      	cbnz	r0, 8008b2a <_dtoa_r+0x17a>
 8008b26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b2a:	f1ba 0f16 	cmp.w	sl, #22
 8008b2e:	d858      	bhi.n	8008be2 <_dtoa_r+0x232>
 8008b30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b34:	4b57      	ldr	r3, [pc, #348]	; (8008c94 <_dtoa_r+0x2e4>)
 8008b36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	f7f7 ff3d 	bl	80009bc <__aeabi_dcmplt>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d04f      	beq.n	8008be6 <_dtoa_r+0x236>
 8008b46:	2300      	movs	r3, #0
 8008b48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b50:	1b1c      	subs	r4, r3, r4
 8008b52:	1e63      	subs	r3, r4, #1
 8008b54:	9309      	str	r3, [sp, #36]	; 0x24
 8008b56:	bf49      	itett	mi
 8008b58:	f1c4 0301 	rsbmi	r3, r4, #1
 8008b5c:	2300      	movpl	r3, #0
 8008b5e:	9306      	strmi	r3, [sp, #24]
 8008b60:	2300      	movmi	r3, #0
 8008b62:	bf54      	ite	pl
 8008b64:	9306      	strpl	r3, [sp, #24]
 8008b66:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008b68:	f1ba 0f00 	cmp.w	sl, #0
 8008b6c:	db3d      	blt.n	8008bea <_dtoa_r+0x23a>
 8008b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b70:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008b74:	4453      	add	r3, sl
 8008b76:	9309      	str	r3, [sp, #36]	; 0x24
 8008b78:	2300      	movs	r3, #0
 8008b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b7e:	2b09      	cmp	r3, #9
 8008b80:	f200 808c 	bhi.w	8008c9c <_dtoa_r+0x2ec>
 8008b84:	2b05      	cmp	r3, #5
 8008b86:	bfc4      	itt	gt
 8008b88:	3b04      	subgt	r3, #4
 8008b8a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008b8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b8e:	bfc8      	it	gt
 8008b90:	2400      	movgt	r4, #0
 8008b92:	f1a3 0302 	sub.w	r3, r3, #2
 8008b96:	bfd8      	it	le
 8008b98:	2401      	movle	r4, #1
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	f200 808a 	bhi.w	8008cb4 <_dtoa_r+0x304>
 8008ba0:	e8df f003 	tbb	[pc, r3]
 8008ba4:	5b4d4f2d 	.word	0x5b4d4f2d
 8008ba8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008bac:	441c      	add	r4, r3
 8008bae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008bb2:	2b20      	cmp	r3, #32
 8008bb4:	bfc3      	ittte	gt
 8008bb6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008bba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008bbe:	fa09 f303 	lslgt.w	r3, r9, r3
 8008bc2:	f1c3 0320 	rsble	r3, r3, #32
 8008bc6:	bfc6      	itte	gt
 8008bc8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008bcc:	4318      	orrgt	r0, r3
 8008bce:	fa06 f003 	lslle.w	r0, r6, r3
 8008bd2:	f7f7 fc07 	bl	80003e4 <__aeabi_ui2d>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008bdc:	3c01      	subs	r4, #1
 8008bde:	9313      	str	r3, [sp, #76]	; 0x4c
 8008be0:	e76f      	b.n	8008ac2 <_dtoa_r+0x112>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e7b2      	b.n	8008b4c <_dtoa_r+0x19c>
 8008be6:	900f      	str	r0, [sp, #60]	; 0x3c
 8008be8:	e7b1      	b.n	8008b4e <_dtoa_r+0x19e>
 8008bea:	9b06      	ldr	r3, [sp, #24]
 8008bec:	eba3 030a 	sub.w	r3, r3, sl
 8008bf0:	9306      	str	r3, [sp, #24]
 8008bf2:	f1ca 0300 	rsb	r3, sl, #0
 8008bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	930e      	str	r3, [sp, #56]	; 0x38
 8008bfc:	e7be      	b.n	8008b7c <_dtoa_r+0x1cc>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	dc58      	bgt.n	8008cba <_dtoa_r+0x30a>
 8008c08:	f04f 0901 	mov.w	r9, #1
 8008c0c:	464b      	mov	r3, r9
 8008c0e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008c12:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008c16:	2200      	movs	r2, #0
 8008c18:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008c1a:	6042      	str	r2, [r0, #4]
 8008c1c:	2204      	movs	r2, #4
 8008c1e:	f102 0614 	add.w	r6, r2, #20
 8008c22:	429e      	cmp	r6, r3
 8008c24:	6841      	ldr	r1, [r0, #4]
 8008c26:	d94e      	bls.n	8008cc6 <_dtoa_r+0x316>
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f001 f84f 	bl	8009ccc <_Balloc>
 8008c2e:	9003      	str	r0, [sp, #12]
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d14c      	bne.n	8008cce <_dtoa_r+0x31e>
 8008c34:	4602      	mov	r2, r0
 8008c36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c3a:	4b17      	ldr	r3, [pc, #92]	; (8008c98 <_dtoa_r+0x2e8>)
 8008c3c:	e6cc      	b.n	80089d8 <_dtoa_r+0x28>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e7de      	b.n	8008c00 <_dtoa_r+0x250>
 8008c42:	2300      	movs	r3, #0
 8008c44:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c48:	eb0a 0903 	add.w	r9, sl, r3
 8008c4c:	f109 0301 	add.w	r3, r9, #1
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	9308      	str	r3, [sp, #32]
 8008c54:	bfb8      	it	lt
 8008c56:	2301      	movlt	r3, #1
 8008c58:	e7dd      	b.n	8008c16 <_dtoa_r+0x266>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e7f2      	b.n	8008c44 <_dtoa_r+0x294>
 8008c5e:	bf00      	nop
 8008c60:	636f4361 	.word	0x636f4361
 8008c64:	3fd287a7 	.word	0x3fd287a7
 8008c68:	8b60c8b3 	.word	0x8b60c8b3
 8008c6c:	3fc68a28 	.word	0x3fc68a28
 8008c70:	509f79fb 	.word	0x509f79fb
 8008c74:	3fd34413 	.word	0x3fd34413
 8008c78:	0800c0d5 	.word	0x0800c0d5
 8008c7c:	0800c0ec 	.word	0x0800c0ec
 8008c80:	7ff00000 	.word	0x7ff00000
 8008c84:	0800c0d1 	.word	0x0800c0d1
 8008c88:	0800c0c8 	.word	0x0800c0c8
 8008c8c:	0800c055 	.word	0x0800c055
 8008c90:	3ff80000 	.word	0x3ff80000
 8008c94:	0800c258 	.word	0x0800c258
 8008c98:	0800c147 	.word	0x0800c147
 8008c9c:	2401      	movs	r4, #1
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	940b      	str	r4, [sp, #44]	; 0x2c
 8008ca2:	9322      	str	r3, [sp, #136]	; 0x88
 8008ca4:	f04f 39ff 	mov.w	r9, #4294967295
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2312      	movs	r3, #18
 8008cac:	f8cd 9020 	str.w	r9, [sp, #32]
 8008cb0:	9223      	str	r2, [sp, #140]	; 0x8c
 8008cb2:	e7b0      	b.n	8008c16 <_dtoa_r+0x266>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cb8:	e7f4      	b.n	8008ca4 <_dtoa_r+0x2f4>
 8008cba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008cbe:	464b      	mov	r3, r9
 8008cc0:	f8cd 9020 	str.w	r9, [sp, #32]
 8008cc4:	e7a7      	b.n	8008c16 <_dtoa_r+0x266>
 8008cc6:	3101      	adds	r1, #1
 8008cc8:	6041      	str	r1, [r0, #4]
 8008cca:	0052      	lsls	r2, r2, #1
 8008ccc:	e7a7      	b.n	8008c1e <_dtoa_r+0x26e>
 8008cce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008cd0:	9a03      	ldr	r2, [sp, #12]
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	9b08      	ldr	r3, [sp, #32]
 8008cd6:	2b0e      	cmp	r3, #14
 8008cd8:	f200 80a8 	bhi.w	8008e2c <_dtoa_r+0x47c>
 8008cdc:	2c00      	cmp	r4, #0
 8008cde:	f000 80a5 	beq.w	8008e2c <_dtoa_r+0x47c>
 8008ce2:	f1ba 0f00 	cmp.w	sl, #0
 8008ce6:	dd34      	ble.n	8008d52 <_dtoa_r+0x3a2>
 8008ce8:	4a9a      	ldr	r2, [pc, #616]	; (8008f54 <_dtoa_r+0x5a4>)
 8008cea:	f00a 030f 	and.w	r3, sl, #15
 8008cee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008cf2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008cf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cfa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008cfe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008d02:	d016      	beq.n	8008d32 <_dtoa_r+0x382>
 8008d04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d08:	4b93      	ldr	r3, [pc, #588]	; (8008f58 <_dtoa_r+0x5a8>)
 8008d0a:	2703      	movs	r7, #3
 8008d0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d10:	f7f7 fd0c 	bl	800072c <__aeabi_ddiv>
 8008d14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d18:	f004 040f 	and.w	r4, r4, #15
 8008d1c:	4e8e      	ldr	r6, [pc, #568]	; (8008f58 <_dtoa_r+0x5a8>)
 8008d1e:	b954      	cbnz	r4, 8008d36 <_dtoa_r+0x386>
 8008d20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d28:	f7f7 fd00 	bl	800072c <__aeabi_ddiv>
 8008d2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d30:	e029      	b.n	8008d86 <_dtoa_r+0x3d6>
 8008d32:	2702      	movs	r7, #2
 8008d34:	e7f2      	b.n	8008d1c <_dtoa_r+0x36c>
 8008d36:	07e1      	lsls	r1, r4, #31
 8008d38:	d508      	bpl.n	8008d4c <_dtoa_r+0x39c>
 8008d3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d42:	f7f7 fbc9 	bl	80004d8 <__aeabi_dmul>
 8008d46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d4a:	3701      	adds	r7, #1
 8008d4c:	1064      	asrs	r4, r4, #1
 8008d4e:	3608      	adds	r6, #8
 8008d50:	e7e5      	b.n	8008d1e <_dtoa_r+0x36e>
 8008d52:	f000 80a5 	beq.w	8008ea0 <_dtoa_r+0x4f0>
 8008d56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d5a:	f1ca 0400 	rsb	r4, sl, #0
 8008d5e:	4b7d      	ldr	r3, [pc, #500]	; (8008f54 <_dtoa_r+0x5a4>)
 8008d60:	f004 020f 	and.w	r2, r4, #15
 8008d64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	f7f7 fbb4 	bl	80004d8 <__aeabi_dmul>
 8008d70:	2702      	movs	r7, #2
 8008d72:	2300      	movs	r3, #0
 8008d74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d78:	4e77      	ldr	r6, [pc, #476]	; (8008f58 <_dtoa_r+0x5a8>)
 8008d7a:	1124      	asrs	r4, r4, #4
 8008d7c:	2c00      	cmp	r4, #0
 8008d7e:	f040 8084 	bne.w	8008e8a <_dtoa_r+0x4da>
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1d2      	bne.n	8008d2c <_dtoa_r+0x37c>
 8008d86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 808b 	beq.w	8008ea4 <_dtoa_r+0x4f4>
 8008d8e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008d92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008d96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	4b6f      	ldr	r3, [pc, #444]	; (8008f5c <_dtoa_r+0x5ac>)
 8008d9e:	f7f7 fe0d 	bl	80009bc <__aeabi_dcmplt>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d07e      	beq.n	8008ea4 <_dtoa_r+0x4f4>
 8008da6:	9b08      	ldr	r3, [sp, #32]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d07b      	beq.n	8008ea4 <_dtoa_r+0x4f4>
 8008dac:	f1b9 0f00 	cmp.w	r9, #0
 8008db0:	dd38      	ble.n	8008e24 <_dtoa_r+0x474>
 8008db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008db6:	2200      	movs	r2, #0
 8008db8:	4b69      	ldr	r3, [pc, #420]	; (8008f60 <_dtoa_r+0x5b0>)
 8008dba:	f7f7 fb8d 	bl	80004d8 <__aeabi_dmul>
 8008dbe:	464c      	mov	r4, r9
 8008dc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dc4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008dc8:	3701      	adds	r7, #1
 8008dca:	4638      	mov	r0, r7
 8008dcc:	f7f7 fb1a 	bl	8000404 <__aeabi_i2d>
 8008dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dd4:	f7f7 fb80 	bl	80004d8 <__aeabi_dmul>
 8008dd8:	2200      	movs	r2, #0
 8008dda:	4b62      	ldr	r3, [pc, #392]	; (8008f64 <_dtoa_r+0x5b4>)
 8008ddc:	f7f7 f9c6 	bl	800016c <__adddf3>
 8008de0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008de4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008de8:	9611      	str	r6, [sp, #68]	; 0x44
 8008dea:	2c00      	cmp	r4, #0
 8008dec:	d15d      	bne.n	8008eaa <_dtoa_r+0x4fa>
 8008dee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008df2:	2200      	movs	r2, #0
 8008df4:	4b5c      	ldr	r3, [pc, #368]	; (8008f68 <_dtoa_r+0x5b8>)
 8008df6:	f7f7 f9b7 	bl	8000168 <__aeabi_dsub>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e02:	4633      	mov	r3, r6
 8008e04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e06:	f7f7 fdf7 	bl	80009f8 <__aeabi_dcmpgt>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	f040 829c 	bne.w	8009348 <_dtoa_r+0x998>
 8008e10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e16:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008e1a:	f7f7 fdcf 	bl	80009bc <__aeabi_dcmplt>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	f040 8290 	bne.w	8009344 <_dtoa_r+0x994>
 8008e24:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008e28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008e2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f2c0 8152 	blt.w	80090d8 <_dtoa_r+0x728>
 8008e34:	f1ba 0f0e 	cmp.w	sl, #14
 8008e38:	f300 814e 	bgt.w	80090d8 <_dtoa_r+0x728>
 8008e3c:	4b45      	ldr	r3, [pc, #276]	; (8008f54 <_dtoa_r+0x5a4>)
 8008e3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e46:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008e4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f280 80db 	bge.w	8009008 <_dtoa_r+0x658>
 8008e52:	9b08      	ldr	r3, [sp, #32]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f300 80d7 	bgt.w	8009008 <_dtoa_r+0x658>
 8008e5a:	f040 8272 	bne.w	8009342 <_dtoa_r+0x992>
 8008e5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e62:	2200      	movs	r2, #0
 8008e64:	4b40      	ldr	r3, [pc, #256]	; (8008f68 <_dtoa_r+0x5b8>)
 8008e66:	f7f7 fb37 	bl	80004d8 <__aeabi_dmul>
 8008e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e6e:	f7f7 fdb9 	bl	80009e4 <__aeabi_dcmpge>
 8008e72:	9c08      	ldr	r4, [sp, #32]
 8008e74:	4626      	mov	r6, r4
 8008e76:	2800      	cmp	r0, #0
 8008e78:	f040 8248 	bne.w	800930c <_dtoa_r+0x95c>
 8008e7c:	2331      	movs	r3, #49	; 0x31
 8008e7e:	9f03      	ldr	r7, [sp, #12]
 8008e80:	f10a 0a01 	add.w	sl, sl, #1
 8008e84:	f807 3b01 	strb.w	r3, [r7], #1
 8008e88:	e244      	b.n	8009314 <_dtoa_r+0x964>
 8008e8a:	07e2      	lsls	r2, r4, #31
 8008e8c:	d505      	bpl.n	8008e9a <_dtoa_r+0x4ea>
 8008e8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e92:	f7f7 fb21 	bl	80004d8 <__aeabi_dmul>
 8008e96:	2301      	movs	r3, #1
 8008e98:	3701      	adds	r7, #1
 8008e9a:	1064      	asrs	r4, r4, #1
 8008e9c:	3608      	adds	r6, #8
 8008e9e:	e76d      	b.n	8008d7c <_dtoa_r+0x3cc>
 8008ea0:	2702      	movs	r7, #2
 8008ea2:	e770      	b.n	8008d86 <_dtoa_r+0x3d6>
 8008ea4:	46d0      	mov	r8, sl
 8008ea6:	9c08      	ldr	r4, [sp, #32]
 8008ea8:	e78f      	b.n	8008dca <_dtoa_r+0x41a>
 8008eaa:	9903      	ldr	r1, [sp, #12]
 8008eac:	4b29      	ldr	r3, [pc, #164]	; (8008f54 <_dtoa_r+0x5a4>)
 8008eae:	4421      	add	r1, r4
 8008eb0:	9112      	str	r1, [sp, #72]	; 0x48
 8008eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008eb8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008ebc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ec0:	2900      	cmp	r1, #0
 8008ec2:	d055      	beq.n	8008f70 <_dtoa_r+0x5c0>
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	4929      	ldr	r1, [pc, #164]	; (8008f6c <_dtoa_r+0x5bc>)
 8008ec8:	f7f7 fc30 	bl	800072c <__aeabi_ddiv>
 8008ecc:	463b      	mov	r3, r7
 8008ece:	4632      	mov	r2, r6
 8008ed0:	f7f7 f94a 	bl	8000168 <__aeabi_dsub>
 8008ed4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ed8:	9f03      	ldr	r7, [sp, #12]
 8008eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ede:	f7f7 fdab 	bl	8000a38 <__aeabi_d2iz>
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	f7f7 fa8e 	bl	8000404 <__aeabi_i2d>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	460b      	mov	r3, r1
 8008eec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ef0:	f7f7 f93a 	bl	8000168 <__aeabi_dsub>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	3430      	adds	r4, #48	; 0x30
 8008efa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008efe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f02:	f807 4b01 	strb.w	r4, [r7], #1
 8008f06:	f7f7 fd59 	bl	80009bc <__aeabi_dcmplt>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d174      	bne.n	8008ff8 <_dtoa_r+0x648>
 8008f0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f12:	2000      	movs	r0, #0
 8008f14:	4911      	ldr	r1, [pc, #68]	; (8008f5c <_dtoa_r+0x5ac>)
 8008f16:	f7f7 f927 	bl	8000168 <__aeabi_dsub>
 8008f1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f1e:	f7f7 fd4d 	bl	80009bc <__aeabi_dcmplt>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f040 80b7 	bne.w	8009096 <_dtoa_r+0x6e6>
 8008f28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f2a:	429f      	cmp	r7, r3
 8008f2c:	f43f af7a 	beq.w	8008e24 <_dtoa_r+0x474>
 8008f30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f34:	2200      	movs	r2, #0
 8008f36:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <_dtoa_r+0x5b0>)
 8008f38:	f7f7 face 	bl	80004d8 <__aeabi_dmul>
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f46:	4b06      	ldr	r3, [pc, #24]	; (8008f60 <_dtoa_r+0x5b0>)
 8008f48:	f7f7 fac6 	bl	80004d8 <__aeabi_dmul>
 8008f4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f50:	e7c3      	b.n	8008eda <_dtoa_r+0x52a>
 8008f52:	bf00      	nop
 8008f54:	0800c258 	.word	0x0800c258
 8008f58:	0800c230 	.word	0x0800c230
 8008f5c:	3ff00000 	.word	0x3ff00000
 8008f60:	40240000 	.word	0x40240000
 8008f64:	401c0000 	.word	0x401c0000
 8008f68:	40140000 	.word	0x40140000
 8008f6c:	3fe00000 	.word	0x3fe00000
 8008f70:	4630      	mov	r0, r6
 8008f72:	4639      	mov	r1, r7
 8008f74:	f7f7 fab0 	bl	80004d8 <__aeabi_dmul>
 8008f78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f7e:	9c03      	ldr	r4, [sp, #12]
 8008f80:	9314      	str	r3, [sp, #80]	; 0x50
 8008f82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f86:	f7f7 fd57 	bl	8000a38 <__aeabi_d2iz>
 8008f8a:	9015      	str	r0, [sp, #84]	; 0x54
 8008f8c:	f7f7 fa3a 	bl	8000404 <__aeabi_i2d>
 8008f90:	4602      	mov	r2, r0
 8008f92:	460b      	mov	r3, r1
 8008f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f98:	f7f7 f8e6 	bl	8000168 <__aeabi_dsub>
 8008f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	3330      	adds	r3, #48	; 0x30
 8008fa2:	f804 3b01 	strb.w	r3, [r4], #1
 8008fa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fa8:	460f      	mov	r7, r1
 8008faa:	429c      	cmp	r4, r3
 8008fac:	f04f 0200 	mov.w	r2, #0
 8008fb0:	d124      	bne.n	8008ffc <_dtoa_r+0x64c>
 8008fb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fb6:	4bb0      	ldr	r3, [pc, #704]	; (8009278 <_dtoa_r+0x8c8>)
 8008fb8:	f7f7 f8d8 	bl	800016c <__adddf3>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	4639      	mov	r1, r7
 8008fc4:	f7f7 fd18 	bl	80009f8 <__aeabi_dcmpgt>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d163      	bne.n	8009094 <_dtoa_r+0x6e4>
 8008fcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	49a9      	ldr	r1, [pc, #676]	; (8009278 <_dtoa_r+0x8c8>)
 8008fd4:	f7f7 f8c8 	bl	8000168 <__aeabi_dsub>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4630      	mov	r0, r6
 8008fde:	4639      	mov	r1, r7
 8008fe0:	f7f7 fcec 	bl	80009bc <__aeabi_dcmplt>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	f43f af1d 	beq.w	8008e24 <_dtoa_r+0x474>
 8008fea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008fec:	1e7b      	subs	r3, r7, #1
 8008fee:	9314      	str	r3, [sp, #80]	; 0x50
 8008ff0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008ff4:	2b30      	cmp	r3, #48	; 0x30
 8008ff6:	d0f8      	beq.n	8008fea <_dtoa_r+0x63a>
 8008ff8:	46c2      	mov	sl, r8
 8008ffa:	e03b      	b.n	8009074 <_dtoa_r+0x6c4>
 8008ffc:	4b9f      	ldr	r3, [pc, #636]	; (800927c <_dtoa_r+0x8cc>)
 8008ffe:	f7f7 fa6b 	bl	80004d8 <__aeabi_dmul>
 8009002:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009006:	e7bc      	b.n	8008f82 <_dtoa_r+0x5d2>
 8009008:	9f03      	ldr	r7, [sp, #12]
 800900a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800900e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009012:	4640      	mov	r0, r8
 8009014:	4649      	mov	r1, r9
 8009016:	f7f7 fb89 	bl	800072c <__aeabi_ddiv>
 800901a:	f7f7 fd0d 	bl	8000a38 <__aeabi_d2iz>
 800901e:	4604      	mov	r4, r0
 8009020:	f7f7 f9f0 	bl	8000404 <__aeabi_i2d>
 8009024:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009028:	f7f7 fa56 	bl	80004d8 <__aeabi_dmul>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	4640      	mov	r0, r8
 8009032:	4649      	mov	r1, r9
 8009034:	f7f7 f898 	bl	8000168 <__aeabi_dsub>
 8009038:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800903c:	f807 6b01 	strb.w	r6, [r7], #1
 8009040:	9e03      	ldr	r6, [sp, #12]
 8009042:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009046:	1bbe      	subs	r6, r7, r6
 8009048:	45b4      	cmp	ip, r6
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	d136      	bne.n	80090be <_dtoa_r+0x70e>
 8009050:	f7f7 f88c 	bl	800016c <__adddf3>
 8009054:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009058:	4680      	mov	r8, r0
 800905a:	4689      	mov	r9, r1
 800905c:	f7f7 fccc 	bl	80009f8 <__aeabi_dcmpgt>
 8009060:	bb58      	cbnz	r0, 80090ba <_dtoa_r+0x70a>
 8009062:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009066:	4640      	mov	r0, r8
 8009068:	4649      	mov	r1, r9
 800906a:	f7f7 fc9d 	bl	80009a8 <__aeabi_dcmpeq>
 800906e:	b108      	cbz	r0, 8009074 <_dtoa_r+0x6c4>
 8009070:	07e1      	lsls	r1, r4, #31
 8009072:	d422      	bmi.n	80090ba <_dtoa_r+0x70a>
 8009074:	4628      	mov	r0, r5
 8009076:	4659      	mov	r1, fp
 8009078:	f000 fe68 	bl	8009d4c <_Bfree>
 800907c:	2300      	movs	r3, #0
 800907e:	703b      	strb	r3, [r7, #0]
 8009080:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009082:	f10a 0001 	add.w	r0, sl, #1
 8009086:	6018      	str	r0, [r3, #0]
 8009088:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800908a:	2b00      	cmp	r3, #0
 800908c:	f43f acde 	beq.w	8008a4c <_dtoa_r+0x9c>
 8009090:	601f      	str	r7, [r3, #0]
 8009092:	e4db      	b.n	8008a4c <_dtoa_r+0x9c>
 8009094:	4627      	mov	r7, r4
 8009096:	463b      	mov	r3, r7
 8009098:	461f      	mov	r7, r3
 800909a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800909e:	2a39      	cmp	r2, #57	; 0x39
 80090a0:	d107      	bne.n	80090b2 <_dtoa_r+0x702>
 80090a2:	9a03      	ldr	r2, [sp, #12]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d1f7      	bne.n	8009098 <_dtoa_r+0x6e8>
 80090a8:	2230      	movs	r2, #48	; 0x30
 80090aa:	9903      	ldr	r1, [sp, #12]
 80090ac:	f108 0801 	add.w	r8, r8, #1
 80090b0:	700a      	strb	r2, [r1, #0]
 80090b2:	781a      	ldrb	r2, [r3, #0]
 80090b4:	3201      	adds	r2, #1
 80090b6:	701a      	strb	r2, [r3, #0]
 80090b8:	e79e      	b.n	8008ff8 <_dtoa_r+0x648>
 80090ba:	46d0      	mov	r8, sl
 80090bc:	e7eb      	b.n	8009096 <_dtoa_r+0x6e6>
 80090be:	2200      	movs	r2, #0
 80090c0:	4b6e      	ldr	r3, [pc, #440]	; (800927c <_dtoa_r+0x8cc>)
 80090c2:	f7f7 fa09 	bl	80004d8 <__aeabi_dmul>
 80090c6:	2200      	movs	r2, #0
 80090c8:	2300      	movs	r3, #0
 80090ca:	4680      	mov	r8, r0
 80090cc:	4689      	mov	r9, r1
 80090ce:	f7f7 fc6b 	bl	80009a8 <__aeabi_dcmpeq>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d09b      	beq.n	800900e <_dtoa_r+0x65e>
 80090d6:	e7cd      	b.n	8009074 <_dtoa_r+0x6c4>
 80090d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090da:	2a00      	cmp	r2, #0
 80090dc:	f000 80d0 	beq.w	8009280 <_dtoa_r+0x8d0>
 80090e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80090e2:	2a01      	cmp	r2, #1
 80090e4:	f300 80ae 	bgt.w	8009244 <_dtoa_r+0x894>
 80090e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090ea:	2a00      	cmp	r2, #0
 80090ec:	f000 80a6 	beq.w	800923c <_dtoa_r+0x88c>
 80090f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80090f6:	9f06      	ldr	r7, [sp, #24]
 80090f8:	9a06      	ldr	r2, [sp, #24]
 80090fa:	2101      	movs	r1, #1
 80090fc:	441a      	add	r2, r3
 80090fe:	9206      	str	r2, [sp, #24]
 8009100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009102:	4628      	mov	r0, r5
 8009104:	441a      	add	r2, r3
 8009106:	9209      	str	r2, [sp, #36]	; 0x24
 8009108:	f000 ff20 	bl	8009f4c <__i2b>
 800910c:	4606      	mov	r6, r0
 800910e:	2f00      	cmp	r7, #0
 8009110:	dd0c      	ble.n	800912c <_dtoa_r+0x77c>
 8009112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009114:	2b00      	cmp	r3, #0
 8009116:	dd09      	ble.n	800912c <_dtoa_r+0x77c>
 8009118:	42bb      	cmp	r3, r7
 800911a:	bfa8      	it	ge
 800911c:	463b      	movge	r3, r7
 800911e:	9a06      	ldr	r2, [sp, #24]
 8009120:	1aff      	subs	r7, r7, r3
 8009122:	1ad2      	subs	r2, r2, r3
 8009124:	9206      	str	r2, [sp, #24]
 8009126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	9309      	str	r3, [sp, #36]	; 0x24
 800912c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800912e:	b1f3      	cbz	r3, 800916e <_dtoa_r+0x7be>
 8009130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 80a8 	beq.w	8009288 <_dtoa_r+0x8d8>
 8009138:	2c00      	cmp	r4, #0
 800913a:	dd10      	ble.n	800915e <_dtoa_r+0x7ae>
 800913c:	4631      	mov	r1, r6
 800913e:	4622      	mov	r2, r4
 8009140:	4628      	mov	r0, r5
 8009142:	f000 ffc1 	bl	800a0c8 <__pow5mult>
 8009146:	465a      	mov	r2, fp
 8009148:	4601      	mov	r1, r0
 800914a:	4606      	mov	r6, r0
 800914c:	4628      	mov	r0, r5
 800914e:	f000 ff13 	bl	8009f78 <__multiply>
 8009152:	4680      	mov	r8, r0
 8009154:	4659      	mov	r1, fp
 8009156:	4628      	mov	r0, r5
 8009158:	f000 fdf8 	bl	8009d4c <_Bfree>
 800915c:	46c3      	mov	fp, r8
 800915e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009160:	1b1a      	subs	r2, r3, r4
 8009162:	d004      	beq.n	800916e <_dtoa_r+0x7be>
 8009164:	4659      	mov	r1, fp
 8009166:	4628      	mov	r0, r5
 8009168:	f000 ffae 	bl	800a0c8 <__pow5mult>
 800916c:	4683      	mov	fp, r0
 800916e:	2101      	movs	r1, #1
 8009170:	4628      	mov	r0, r5
 8009172:	f000 feeb 	bl	8009f4c <__i2b>
 8009176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009178:	4604      	mov	r4, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	f340 8086 	ble.w	800928c <_dtoa_r+0x8dc>
 8009180:	461a      	mov	r2, r3
 8009182:	4601      	mov	r1, r0
 8009184:	4628      	mov	r0, r5
 8009186:	f000 ff9f 	bl	800a0c8 <__pow5mult>
 800918a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800918c:	4604      	mov	r4, r0
 800918e:	2b01      	cmp	r3, #1
 8009190:	dd7f      	ble.n	8009292 <_dtoa_r+0x8e2>
 8009192:	f04f 0800 	mov.w	r8, #0
 8009196:	6923      	ldr	r3, [r4, #16]
 8009198:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800919c:	6918      	ldr	r0, [r3, #16]
 800919e:	f000 fe87 	bl	8009eb0 <__hi0bits>
 80091a2:	f1c0 0020 	rsb	r0, r0, #32
 80091a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a8:	4418      	add	r0, r3
 80091aa:	f010 001f 	ands.w	r0, r0, #31
 80091ae:	f000 8092 	beq.w	80092d6 <_dtoa_r+0x926>
 80091b2:	f1c0 0320 	rsb	r3, r0, #32
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	f340 808a 	ble.w	80092d0 <_dtoa_r+0x920>
 80091bc:	f1c0 001c 	rsb	r0, r0, #28
 80091c0:	9b06      	ldr	r3, [sp, #24]
 80091c2:	4407      	add	r7, r0
 80091c4:	4403      	add	r3, r0
 80091c6:	9306      	str	r3, [sp, #24]
 80091c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ca:	4403      	add	r3, r0
 80091cc:	9309      	str	r3, [sp, #36]	; 0x24
 80091ce:	9b06      	ldr	r3, [sp, #24]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	dd05      	ble.n	80091e0 <_dtoa_r+0x830>
 80091d4:	4659      	mov	r1, fp
 80091d6:	461a      	mov	r2, r3
 80091d8:	4628      	mov	r0, r5
 80091da:	f000 ffcf 	bl	800a17c <__lshift>
 80091de:	4683      	mov	fp, r0
 80091e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	dd05      	ble.n	80091f2 <_dtoa_r+0x842>
 80091e6:	4621      	mov	r1, r4
 80091e8:	461a      	mov	r2, r3
 80091ea:	4628      	mov	r0, r5
 80091ec:	f000 ffc6 	bl	800a17c <__lshift>
 80091f0:	4604      	mov	r4, r0
 80091f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d070      	beq.n	80092da <_dtoa_r+0x92a>
 80091f8:	4621      	mov	r1, r4
 80091fa:	4658      	mov	r0, fp
 80091fc:	f001 f82e 	bl	800a25c <__mcmp>
 8009200:	2800      	cmp	r0, #0
 8009202:	da6a      	bge.n	80092da <_dtoa_r+0x92a>
 8009204:	2300      	movs	r3, #0
 8009206:	4659      	mov	r1, fp
 8009208:	220a      	movs	r2, #10
 800920a:	4628      	mov	r0, r5
 800920c:	f000 fdc0 	bl	8009d90 <__multadd>
 8009210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009212:	4683      	mov	fp, r0
 8009214:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 8194 	beq.w	8009546 <_dtoa_r+0xb96>
 800921e:	4631      	mov	r1, r6
 8009220:	2300      	movs	r3, #0
 8009222:	220a      	movs	r2, #10
 8009224:	4628      	mov	r0, r5
 8009226:	f000 fdb3 	bl	8009d90 <__multadd>
 800922a:	f1b9 0f00 	cmp.w	r9, #0
 800922e:	4606      	mov	r6, r0
 8009230:	f300 8093 	bgt.w	800935a <_dtoa_r+0x9aa>
 8009234:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009236:	2b02      	cmp	r3, #2
 8009238:	dc57      	bgt.n	80092ea <_dtoa_r+0x93a>
 800923a:	e08e      	b.n	800935a <_dtoa_r+0x9aa>
 800923c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800923e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009242:	e757      	b.n	80090f4 <_dtoa_r+0x744>
 8009244:	9b08      	ldr	r3, [sp, #32]
 8009246:	1e5c      	subs	r4, r3, #1
 8009248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800924a:	42a3      	cmp	r3, r4
 800924c:	bfb7      	itett	lt
 800924e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009250:	1b1c      	subge	r4, r3, r4
 8009252:	1ae2      	sublt	r2, r4, r3
 8009254:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009256:	bfbe      	ittt	lt
 8009258:	940a      	strlt	r4, [sp, #40]	; 0x28
 800925a:	189b      	addlt	r3, r3, r2
 800925c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800925e:	9b08      	ldr	r3, [sp, #32]
 8009260:	bfb8      	it	lt
 8009262:	2400      	movlt	r4, #0
 8009264:	2b00      	cmp	r3, #0
 8009266:	bfbb      	ittet	lt
 8009268:	9b06      	ldrlt	r3, [sp, #24]
 800926a:	9a08      	ldrlt	r2, [sp, #32]
 800926c:	9f06      	ldrge	r7, [sp, #24]
 800926e:	1a9f      	sublt	r7, r3, r2
 8009270:	bfac      	ite	ge
 8009272:	9b08      	ldrge	r3, [sp, #32]
 8009274:	2300      	movlt	r3, #0
 8009276:	e73f      	b.n	80090f8 <_dtoa_r+0x748>
 8009278:	3fe00000 	.word	0x3fe00000
 800927c:	40240000 	.word	0x40240000
 8009280:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009282:	9f06      	ldr	r7, [sp, #24]
 8009284:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009286:	e742      	b.n	800910e <_dtoa_r+0x75e>
 8009288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800928a:	e76b      	b.n	8009164 <_dtoa_r+0x7b4>
 800928c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800928e:	2b01      	cmp	r3, #1
 8009290:	dc19      	bgt.n	80092c6 <_dtoa_r+0x916>
 8009292:	9b04      	ldr	r3, [sp, #16]
 8009294:	b9bb      	cbnz	r3, 80092c6 <_dtoa_r+0x916>
 8009296:	9b05      	ldr	r3, [sp, #20]
 8009298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800929c:	b99b      	cbnz	r3, 80092c6 <_dtoa_r+0x916>
 800929e:	9b05      	ldr	r3, [sp, #20]
 80092a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092a4:	0d1b      	lsrs	r3, r3, #20
 80092a6:	051b      	lsls	r3, r3, #20
 80092a8:	b183      	cbz	r3, 80092cc <_dtoa_r+0x91c>
 80092aa:	f04f 0801 	mov.w	r8, #1
 80092ae:	9b06      	ldr	r3, [sp, #24]
 80092b0:	3301      	adds	r3, #1
 80092b2:	9306      	str	r3, [sp, #24]
 80092b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b6:	3301      	adds	r3, #1
 80092b8:	9309      	str	r3, [sp, #36]	; 0x24
 80092ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f47f af6a 	bne.w	8009196 <_dtoa_r+0x7e6>
 80092c2:	2001      	movs	r0, #1
 80092c4:	e76f      	b.n	80091a6 <_dtoa_r+0x7f6>
 80092c6:	f04f 0800 	mov.w	r8, #0
 80092ca:	e7f6      	b.n	80092ba <_dtoa_r+0x90a>
 80092cc:	4698      	mov	r8, r3
 80092ce:	e7f4      	b.n	80092ba <_dtoa_r+0x90a>
 80092d0:	f43f af7d 	beq.w	80091ce <_dtoa_r+0x81e>
 80092d4:	4618      	mov	r0, r3
 80092d6:	301c      	adds	r0, #28
 80092d8:	e772      	b.n	80091c0 <_dtoa_r+0x810>
 80092da:	9b08      	ldr	r3, [sp, #32]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dc36      	bgt.n	800934e <_dtoa_r+0x99e>
 80092e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	dd33      	ble.n	800934e <_dtoa_r+0x99e>
 80092e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80092ea:	f1b9 0f00 	cmp.w	r9, #0
 80092ee:	d10d      	bne.n	800930c <_dtoa_r+0x95c>
 80092f0:	4621      	mov	r1, r4
 80092f2:	464b      	mov	r3, r9
 80092f4:	2205      	movs	r2, #5
 80092f6:	4628      	mov	r0, r5
 80092f8:	f000 fd4a 	bl	8009d90 <__multadd>
 80092fc:	4601      	mov	r1, r0
 80092fe:	4604      	mov	r4, r0
 8009300:	4658      	mov	r0, fp
 8009302:	f000 ffab 	bl	800a25c <__mcmp>
 8009306:	2800      	cmp	r0, #0
 8009308:	f73f adb8 	bgt.w	8008e7c <_dtoa_r+0x4cc>
 800930c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800930e:	9f03      	ldr	r7, [sp, #12]
 8009310:	ea6f 0a03 	mvn.w	sl, r3
 8009314:	f04f 0800 	mov.w	r8, #0
 8009318:	4621      	mov	r1, r4
 800931a:	4628      	mov	r0, r5
 800931c:	f000 fd16 	bl	8009d4c <_Bfree>
 8009320:	2e00      	cmp	r6, #0
 8009322:	f43f aea7 	beq.w	8009074 <_dtoa_r+0x6c4>
 8009326:	f1b8 0f00 	cmp.w	r8, #0
 800932a:	d005      	beq.n	8009338 <_dtoa_r+0x988>
 800932c:	45b0      	cmp	r8, r6
 800932e:	d003      	beq.n	8009338 <_dtoa_r+0x988>
 8009330:	4641      	mov	r1, r8
 8009332:	4628      	mov	r0, r5
 8009334:	f000 fd0a 	bl	8009d4c <_Bfree>
 8009338:	4631      	mov	r1, r6
 800933a:	4628      	mov	r0, r5
 800933c:	f000 fd06 	bl	8009d4c <_Bfree>
 8009340:	e698      	b.n	8009074 <_dtoa_r+0x6c4>
 8009342:	2400      	movs	r4, #0
 8009344:	4626      	mov	r6, r4
 8009346:	e7e1      	b.n	800930c <_dtoa_r+0x95c>
 8009348:	46c2      	mov	sl, r8
 800934a:	4626      	mov	r6, r4
 800934c:	e596      	b.n	8008e7c <_dtoa_r+0x4cc>
 800934e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 80fd 	beq.w	8009554 <_dtoa_r+0xba4>
 800935a:	2f00      	cmp	r7, #0
 800935c:	dd05      	ble.n	800936a <_dtoa_r+0x9ba>
 800935e:	4631      	mov	r1, r6
 8009360:	463a      	mov	r2, r7
 8009362:	4628      	mov	r0, r5
 8009364:	f000 ff0a 	bl	800a17c <__lshift>
 8009368:	4606      	mov	r6, r0
 800936a:	f1b8 0f00 	cmp.w	r8, #0
 800936e:	d05c      	beq.n	800942a <_dtoa_r+0xa7a>
 8009370:	4628      	mov	r0, r5
 8009372:	6871      	ldr	r1, [r6, #4]
 8009374:	f000 fcaa 	bl	8009ccc <_Balloc>
 8009378:	4607      	mov	r7, r0
 800937a:	b928      	cbnz	r0, 8009388 <_dtoa_r+0x9d8>
 800937c:	4602      	mov	r2, r0
 800937e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009382:	4b7f      	ldr	r3, [pc, #508]	; (8009580 <_dtoa_r+0xbd0>)
 8009384:	f7ff bb28 	b.w	80089d8 <_dtoa_r+0x28>
 8009388:	6932      	ldr	r2, [r6, #16]
 800938a:	f106 010c 	add.w	r1, r6, #12
 800938e:	3202      	adds	r2, #2
 8009390:	0092      	lsls	r2, r2, #2
 8009392:	300c      	adds	r0, #12
 8009394:	f000 fc8c 	bl	8009cb0 <memcpy>
 8009398:	2201      	movs	r2, #1
 800939a:	4639      	mov	r1, r7
 800939c:	4628      	mov	r0, r5
 800939e:	f000 feed 	bl	800a17c <__lshift>
 80093a2:	46b0      	mov	r8, r6
 80093a4:	4606      	mov	r6, r0
 80093a6:	9b03      	ldr	r3, [sp, #12]
 80093a8:	3301      	adds	r3, #1
 80093aa:	9308      	str	r3, [sp, #32]
 80093ac:	9b03      	ldr	r3, [sp, #12]
 80093ae:	444b      	add	r3, r9
 80093b0:	930a      	str	r3, [sp, #40]	; 0x28
 80093b2:	9b04      	ldr	r3, [sp, #16]
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	9309      	str	r3, [sp, #36]	; 0x24
 80093ba:	9b08      	ldr	r3, [sp, #32]
 80093bc:	4621      	mov	r1, r4
 80093be:	3b01      	subs	r3, #1
 80093c0:	4658      	mov	r0, fp
 80093c2:	9304      	str	r3, [sp, #16]
 80093c4:	f7ff fa68 	bl	8008898 <quorem>
 80093c8:	4603      	mov	r3, r0
 80093ca:	4641      	mov	r1, r8
 80093cc:	3330      	adds	r3, #48	; 0x30
 80093ce:	9006      	str	r0, [sp, #24]
 80093d0:	4658      	mov	r0, fp
 80093d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80093d4:	f000 ff42 	bl	800a25c <__mcmp>
 80093d8:	4632      	mov	r2, r6
 80093da:	4681      	mov	r9, r0
 80093dc:	4621      	mov	r1, r4
 80093de:	4628      	mov	r0, r5
 80093e0:	f000 ff58 	bl	800a294 <__mdiff>
 80093e4:	68c2      	ldr	r2, [r0, #12]
 80093e6:	4607      	mov	r7, r0
 80093e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ea:	bb02      	cbnz	r2, 800942e <_dtoa_r+0xa7e>
 80093ec:	4601      	mov	r1, r0
 80093ee:	4658      	mov	r0, fp
 80093f0:	f000 ff34 	bl	800a25c <__mcmp>
 80093f4:	4602      	mov	r2, r0
 80093f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093f8:	4639      	mov	r1, r7
 80093fa:	4628      	mov	r0, r5
 80093fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009400:	f000 fca4 	bl	8009d4c <_Bfree>
 8009404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009408:	9f08      	ldr	r7, [sp, #32]
 800940a:	ea43 0102 	orr.w	r1, r3, r2
 800940e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009410:	430b      	orrs	r3, r1
 8009412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009414:	d10d      	bne.n	8009432 <_dtoa_r+0xa82>
 8009416:	2b39      	cmp	r3, #57	; 0x39
 8009418:	d029      	beq.n	800946e <_dtoa_r+0xabe>
 800941a:	f1b9 0f00 	cmp.w	r9, #0
 800941e:	dd01      	ble.n	8009424 <_dtoa_r+0xa74>
 8009420:	9b06      	ldr	r3, [sp, #24]
 8009422:	3331      	adds	r3, #49	; 0x31
 8009424:	9a04      	ldr	r2, [sp, #16]
 8009426:	7013      	strb	r3, [r2, #0]
 8009428:	e776      	b.n	8009318 <_dtoa_r+0x968>
 800942a:	4630      	mov	r0, r6
 800942c:	e7b9      	b.n	80093a2 <_dtoa_r+0x9f2>
 800942e:	2201      	movs	r2, #1
 8009430:	e7e2      	b.n	80093f8 <_dtoa_r+0xa48>
 8009432:	f1b9 0f00 	cmp.w	r9, #0
 8009436:	db06      	blt.n	8009446 <_dtoa_r+0xa96>
 8009438:	9922      	ldr	r1, [sp, #136]	; 0x88
 800943a:	ea41 0909 	orr.w	r9, r1, r9
 800943e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009440:	ea59 0101 	orrs.w	r1, r9, r1
 8009444:	d120      	bne.n	8009488 <_dtoa_r+0xad8>
 8009446:	2a00      	cmp	r2, #0
 8009448:	ddec      	ble.n	8009424 <_dtoa_r+0xa74>
 800944a:	4659      	mov	r1, fp
 800944c:	2201      	movs	r2, #1
 800944e:	4628      	mov	r0, r5
 8009450:	9308      	str	r3, [sp, #32]
 8009452:	f000 fe93 	bl	800a17c <__lshift>
 8009456:	4621      	mov	r1, r4
 8009458:	4683      	mov	fp, r0
 800945a:	f000 feff 	bl	800a25c <__mcmp>
 800945e:	2800      	cmp	r0, #0
 8009460:	9b08      	ldr	r3, [sp, #32]
 8009462:	dc02      	bgt.n	800946a <_dtoa_r+0xaba>
 8009464:	d1de      	bne.n	8009424 <_dtoa_r+0xa74>
 8009466:	07da      	lsls	r2, r3, #31
 8009468:	d5dc      	bpl.n	8009424 <_dtoa_r+0xa74>
 800946a:	2b39      	cmp	r3, #57	; 0x39
 800946c:	d1d8      	bne.n	8009420 <_dtoa_r+0xa70>
 800946e:	2339      	movs	r3, #57	; 0x39
 8009470:	9a04      	ldr	r2, [sp, #16]
 8009472:	7013      	strb	r3, [r2, #0]
 8009474:	463b      	mov	r3, r7
 8009476:	461f      	mov	r7, r3
 8009478:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800947c:	3b01      	subs	r3, #1
 800947e:	2a39      	cmp	r2, #57	; 0x39
 8009480:	d050      	beq.n	8009524 <_dtoa_r+0xb74>
 8009482:	3201      	adds	r2, #1
 8009484:	701a      	strb	r2, [r3, #0]
 8009486:	e747      	b.n	8009318 <_dtoa_r+0x968>
 8009488:	2a00      	cmp	r2, #0
 800948a:	dd03      	ble.n	8009494 <_dtoa_r+0xae4>
 800948c:	2b39      	cmp	r3, #57	; 0x39
 800948e:	d0ee      	beq.n	800946e <_dtoa_r+0xabe>
 8009490:	3301      	adds	r3, #1
 8009492:	e7c7      	b.n	8009424 <_dtoa_r+0xa74>
 8009494:	9a08      	ldr	r2, [sp, #32]
 8009496:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009498:	f802 3c01 	strb.w	r3, [r2, #-1]
 800949c:	428a      	cmp	r2, r1
 800949e:	d02a      	beq.n	80094f6 <_dtoa_r+0xb46>
 80094a0:	4659      	mov	r1, fp
 80094a2:	2300      	movs	r3, #0
 80094a4:	220a      	movs	r2, #10
 80094a6:	4628      	mov	r0, r5
 80094a8:	f000 fc72 	bl	8009d90 <__multadd>
 80094ac:	45b0      	cmp	r8, r6
 80094ae:	4683      	mov	fp, r0
 80094b0:	f04f 0300 	mov.w	r3, #0
 80094b4:	f04f 020a 	mov.w	r2, #10
 80094b8:	4641      	mov	r1, r8
 80094ba:	4628      	mov	r0, r5
 80094bc:	d107      	bne.n	80094ce <_dtoa_r+0xb1e>
 80094be:	f000 fc67 	bl	8009d90 <__multadd>
 80094c2:	4680      	mov	r8, r0
 80094c4:	4606      	mov	r6, r0
 80094c6:	9b08      	ldr	r3, [sp, #32]
 80094c8:	3301      	adds	r3, #1
 80094ca:	9308      	str	r3, [sp, #32]
 80094cc:	e775      	b.n	80093ba <_dtoa_r+0xa0a>
 80094ce:	f000 fc5f 	bl	8009d90 <__multadd>
 80094d2:	4631      	mov	r1, r6
 80094d4:	4680      	mov	r8, r0
 80094d6:	2300      	movs	r3, #0
 80094d8:	220a      	movs	r2, #10
 80094da:	4628      	mov	r0, r5
 80094dc:	f000 fc58 	bl	8009d90 <__multadd>
 80094e0:	4606      	mov	r6, r0
 80094e2:	e7f0      	b.n	80094c6 <_dtoa_r+0xb16>
 80094e4:	f1b9 0f00 	cmp.w	r9, #0
 80094e8:	bfcc      	ite	gt
 80094ea:	464f      	movgt	r7, r9
 80094ec:	2701      	movle	r7, #1
 80094ee:	f04f 0800 	mov.w	r8, #0
 80094f2:	9a03      	ldr	r2, [sp, #12]
 80094f4:	4417      	add	r7, r2
 80094f6:	4659      	mov	r1, fp
 80094f8:	2201      	movs	r2, #1
 80094fa:	4628      	mov	r0, r5
 80094fc:	9308      	str	r3, [sp, #32]
 80094fe:	f000 fe3d 	bl	800a17c <__lshift>
 8009502:	4621      	mov	r1, r4
 8009504:	4683      	mov	fp, r0
 8009506:	f000 fea9 	bl	800a25c <__mcmp>
 800950a:	2800      	cmp	r0, #0
 800950c:	dcb2      	bgt.n	8009474 <_dtoa_r+0xac4>
 800950e:	d102      	bne.n	8009516 <_dtoa_r+0xb66>
 8009510:	9b08      	ldr	r3, [sp, #32]
 8009512:	07db      	lsls	r3, r3, #31
 8009514:	d4ae      	bmi.n	8009474 <_dtoa_r+0xac4>
 8009516:	463b      	mov	r3, r7
 8009518:	461f      	mov	r7, r3
 800951a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800951e:	2a30      	cmp	r2, #48	; 0x30
 8009520:	d0fa      	beq.n	8009518 <_dtoa_r+0xb68>
 8009522:	e6f9      	b.n	8009318 <_dtoa_r+0x968>
 8009524:	9a03      	ldr	r2, [sp, #12]
 8009526:	429a      	cmp	r2, r3
 8009528:	d1a5      	bne.n	8009476 <_dtoa_r+0xac6>
 800952a:	2331      	movs	r3, #49	; 0x31
 800952c:	f10a 0a01 	add.w	sl, sl, #1
 8009530:	e779      	b.n	8009426 <_dtoa_r+0xa76>
 8009532:	4b14      	ldr	r3, [pc, #80]	; (8009584 <_dtoa_r+0xbd4>)
 8009534:	f7ff baa8 	b.w	8008a88 <_dtoa_r+0xd8>
 8009538:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800953a:	2b00      	cmp	r3, #0
 800953c:	f47f aa81 	bne.w	8008a42 <_dtoa_r+0x92>
 8009540:	4b11      	ldr	r3, [pc, #68]	; (8009588 <_dtoa_r+0xbd8>)
 8009542:	f7ff baa1 	b.w	8008a88 <_dtoa_r+0xd8>
 8009546:	f1b9 0f00 	cmp.w	r9, #0
 800954a:	dc03      	bgt.n	8009554 <_dtoa_r+0xba4>
 800954c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800954e:	2b02      	cmp	r3, #2
 8009550:	f73f aecb 	bgt.w	80092ea <_dtoa_r+0x93a>
 8009554:	9f03      	ldr	r7, [sp, #12]
 8009556:	4621      	mov	r1, r4
 8009558:	4658      	mov	r0, fp
 800955a:	f7ff f99d 	bl	8008898 <quorem>
 800955e:	9a03      	ldr	r2, [sp, #12]
 8009560:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009564:	f807 3b01 	strb.w	r3, [r7], #1
 8009568:	1aba      	subs	r2, r7, r2
 800956a:	4591      	cmp	r9, r2
 800956c:	ddba      	ble.n	80094e4 <_dtoa_r+0xb34>
 800956e:	4659      	mov	r1, fp
 8009570:	2300      	movs	r3, #0
 8009572:	220a      	movs	r2, #10
 8009574:	4628      	mov	r0, r5
 8009576:	f000 fc0b 	bl	8009d90 <__multadd>
 800957a:	4683      	mov	fp, r0
 800957c:	e7eb      	b.n	8009556 <_dtoa_r+0xba6>
 800957e:	bf00      	nop
 8009580:	0800c147 	.word	0x0800c147
 8009584:	0800c054 	.word	0x0800c054
 8009588:	0800c0c8 	.word	0x0800c0c8

0800958c <rshift>:
 800958c:	6903      	ldr	r3, [r0, #16]
 800958e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009592:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009596:	f100 0414 	add.w	r4, r0, #20
 800959a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800959e:	dd46      	ble.n	800962e <rshift+0xa2>
 80095a0:	f011 011f 	ands.w	r1, r1, #31
 80095a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80095a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80095ac:	d10c      	bne.n	80095c8 <rshift+0x3c>
 80095ae:	4629      	mov	r1, r5
 80095b0:	f100 0710 	add.w	r7, r0, #16
 80095b4:	42b1      	cmp	r1, r6
 80095b6:	d335      	bcc.n	8009624 <rshift+0x98>
 80095b8:	1a9b      	subs	r3, r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	1eea      	subs	r2, r5, #3
 80095be:	4296      	cmp	r6, r2
 80095c0:	bf38      	it	cc
 80095c2:	2300      	movcc	r3, #0
 80095c4:	4423      	add	r3, r4
 80095c6:	e015      	b.n	80095f4 <rshift+0x68>
 80095c8:	46a1      	mov	r9, r4
 80095ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095ce:	f1c1 0820 	rsb	r8, r1, #32
 80095d2:	40cf      	lsrs	r7, r1
 80095d4:	f105 0e04 	add.w	lr, r5, #4
 80095d8:	4576      	cmp	r6, lr
 80095da:	46f4      	mov	ip, lr
 80095dc:	d816      	bhi.n	800960c <rshift+0x80>
 80095de:	1a9a      	subs	r2, r3, r2
 80095e0:	0092      	lsls	r2, r2, #2
 80095e2:	3a04      	subs	r2, #4
 80095e4:	3501      	adds	r5, #1
 80095e6:	42ae      	cmp	r6, r5
 80095e8:	bf38      	it	cc
 80095ea:	2200      	movcc	r2, #0
 80095ec:	18a3      	adds	r3, r4, r2
 80095ee:	50a7      	str	r7, [r4, r2]
 80095f0:	b107      	cbz	r7, 80095f4 <rshift+0x68>
 80095f2:	3304      	adds	r3, #4
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	eba3 0204 	sub.w	r2, r3, r4
 80095fa:	bf08      	it	eq
 80095fc:	2300      	moveq	r3, #0
 80095fe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009602:	6102      	str	r2, [r0, #16]
 8009604:	bf08      	it	eq
 8009606:	6143      	streq	r3, [r0, #20]
 8009608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800960c:	f8dc c000 	ldr.w	ip, [ip]
 8009610:	fa0c fc08 	lsl.w	ip, ip, r8
 8009614:	ea4c 0707 	orr.w	r7, ip, r7
 8009618:	f849 7b04 	str.w	r7, [r9], #4
 800961c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009620:	40cf      	lsrs	r7, r1
 8009622:	e7d9      	b.n	80095d8 <rshift+0x4c>
 8009624:	f851 cb04 	ldr.w	ip, [r1], #4
 8009628:	f847 cf04 	str.w	ip, [r7, #4]!
 800962c:	e7c2      	b.n	80095b4 <rshift+0x28>
 800962e:	4623      	mov	r3, r4
 8009630:	e7e0      	b.n	80095f4 <rshift+0x68>

08009632 <__hexdig_fun>:
 8009632:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009636:	2b09      	cmp	r3, #9
 8009638:	d802      	bhi.n	8009640 <__hexdig_fun+0xe>
 800963a:	3820      	subs	r0, #32
 800963c:	b2c0      	uxtb	r0, r0
 800963e:	4770      	bx	lr
 8009640:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009644:	2b05      	cmp	r3, #5
 8009646:	d801      	bhi.n	800964c <__hexdig_fun+0x1a>
 8009648:	3847      	subs	r0, #71	; 0x47
 800964a:	e7f7      	b.n	800963c <__hexdig_fun+0xa>
 800964c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009650:	2b05      	cmp	r3, #5
 8009652:	d801      	bhi.n	8009658 <__hexdig_fun+0x26>
 8009654:	3827      	subs	r0, #39	; 0x27
 8009656:	e7f1      	b.n	800963c <__hexdig_fun+0xa>
 8009658:	2000      	movs	r0, #0
 800965a:	4770      	bx	lr

0800965c <__gethex>:
 800965c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	b08b      	sub	sp, #44	; 0x2c
 8009662:	9305      	str	r3, [sp, #20]
 8009664:	4bb2      	ldr	r3, [pc, #712]	; (8009930 <__gethex+0x2d4>)
 8009666:	9002      	str	r0, [sp, #8]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	468b      	mov	fp, r1
 800966c:	4618      	mov	r0, r3
 800966e:	4690      	mov	r8, r2
 8009670:	9303      	str	r3, [sp, #12]
 8009672:	f7f6 fd6d 	bl	8000150 <strlen>
 8009676:	4682      	mov	sl, r0
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	f8db 2000 	ldr.w	r2, [fp]
 800967e:	4403      	add	r3, r0
 8009680:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009684:	9306      	str	r3, [sp, #24]
 8009686:	1c93      	adds	r3, r2, #2
 8009688:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800968c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009690:	32fe      	adds	r2, #254	; 0xfe
 8009692:	18d1      	adds	r1, r2, r3
 8009694:	461f      	mov	r7, r3
 8009696:	f813 0b01 	ldrb.w	r0, [r3], #1
 800969a:	9101      	str	r1, [sp, #4]
 800969c:	2830      	cmp	r0, #48	; 0x30
 800969e:	d0f8      	beq.n	8009692 <__gethex+0x36>
 80096a0:	f7ff ffc7 	bl	8009632 <__hexdig_fun>
 80096a4:	4604      	mov	r4, r0
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d13a      	bne.n	8009720 <__gethex+0xc4>
 80096aa:	4652      	mov	r2, sl
 80096ac:	4638      	mov	r0, r7
 80096ae:	9903      	ldr	r1, [sp, #12]
 80096b0:	f001 fa26 	bl	800ab00 <strncmp>
 80096b4:	4605      	mov	r5, r0
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d166      	bne.n	8009788 <__gethex+0x12c>
 80096ba:	f817 000a 	ldrb.w	r0, [r7, sl]
 80096be:	eb07 060a 	add.w	r6, r7, sl
 80096c2:	f7ff ffb6 	bl	8009632 <__hexdig_fun>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d060      	beq.n	800978c <__gethex+0x130>
 80096ca:	4633      	mov	r3, r6
 80096cc:	7818      	ldrb	r0, [r3, #0]
 80096ce:	461f      	mov	r7, r3
 80096d0:	2830      	cmp	r0, #48	; 0x30
 80096d2:	f103 0301 	add.w	r3, r3, #1
 80096d6:	d0f9      	beq.n	80096cc <__gethex+0x70>
 80096d8:	f7ff ffab 	bl	8009632 <__hexdig_fun>
 80096dc:	2301      	movs	r3, #1
 80096de:	fab0 f480 	clz	r4, r0
 80096e2:	4635      	mov	r5, r6
 80096e4:	0964      	lsrs	r4, r4, #5
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	463a      	mov	r2, r7
 80096ea:	4616      	mov	r6, r2
 80096ec:	7830      	ldrb	r0, [r6, #0]
 80096ee:	3201      	adds	r2, #1
 80096f0:	f7ff ff9f 	bl	8009632 <__hexdig_fun>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d1f8      	bne.n	80096ea <__gethex+0x8e>
 80096f8:	4652      	mov	r2, sl
 80096fa:	4630      	mov	r0, r6
 80096fc:	9903      	ldr	r1, [sp, #12]
 80096fe:	f001 f9ff 	bl	800ab00 <strncmp>
 8009702:	b980      	cbnz	r0, 8009726 <__gethex+0xca>
 8009704:	b94d      	cbnz	r5, 800971a <__gethex+0xbe>
 8009706:	eb06 050a 	add.w	r5, r6, sl
 800970a:	462a      	mov	r2, r5
 800970c:	4616      	mov	r6, r2
 800970e:	7830      	ldrb	r0, [r6, #0]
 8009710:	3201      	adds	r2, #1
 8009712:	f7ff ff8e 	bl	8009632 <__hexdig_fun>
 8009716:	2800      	cmp	r0, #0
 8009718:	d1f8      	bne.n	800970c <__gethex+0xb0>
 800971a:	1bad      	subs	r5, r5, r6
 800971c:	00ad      	lsls	r5, r5, #2
 800971e:	e004      	b.n	800972a <__gethex+0xce>
 8009720:	2400      	movs	r4, #0
 8009722:	4625      	mov	r5, r4
 8009724:	e7e0      	b.n	80096e8 <__gethex+0x8c>
 8009726:	2d00      	cmp	r5, #0
 8009728:	d1f7      	bne.n	800971a <__gethex+0xbe>
 800972a:	7833      	ldrb	r3, [r6, #0]
 800972c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009730:	2b50      	cmp	r3, #80	; 0x50
 8009732:	d139      	bne.n	80097a8 <__gethex+0x14c>
 8009734:	7873      	ldrb	r3, [r6, #1]
 8009736:	2b2b      	cmp	r3, #43	; 0x2b
 8009738:	d02a      	beq.n	8009790 <__gethex+0x134>
 800973a:	2b2d      	cmp	r3, #45	; 0x2d
 800973c:	d02c      	beq.n	8009798 <__gethex+0x13c>
 800973e:	f04f 0900 	mov.w	r9, #0
 8009742:	1c71      	adds	r1, r6, #1
 8009744:	7808      	ldrb	r0, [r1, #0]
 8009746:	f7ff ff74 	bl	8009632 <__hexdig_fun>
 800974a:	1e43      	subs	r3, r0, #1
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b18      	cmp	r3, #24
 8009750:	d82a      	bhi.n	80097a8 <__gethex+0x14c>
 8009752:	f1a0 0210 	sub.w	r2, r0, #16
 8009756:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800975a:	f7ff ff6a 	bl	8009632 <__hexdig_fun>
 800975e:	1e43      	subs	r3, r0, #1
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b18      	cmp	r3, #24
 8009764:	d91b      	bls.n	800979e <__gethex+0x142>
 8009766:	f1b9 0f00 	cmp.w	r9, #0
 800976a:	d000      	beq.n	800976e <__gethex+0x112>
 800976c:	4252      	negs	r2, r2
 800976e:	4415      	add	r5, r2
 8009770:	f8cb 1000 	str.w	r1, [fp]
 8009774:	b1d4      	cbz	r4, 80097ac <__gethex+0x150>
 8009776:	9b01      	ldr	r3, [sp, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	bf14      	ite	ne
 800977c:	2700      	movne	r7, #0
 800977e:	2706      	moveq	r7, #6
 8009780:	4638      	mov	r0, r7
 8009782:	b00b      	add	sp, #44	; 0x2c
 8009784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009788:	463e      	mov	r6, r7
 800978a:	4625      	mov	r5, r4
 800978c:	2401      	movs	r4, #1
 800978e:	e7cc      	b.n	800972a <__gethex+0xce>
 8009790:	f04f 0900 	mov.w	r9, #0
 8009794:	1cb1      	adds	r1, r6, #2
 8009796:	e7d5      	b.n	8009744 <__gethex+0xe8>
 8009798:	f04f 0901 	mov.w	r9, #1
 800979c:	e7fa      	b.n	8009794 <__gethex+0x138>
 800979e:	230a      	movs	r3, #10
 80097a0:	fb03 0202 	mla	r2, r3, r2, r0
 80097a4:	3a10      	subs	r2, #16
 80097a6:	e7d6      	b.n	8009756 <__gethex+0xfa>
 80097a8:	4631      	mov	r1, r6
 80097aa:	e7e1      	b.n	8009770 <__gethex+0x114>
 80097ac:	4621      	mov	r1, r4
 80097ae:	1bf3      	subs	r3, r6, r7
 80097b0:	3b01      	subs	r3, #1
 80097b2:	2b07      	cmp	r3, #7
 80097b4:	dc0a      	bgt.n	80097cc <__gethex+0x170>
 80097b6:	9802      	ldr	r0, [sp, #8]
 80097b8:	f000 fa88 	bl	8009ccc <_Balloc>
 80097bc:	4604      	mov	r4, r0
 80097be:	b940      	cbnz	r0, 80097d2 <__gethex+0x176>
 80097c0:	4602      	mov	r2, r0
 80097c2:	21de      	movs	r1, #222	; 0xde
 80097c4:	4b5b      	ldr	r3, [pc, #364]	; (8009934 <__gethex+0x2d8>)
 80097c6:	485c      	ldr	r0, [pc, #368]	; (8009938 <__gethex+0x2dc>)
 80097c8:	f001 f9bc 	bl	800ab44 <__assert_func>
 80097cc:	3101      	adds	r1, #1
 80097ce:	105b      	asrs	r3, r3, #1
 80097d0:	e7ef      	b.n	80097b2 <__gethex+0x156>
 80097d2:	f04f 0b00 	mov.w	fp, #0
 80097d6:	f100 0914 	add.w	r9, r0, #20
 80097da:	f1ca 0301 	rsb	r3, sl, #1
 80097de:	f8cd 9010 	str.w	r9, [sp, #16]
 80097e2:	f8cd b004 	str.w	fp, [sp, #4]
 80097e6:	9308      	str	r3, [sp, #32]
 80097e8:	42b7      	cmp	r7, r6
 80097ea:	d33f      	bcc.n	800986c <__gethex+0x210>
 80097ec:	9f04      	ldr	r7, [sp, #16]
 80097ee:	9b01      	ldr	r3, [sp, #4]
 80097f0:	f847 3b04 	str.w	r3, [r7], #4
 80097f4:	eba7 0709 	sub.w	r7, r7, r9
 80097f8:	10bf      	asrs	r7, r7, #2
 80097fa:	6127      	str	r7, [r4, #16]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 fb57 	bl	8009eb0 <__hi0bits>
 8009802:	017f      	lsls	r7, r7, #5
 8009804:	f8d8 6000 	ldr.w	r6, [r8]
 8009808:	1a3f      	subs	r7, r7, r0
 800980a:	42b7      	cmp	r7, r6
 800980c:	dd62      	ble.n	80098d4 <__gethex+0x278>
 800980e:	1bbf      	subs	r7, r7, r6
 8009810:	4639      	mov	r1, r7
 8009812:	4620      	mov	r0, r4
 8009814:	f000 fef1 	bl	800a5fa <__any_on>
 8009818:	4682      	mov	sl, r0
 800981a:	b1a8      	cbz	r0, 8009848 <__gethex+0x1ec>
 800981c:	f04f 0a01 	mov.w	sl, #1
 8009820:	1e7b      	subs	r3, r7, #1
 8009822:	1159      	asrs	r1, r3, #5
 8009824:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009828:	f003 021f 	and.w	r2, r3, #31
 800982c:	fa0a f202 	lsl.w	r2, sl, r2
 8009830:	420a      	tst	r2, r1
 8009832:	d009      	beq.n	8009848 <__gethex+0x1ec>
 8009834:	4553      	cmp	r3, sl
 8009836:	dd05      	ble.n	8009844 <__gethex+0x1e8>
 8009838:	4620      	mov	r0, r4
 800983a:	1eb9      	subs	r1, r7, #2
 800983c:	f000 fedd 	bl	800a5fa <__any_on>
 8009840:	2800      	cmp	r0, #0
 8009842:	d144      	bne.n	80098ce <__gethex+0x272>
 8009844:	f04f 0a02 	mov.w	sl, #2
 8009848:	4639      	mov	r1, r7
 800984a:	4620      	mov	r0, r4
 800984c:	f7ff fe9e 	bl	800958c <rshift>
 8009850:	443d      	add	r5, r7
 8009852:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009856:	42ab      	cmp	r3, r5
 8009858:	da4a      	bge.n	80098f0 <__gethex+0x294>
 800985a:	4621      	mov	r1, r4
 800985c:	9802      	ldr	r0, [sp, #8]
 800985e:	f000 fa75 	bl	8009d4c <_Bfree>
 8009862:	2300      	movs	r3, #0
 8009864:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009866:	27a3      	movs	r7, #163	; 0xa3
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	e789      	b.n	8009780 <__gethex+0x124>
 800986c:	1e73      	subs	r3, r6, #1
 800986e:	9a06      	ldr	r2, [sp, #24]
 8009870:	9307      	str	r3, [sp, #28]
 8009872:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009876:	4293      	cmp	r3, r2
 8009878:	d019      	beq.n	80098ae <__gethex+0x252>
 800987a:	f1bb 0f20 	cmp.w	fp, #32
 800987e:	d107      	bne.n	8009890 <__gethex+0x234>
 8009880:	9b04      	ldr	r3, [sp, #16]
 8009882:	9a01      	ldr	r2, [sp, #4]
 8009884:	f843 2b04 	str.w	r2, [r3], #4
 8009888:	9304      	str	r3, [sp, #16]
 800988a:	2300      	movs	r3, #0
 800988c:	469b      	mov	fp, r3
 800988e:	9301      	str	r3, [sp, #4]
 8009890:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009894:	f7ff fecd 	bl	8009632 <__hexdig_fun>
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	f000 000f 	and.w	r0, r0, #15
 800989e:	fa00 f00b 	lsl.w	r0, r0, fp
 80098a2:	4303      	orrs	r3, r0
 80098a4:	9301      	str	r3, [sp, #4]
 80098a6:	f10b 0b04 	add.w	fp, fp, #4
 80098aa:	9b07      	ldr	r3, [sp, #28]
 80098ac:	e00d      	b.n	80098ca <__gethex+0x26e>
 80098ae:	9a08      	ldr	r2, [sp, #32]
 80098b0:	1e73      	subs	r3, r6, #1
 80098b2:	4413      	add	r3, r2
 80098b4:	42bb      	cmp	r3, r7
 80098b6:	d3e0      	bcc.n	800987a <__gethex+0x21e>
 80098b8:	4618      	mov	r0, r3
 80098ba:	4652      	mov	r2, sl
 80098bc:	9903      	ldr	r1, [sp, #12]
 80098be:	9309      	str	r3, [sp, #36]	; 0x24
 80098c0:	f001 f91e 	bl	800ab00 <strncmp>
 80098c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d1d7      	bne.n	800987a <__gethex+0x21e>
 80098ca:	461e      	mov	r6, r3
 80098cc:	e78c      	b.n	80097e8 <__gethex+0x18c>
 80098ce:	f04f 0a03 	mov.w	sl, #3
 80098d2:	e7b9      	b.n	8009848 <__gethex+0x1ec>
 80098d4:	da09      	bge.n	80098ea <__gethex+0x28e>
 80098d6:	1bf7      	subs	r7, r6, r7
 80098d8:	4621      	mov	r1, r4
 80098da:	463a      	mov	r2, r7
 80098dc:	9802      	ldr	r0, [sp, #8]
 80098de:	f000 fc4d 	bl	800a17c <__lshift>
 80098e2:	4604      	mov	r4, r0
 80098e4:	1bed      	subs	r5, r5, r7
 80098e6:	f100 0914 	add.w	r9, r0, #20
 80098ea:	f04f 0a00 	mov.w	sl, #0
 80098ee:	e7b0      	b.n	8009852 <__gethex+0x1f6>
 80098f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80098f4:	42a8      	cmp	r0, r5
 80098f6:	dd72      	ble.n	80099de <__gethex+0x382>
 80098f8:	1b45      	subs	r5, r0, r5
 80098fa:	42ae      	cmp	r6, r5
 80098fc:	dc35      	bgt.n	800996a <__gethex+0x30e>
 80098fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009902:	2b02      	cmp	r3, #2
 8009904:	d029      	beq.n	800995a <__gethex+0x2fe>
 8009906:	2b03      	cmp	r3, #3
 8009908:	d02b      	beq.n	8009962 <__gethex+0x306>
 800990a:	2b01      	cmp	r3, #1
 800990c:	d11c      	bne.n	8009948 <__gethex+0x2ec>
 800990e:	42ae      	cmp	r6, r5
 8009910:	d11a      	bne.n	8009948 <__gethex+0x2ec>
 8009912:	2e01      	cmp	r6, #1
 8009914:	d112      	bne.n	800993c <__gethex+0x2e0>
 8009916:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800991a:	9a05      	ldr	r2, [sp, #20]
 800991c:	2762      	movs	r7, #98	; 0x62
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	2301      	movs	r3, #1
 8009922:	6123      	str	r3, [r4, #16]
 8009924:	f8c9 3000 	str.w	r3, [r9]
 8009928:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800992a:	601c      	str	r4, [r3, #0]
 800992c:	e728      	b.n	8009780 <__gethex+0x124>
 800992e:	bf00      	nop
 8009930:	0800c1c0 	.word	0x0800c1c0
 8009934:	0800c147 	.word	0x0800c147
 8009938:	0800c158 	.word	0x0800c158
 800993c:	4620      	mov	r0, r4
 800993e:	1e71      	subs	r1, r6, #1
 8009940:	f000 fe5b 	bl	800a5fa <__any_on>
 8009944:	2800      	cmp	r0, #0
 8009946:	d1e6      	bne.n	8009916 <__gethex+0x2ba>
 8009948:	4621      	mov	r1, r4
 800994a:	9802      	ldr	r0, [sp, #8]
 800994c:	f000 f9fe 	bl	8009d4c <_Bfree>
 8009950:	2300      	movs	r3, #0
 8009952:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009954:	2750      	movs	r7, #80	; 0x50
 8009956:	6013      	str	r3, [r2, #0]
 8009958:	e712      	b.n	8009780 <__gethex+0x124>
 800995a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1f3      	bne.n	8009948 <__gethex+0x2ec>
 8009960:	e7d9      	b.n	8009916 <__gethex+0x2ba>
 8009962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1d6      	bne.n	8009916 <__gethex+0x2ba>
 8009968:	e7ee      	b.n	8009948 <__gethex+0x2ec>
 800996a:	1e6f      	subs	r7, r5, #1
 800996c:	f1ba 0f00 	cmp.w	sl, #0
 8009970:	d132      	bne.n	80099d8 <__gethex+0x37c>
 8009972:	b127      	cbz	r7, 800997e <__gethex+0x322>
 8009974:	4639      	mov	r1, r7
 8009976:	4620      	mov	r0, r4
 8009978:	f000 fe3f 	bl	800a5fa <__any_on>
 800997c:	4682      	mov	sl, r0
 800997e:	2101      	movs	r1, #1
 8009980:	117b      	asrs	r3, r7, #5
 8009982:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009986:	f007 071f 	and.w	r7, r7, #31
 800998a:	fa01 f707 	lsl.w	r7, r1, r7
 800998e:	421f      	tst	r7, r3
 8009990:	f04f 0702 	mov.w	r7, #2
 8009994:	4629      	mov	r1, r5
 8009996:	4620      	mov	r0, r4
 8009998:	bf18      	it	ne
 800999a:	f04a 0a02 	orrne.w	sl, sl, #2
 800999e:	1b76      	subs	r6, r6, r5
 80099a0:	f7ff fdf4 	bl	800958c <rshift>
 80099a4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80099a8:	f1ba 0f00 	cmp.w	sl, #0
 80099ac:	d048      	beq.n	8009a40 <__gethex+0x3e4>
 80099ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d015      	beq.n	80099e2 <__gethex+0x386>
 80099b6:	2b03      	cmp	r3, #3
 80099b8:	d017      	beq.n	80099ea <__gethex+0x38e>
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d109      	bne.n	80099d2 <__gethex+0x376>
 80099be:	f01a 0f02 	tst.w	sl, #2
 80099c2:	d006      	beq.n	80099d2 <__gethex+0x376>
 80099c4:	f8d9 0000 	ldr.w	r0, [r9]
 80099c8:	ea4a 0a00 	orr.w	sl, sl, r0
 80099cc:	f01a 0f01 	tst.w	sl, #1
 80099d0:	d10e      	bne.n	80099f0 <__gethex+0x394>
 80099d2:	f047 0710 	orr.w	r7, r7, #16
 80099d6:	e033      	b.n	8009a40 <__gethex+0x3e4>
 80099d8:	f04f 0a01 	mov.w	sl, #1
 80099dc:	e7cf      	b.n	800997e <__gethex+0x322>
 80099de:	2701      	movs	r7, #1
 80099e0:	e7e2      	b.n	80099a8 <__gethex+0x34c>
 80099e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099e4:	f1c3 0301 	rsb	r3, r3, #1
 80099e8:	9315      	str	r3, [sp, #84]	; 0x54
 80099ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d0f0      	beq.n	80099d2 <__gethex+0x376>
 80099f0:	f04f 0c00 	mov.w	ip, #0
 80099f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099f8:	f104 0314 	add.w	r3, r4, #20
 80099fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009a00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009a04:	4618      	mov	r0, r3
 8009a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a0a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009a0e:	d01c      	beq.n	8009a4a <__gethex+0x3ee>
 8009a10:	3201      	adds	r2, #1
 8009a12:	6002      	str	r2, [r0, #0]
 8009a14:	2f02      	cmp	r7, #2
 8009a16:	f104 0314 	add.w	r3, r4, #20
 8009a1a:	d13d      	bne.n	8009a98 <__gethex+0x43c>
 8009a1c:	f8d8 2000 	ldr.w	r2, [r8]
 8009a20:	3a01      	subs	r2, #1
 8009a22:	42b2      	cmp	r2, r6
 8009a24:	d10a      	bne.n	8009a3c <__gethex+0x3e0>
 8009a26:	2201      	movs	r2, #1
 8009a28:	1171      	asrs	r1, r6, #5
 8009a2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a2e:	f006 061f 	and.w	r6, r6, #31
 8009a32:	fa02 f606 	lsl.w	r6, r2, r6
 8009a36:	421e      	tst	r6, r3
 8009a38:	bf18      	it	ne
 8009a3a:	4617      	movne	r7, r2
 8009a3c:	f047 0720 	orr.w	r7, r7, #32
 8009a40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a42:	601c      	str	r4, [r3, #0]
 8009a44:	9b05      	ldr	r3, [sp, #20]
 8009a46:	601d      	str	r5, [r3, #0]
 8009a48:	e69a      	b.n	8009780 <__gethex+0x124>
 8009a4a:	4299      	cmp	r1, r3
 8009a4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009a50:	d8d8      	bhi.n	8009a04 <__gethex+0x3a8>
 8009a52:	68a3      	ldr	r3, [r4, #8]
 8009a54:	459b      	cmp	fp, r3
 8009a56:	db17      	blt.n	8009a88 <__gethex+0x42c>
 8009a58:	6861      	ldr	r1, [r4, #4]
 8009a5a:	9802      	ldr	r0, [sp, #8]
 8009a5c:	3101      	adds	r1, #1
 8009a5e:	f000 f935 	bl	8009ccc <_Balloc>
 8009a62:	4681      	mov	r9, r0
 8009a64:	b918      	cbnz	r0, 8009a6e <__gethex+0x412>
 8009a66:	4602      	mov	r2, r0
 8009a68:	2184      	movs	r1, #132	; 0x84
 8009a6a:	4b19      	ldr	r3, [pc, #100]	; (8009ad0 <__gethex+0x474>)
 8009a6c:	e6ab      	b.n	80097c6 <__gethex+0x16a>
 8009a6e:	6922      	ldr	r2, [r4, #16]
 8009a70:	f104 010c 	add.w	r1, r4, #12
 8009a74:	3202      	adds	r2, #2
 8009a76:	0092      	lsls	r2, r2, #2
 8009a78:	300c      	adds	r0, #12
 8009a7a:	f000 f919 	bl	8009cb0 <memcpy>
 8009a7e:	4621      	mov	r1, r4
 8009a80:	9802      	ldr	r0, [sp, #8]
 8009a82:	f000 f963 	bl	8009d4c <_Bfree>
 8009a86:	464c      	mov	r4, r9
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	6122      	str	r2, [r4, #16]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a94:	615a      	str	r2, [r3, #20]
 8009a96:	e7bd      	b.n	8009a14 <__gethex+0x3b8>
 8009a98:	6922      	ldr	r2, [r4, #16]
 8009a9a:	455a      	cmp	r2, fp
 8009a9c:	dd0b      	ble.n	8009ab6 <__gethex+0x45a>
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f7ff fd73 	bl	800958c <rshift>
 8009aa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009aaa:	3501      	adds	r5, #1
 8009aac:	42ab      	cmp	r3, r5
 8009aae:	f6ff aed4 	blt.w	800985a <__gethex+0x1fe>
 8009ab2:	2701      	movs	r7, #1
 8009ab4:	e7c2      	b.n	8009a3c <__gethex+0x3e0>
 8009ab6:	f016 061f 	ands.w	r6, r6, #31
 8009aba:	d0fa      	beq.n	8009ab2 <__gethex+0x456>
 8009abc:	4453      	add	r3, sl
 8009abe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009ac2:	f000 f9f5 	bl	8009eb0 <__hi0bits>
 8009ac6:	f1c6 0620 	rsb	r6, r6, #32
 8009aca:	42b0      	cmp	r0, r6
 8009acc:	dbe7      	blt.n	8009a9e <__gethex+0x442>
 8009ace:	e7f0      	b.n	8009ab2 <__gethex+0x456>
 8009ad0:	0800c147 	.word	0x0800c147

08009ad4 <L_shift>:
 8009ad4:	f1c2 0208 	rsb	r2, r2, #8
 8009ad8:	0092      	lsls	r2, r2, #2
 8009ada:	b570      	push	{r4, r5, r6, lr}
 8009adc:	f1c2 0620 	rsb	r6, r2, #32
 8009ae0:	6843      	ldr	r3, [r0, #4]
 8009ae2:	6804      	ldr	r4, [r0, #0]
 8009ae4:	fa03 f506 	lsl.w	r5, r3, r6
 8009ae8:	432c      	orrs	r4, r5
 8009aea:	40d3      	lsrs	r3, r2
 8009aec:	6004      	str	r4, [r0, #0]
 8009aee:	f840 3f04 	str.w	r3, [r0, #4]!
 8009af2:	4288      	cmp	r0, r1
 8009af4:	d3f4      	bcc.n	8009ae0 <L_shift+0xc>
 8009af6:	bd70      	pop	{r4, r5, r6, pc}

08009af8 <__match>:
 8009af8:	b530      	push	{r4, r5, lr}
 8009afa:	6803      	ldr	r3, [r0, #0]
 8009afc:	3301      	adds	r3, #1
 8009afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b02:	b914      	cbnz	r4, 8009b0a <__match+0x12>
 8009b04:	6003      	str	r3, [r0, #0]
 8009b06:	2001      	movs	r0, #1
 8009b08:	bd30      	pop	{r4, r5, pc}
 8009b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009b12:	2d19      	cmp	r5, #25
 8009b14:	bf98      	it	ls
 8009b16:	3220      	addls	r2, #32
 8009b18:	42a2      	cmp	r2, r4
 8009b1a:	d0f0      	beq.n	8009afe <__match+0x6>
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	e7f3      	b.n	8009b08 <__match+0x10>

08009b20 <__hexnan>:
 8009b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	2500      	movs	r5, #0
 8009b26:	680b      	ldr	r3, [r1, #0]
 8009b28:	4682      	mov	sl, r0
 8009b2a:	115e      	asrs	r6, r3, #5
 8009b2c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b30:	f013 031f 	ands.w	r3, r3, #31
 8009b34:	bf18      	it	ne
 8009b36:	3604      	addne	r6, #4
 8009b38:	1f37      	subs	r7, r6, #4
 8009b3a:	46b9      	mov	r9, r7
 8009b3c:	463c      	mov	r4, r7
 8009b3e:	46ab      	mov	fp, r5
 8009b40:	b087      	sub	sp, #28
 8009b42:	4690      	mov	r8, r2
 8009b44:	6802      	ldr	r2, [r0, #0]
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b4c:	9502      	str	r5, [sp, #8]
 8009b4e:	7851      	ldrb	r1, [r2, #1]
 8009b50:	1c53      	adds	r3, r2, #1
 8009b52:	9303      	str	r3, [sp, #12]
 8009b54:	b341      	cbz	r1, 8009ba8 <__hexnan+0x88>
 8009b56:	4608      	mov	r0, r1
 8009b58:	9205      	str	r2, [sp, #20]
 8009b5a:	9104      	str	r1, [sp, #16]
 8009b5c:	f7ff fd69 	bl	8009632 <__hexdig_fun>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d14f      	bne.n	8009c04 <__hexnan+0xe4>
 8009b64:	9904      	ldr	r1, [sp, #16]
 8009b66:	9a05      	ldr	r2, [sp, #20]
 8009b68:	2920      	cmp	r1, #32
 8009b6a:	d818      	bhi.n	8009b9e <__hexnan+0x7e>
 8009b6c:	9b02      	ldr	r3, [sp, #8]
 8009b6e:	459b      	cmp	fp, r3
 8009b70:	dd13      	ble.n	8009b9a <__hexnan+0x7a>
 8009b72:	454c      	cmp	r4, r9
 8009b74:	d206      	bcs.n	8009b84 <__hexnan+0x64>
 8009b76:	2d07      	cmp	r5, #7
 8009b78:	dc04      	bgt.n	8009b84 <__hexnan+0x64>
 8009b7a:	462a      	mov	r2, r5
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f7ff ffa8 	bl	8009ad4 <L_shift>
 8009b84:	4544      	cmp	r4, r8
 8009b86:	d950      	bls.n	8009c2a <__hexnan+0x10a>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f1a4 0904 	sub.w	r9, r4, #4
 8009b8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b92:	461d      	mov	r5, r3
 8009b94:	464c      	mov	r4, r9
 8009b96:	f8cd b008 	str.w	fp, [sp, #8]
 8009b9a:	9a03      	ldr	r2, [sp, #12]
 8009b9c:	e7d7      	b.n	8009b4e <__hexnan+0x2e>
 8009b9e:	2929      	cmp	r1, #41	; 0x29
 8009ba0:	d156      	bne.n	8009c50 <__hexnan+0x130>
 8009ba2:	3202      	adds	r2, #2
 8009ba4:	f8ca 2000 	str.w	r2, [sl]
 8009ba8:	f1bb 0f00 	cmp.w	fp, #0
 8009bac:	d050      	beq.n	8009c50 <__hexnan+0x130>
 8009bae:	454c      	cmp	r4, r9
 8009bb0:	d206      	bcs.n	8009bc0 <__hexnan+0xa0>
 8009bb2:	2d07      	cmp	r5, #7
 8009bb4:	dc04      	bgt.n	8009bc0 <__hexnan+0xa0>
 8009bb6:	462a      	mov	r2, r5
 8009bb8:	4649      	mov	r1, r9
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f7ff ff8a 	bl	8009ad4 <L_shift>
 8009bc0:	4544      	cmp	r4, r8
 8009bc2:	d934      	bls.n	8009c2e <__hexnan+0x10e>
 8009bc4:	4623      	mov	r3, r4
 8009bc6:	f1a8 0204 	sub.w	r2, r8, #4
 8009bca:	f853 1b04 	ldr.w	r1, [r3], #4
 8009bce:	429f      	cmp	r7, r3
 8009bd0:	f842 1f04 	str.w	r1, [r2, #4]!
 8009bd4:	d2f9      	bcs.n	8009bca <__hexnan+0xaa>
 8009bd6:	1b3b      	subs	r3, r7, r4
 8009bd8:	f023 0303 	bic.w	r3, r3, #3
 8009bdc:	3304      	adds	r3, #4
 8009bde:	3401      	adds	r4, #1
 8009be0:	3e03      	subs	r6, #3
 8009be2:	42b4      	cmp	r4, r6
 8009be4:	bf88      	it	hi
 8009be6:	2304      	movhi	r3, #4
 8009be8:	2200      	movs	r2, #0
 8009bea:	4443      	add	r3, r8
 8009bec:	f843 2b04 	str.w	r2, [r3], #4
 8009bf0:	429f      	cmp	r7, r3
 8009bf2:	d2fb      	bcs.n	8009bec <__hexnan+0xcc>
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	b91b      	cbnz	r3, 8009c00 <__hexnan+0xe0>
 8009bf8:	4547      	cmp	r7, r8
 8009bfa:	d127      	bne.n	8009c4c <__hexnan+0x12c>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	603b      	str	r3, [r7, #0]
 8009c00:	2005      	movs	r0, #5
 8009c02:	e026      	b.n	8009c52 <__hexnan+0x132>
 8009c04:	3501      	adds	r5, #1
 8009c06:	2d08      	cmp	r5, #8
 8009c08:	f10b 0b01 	add.w	fp, fp, #1
 8009c0c:	dd06      	ble.n	8009c1c <__hexnan+0xfc>
 8009c0e:	4544      	cmp	r4, r8
 8009c10:	d9c3      	bls.n	8009b9a <__hexnan+0x7a>
 8009c12:	2300      	movs	r3, #0
 8009c14:	2501      	movs	r5, #1
 8009c16:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c1a:	3c04      	subs	r4, #4
 8009c1c:	6822      	ldr	r2, [r4, #0]
 8009c1e:	f000 000f 	and.w	r0, r0, #15
 8009c22:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009c26:	6022      	str	r2, [r4, #0]
 8009c28:	e7b7      	b.n	8009b9a <__hexnan+0x7a>
 8009c2a:	2508      	movs	r5, #8
 8009c2c:	e7b5      	b.n	8009b9a <__hexnan+0x7a>
 8009c2e:	9b01      	ldr	r3, [sp, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d0df      	beq.n	8009bf4 <__hexnan+0xd4>
 8009c34:	f04f 32ff 	mov.w	r2, #4294967295
 8009c38:	f1c3 0320 	rsb	r3, r3, #32
 8009c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009c44:	401a      	ands	r2, r3
 8009c46:	f846 2c04 	str.w	r2, [r6, #-4]
 8009c4a:	e7d3      	b.n	8009bf4 <__hexnan+0xd4>
 8009c4c:	3f04      	subs	r7, #4
 8009c4e:	e7d1      	b.n	8009bf4 <__hexnan+0xd4>
 8009c50:	2004      	movs	r0, #4
 8009c52:	b007      	add	sp, #28
 8009c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c58 <_localeconv_r>:
 8009c58:	4800      	ldr	r0, [pc, #0]	; (8009c5c <_localeconv_r+0x4>)
 8009c5a:	4770      	bx	lr
 8009c5c:	2000016c 	.word	0x2000016c

08009c60 <malloc>:
 8009c60:	4b02      	ldr	r3, [pc, #8]	; (8009c6c <malloc+0xc>)
 8009c62:	4601      	mov	r1, r0
 8009c64:	6818      	ldr	r0, [r3, #0]
 8009c66:	f000 bd65 	b.w	800a734 <_malloc_r>
 8009c6a:	bf00      	nop
 8009c6c:	20000014 	.word	0x20000014

08009c70 <__ascii_mbtowc>:
 8009c70:	b082      	sub	sp, #8
 8009c72:	b901      	cbnz	r1, 8009c76 <__ascii_mbtowc+0x6>
 8009c74:	a901      	add	r1, sp, #4
 8009c76:	b142      	cbz	r2, 8009c8a <__ascii_mbtowc+0x1a>
 8009c78:	b14b      	cbz	r3, 8009c8e <__ascii_mbtowc+0x1e>
 8009c7a:	7813      	ldrb	r3, [r2, #0]
 8009c7c:	600b      	str	r3, [r1, #0]
 8009c7e:	7812      	ldrb	r2, [r2, #0]
 8009c80:	1e10      	subs	r0, r2, #0
 8009c82:	bf18      	it	ne
 8009c84:	2001      	movne	r0, #1
 8009c86:	b002      	add	sp, #8
 8009c88:	4770      	bx	lr
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	e7fb      	b.n	8009c86 <__ascii_mbtowc+0x16>
 8009c8e:	f06f 0001 	mvn.w	r0, #1
 8009c92:	e7f8      	b.n	8009c86 <__ascii_mbtowc+0x16>

08009c94 <memchr>:
 8009c94:	4603      	mov	r3, r0
 8009c96:	b510      	push	{r4, lr}
 8009c98:	b2c9      	uxtb	r1, r1
 8009c9a:	4402      	add	r2, r0
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	d101      	bne.n	8009ca6 <memchr+0x12>
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	e003      	b.n	8009cae <memchr+0x1a>
 8009ca6:	7804      	ldrb	r4, [r0, #0]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	428c      	cmp	r4, r1
 8009cac:	d1f6      	bne.n	8009c9c <memchr+0x8>
 8009cae:	bd10      	pop	{r4, pc}

08009cb0 <memcpy>:
 8009cb0:	440a      	add	r2, r1
 8009cb2:	4291      	cmp	r1, r2
 8009cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cb8:	d100      	bne.n	8009cbc <memcpy+0xc>
 8009cba:	4770      	bx	lr
 8009cbc:	b510      	push	{r4, lr}
 8009cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cc2:	4291      	cmp	r1, r2
 8009cc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cc8:	d1f9      	bne.n	8009cbe <memcpy+0xe>
 8009cca:	bd10      	pop	{r4, pc}

08009ccc <_Balloc>:
 8009ccc:	b570      	push	{r4, r5, r6, lr}
 8009cce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	460d      	mov	r5, r1
 8009cd4:	b976      	cbnz	r6, 8009cf4 <_Balloc+0x28>
 8009cd6:	2010      	movs	r0, #16
 8009cd8:	f7ff ffc2 	bl	8009c60 <malloc>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	6260      	str	r0, [r4, #36]	; 0x24
 8009ce0:	b920      	cbnz	r0, 8009cec <_Balloc+0x20>
 8009ce2:	2166      	movs	r1, #102	; 0x66
 8009ce4:	4b17      	ldr	r3, [pc, #92]	; (8009d44 <_Balloc+0x78>)
 8009ce6:	4818      	ldr	r0, [pc, #96]	; (8009d48 <_Balloc+0x7c>)
 8009ce8:	f000 ff2c 	bl	800ab44 <__assert_func>
 8009cec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cf0:	6006      	str	r6, [r0, #0]
 8009cf2:	60c6      	str	r6, [r0, #12]
 8009cf4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009cf6:	68f3      	ldr	r3, [r6, #12]
 8009cf8:	b183      	cbz	r3, 8009d1c <_Balloc+0x50>
 8009cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d02:	b9b8      	cbnz	r0, 8009d34 <_Balloc+0x68>
 8009d04:	2101      	movs	r1, #1
 8009d06:	fa01 f605 	lsl.w	r6, r1, r5
 8009d0a:	1d72      	adds	r2, r6, #5
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	0092      	lsls	r2, r2, #2
 8009d10:	f000 fc94 	bl	800a63c <_calloc_r>
 8009d14:	b160      	cbz	r0, 8009d30 <_Balloc+0x64>
 8009d16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d1a:	e00e      	b.n	8009d3a <_Balloc+0x6e>
 8009d1c:	2221      	movs	r2, #33	; 0x21
 8009d1e:	2104      	movs	r1, #4
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 fc8b 	bl	800a63c <_calloc_r>
 8009d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d28:	60f0      	str	r0, [r6, #12]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1e4      	bne.n	8009cfa <_Balloc+0x2e>
 8009d30:	2000      	movs	r0, #0
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	6802      	ldr	r2, [r0, #0]
 8009d36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d40:	e7f7      	b.n	8009d32 <_Balloc+0x66>
 8009d42:	bf00      	nop
 8009d44:	0800c0d5 	.word	0x0800c0d5
 8009d48:	0800c1d4 	.word	0x0800c1d4

08009d4c <_Bfree>:
 8009d4c:	b570      	push	{r4, r5, r6, lr}
 8009d4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d50:	4605      	mov	r5, r0
 8009d52:	460c      	mov	r4, r1
 8009d54:	b976      	cbnz	r6, 8009d74 <_Bfree+0x28>
 8009d56:	2010      	movs	r0, #16
 8009d58:	f7ff ff82 	bl	8009c60 <malloc>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	6268      	str	r0, [r5, #36]	; 0x24
 8009d60:	b920      	cbnz	r0, 8009d6c <_Bfree+0x20>
 8009d62:	218a      	movs	r1, #138	; 0x8a
 8009d64:	4b08      	ldr	r3, [pc, #32]	; (8009d88 <_Bfree+0x3c>)
 8009d66:	4809      	ldr	r0, [pc, #36]	; (8009d8c <_Bfree+0x40>)
 8009d68:	f000 feec 	bl	800ab44 <__assert_func>
 8009d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d70:	6006      	str	r6, [r0, #0]
 8009d72:	60c6      	str	r6, [r0, #12]
 8009d74:	b13c      	cbz	r4, 8009d86 <_Bfree+0x3a>
 8009d76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d78:	6862      	ldr	r2, [r4, #4]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d80:	6021      	str	r1, [r4, #0]
 8009d82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	0800c0d5 	.word	0x0800c0d5
 8009d8c:	0800c1d4 	.word	0x0800c1d4

08009d90 <__multadd>:
 8009d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d94:	4607      	mov	r7, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	461e      	mov	r6, r3
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	690d      	ldr	r5, [r1, #16]
 8009d9e:	f101 0c14 	add.w	ip, r1, #20
 8009da2:	f8dc 3000 	ldr.w	r3, [ip]
 8009da6:	3001      	adds	r0, #1
 8009da8:	b299      	uxth	r1, r3
 8009daa:	fb02 6101 	mla	r1, r2, r1, r6
 8009dae:	0c1e      	lsrs	r6, r3, #16
 8009db0:	0c0b      	lsrs	r3, r1, #16
 8009db2:	fb02 3306 	mla	r3, r2, r6, r3
 8009db6:	b289      	uxth	r1, r1
 8009db8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009dbc:	4285      	cmp	r5, r0
 8009dbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009dc2:	f84c 1b04 	str.w	r1, [ip], #4
 8009dc6:	dcec      	bgt.n	8009da2 <__multadd+0x12>
 8009dc8:	b30e      	cbz	r6, 8009e0e <__multadd+0x7e>
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	42ab      	cmp	r3, r5
 8009dce:	dc19      	bgt.n	8009e04 <__multadd+0x74>
 8009dd0:	6861      	ldr	r1, [r4, #4]
 8009dd2:	4638      	mov	r0, r7
 8009dd4:	3101      	adds	r1, #1
 8009dd6:	f7ff ff79 	bl	8009ccc <_Balloc>
 8009dda:	4680      	mov	r8, r0
 8009ddc:	b928      	cbnz	r0, 8009dea <__multadd+0x5a>
 8009dde:	4602      	mov	r2, r0
 8009de0:	21b5      	movs	r1, #181	; 0xb5
 8009de2:	4b0c      	ldr	r3, [pc, #48]	; (8009e14 <__multadd+0x84>)
 8009de4:	480c      	ldr	r0, [pc, #48]	; (8009e18 <__multadd+0x88>)
 8009de6:	f000 fead 	bl	800ab44 <__assert_func>
 8009dea:	6922      	ldr	r2, [r4, #16]
 8009dec:	f104 010c 	add.w	r1, r4, #12
 8009df0:	3202      	adds	r2, #2
 8009df2:	0092      	lsls	r2, r2, #2
 8009df4:	300c      	adds	r0, #12
 8009df6:	f7ff ff5b 	bl	8009cb0 <memcpy>
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	f7ff ffa5 	bl	8009d4c <_Bfree>
 8009e02:	4644      	mov	r4, r8
 8009e04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e08:	3501      	adds	r5, #1
 8009e0a:	615e      	str	r6, [r3, #20]
 8009e0c:	6125      	str	r5, [r4, #16]
 8009e0e:	4620      	mov	r0, r4
 8009e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e14:	0800c147 	.word	0x0800c147
 8009e18:	0800c1d4 	.word	0x0800c1d4

08009e1c <__s2b>:
 8009e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e20:	4615      	mov	r5, r2
 8009e22:	2209      	movs	r2, #9
 8009e24:	461f      	mov	r7, r3
 8009e26:	3308      	adds	r3, #8
 8009e28:	460c      	mov	r4, r1
 8009e2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e2e:	4606      	mov	r6, r0
 8009e30:	2201      	movs	r2, #1
 8009e32:	2100      	movs	r1, #0
 8009e34:	429a      	cmp	r2, r3
 8009e36:	db09      	blt.n	8009e4c <__s2b+0x30>
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f7ff ff47 	bl	8009ccc <_Balloc>
 8009e3e:	b940      	cbnz	r0, 8009e52 <__s2b+0x36>
 8009e40:	4602      	mov	r2, r0
 8009e42:	21ce      	movs	r1, #206	; 0xce
 8009e44:	4b18      	ldr	r3, [pc, #96]	; (8009ea8 <__s2b+0x8c>)
 8009e46:	4819      	ldr	r0, [pc, #100]	; (8009eac <__s2b+0x90>)
 8009e48:	f000 fe7c 	bl	800ab44 <__assert_func>
 8009e4c:	0052      	lsls	r2, r2, #1
 8009e4e:	3101      	adds	r1, #1
 8009e50:	e7f0      	b.n	8009e34 <__s2b+0x18>
 8009e52:	9b08      	ldr	r3, [sp, #32]
 8009e54:	2d09      	cmp	r5, #9
 8009e56:	6143      	str	r3, [r0, #20]
 8009e58:	f04f 0301 	mov.w	r3, #1
 8009e5c:	6103      	str	r3, [r0, #16]
 8009e5e:	dd16      	ble.n	8009e8e <__s2b+0x72>
 8009e60:	f104 0909 	add.w	r9, r4, #9
 8009e64:	46c8      	mov	r8, r9
 8009e66:	442c      	add	r4, r5
 8009e68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009e6c:	4601      	mov	r1, r0
 8009e6e:	220a      	movs	r2, #10
 8009e70:	4630      	mov	r0, r6
 8009e72:	3b30      	subs	r3, #48	; 0x30
 8009e74:	f7ff ff8c 	bl	8009d90 <__multadd>
 8009e78:	45a0      	cmp	r8, r4
 8009e7a:	d1f5      	bne.n	8009e68 <__s2b+0x4c>
 8009e7c:	f1a5 0408 	sub.w	r4, r5, #8
 8009e80:	444c      	add	r4, r9
 8009e82:	1b2d      	subs	r5, r5, r4
 8009e84:	1963      	adds	r3, r4, r5
 8009e86:	42bb      	cmp	r3, r7
 8009e88:	db04      	blt.n	8009e94 <__s2b+0x78>
 8009e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e8e:	2509      	movs	r5, #9
 8009e90:	340a      	adds	r4, #10
 8009e92:	e7f6      	b.n	8009e82 <__s2b+0x66>
 8009e94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e98:	4601      	mov	r1, r0
 8009e9a:	220a      	movs	r2, #10
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	3b30      	subs	r3, #48	; 0x30
 8009ea0:	f7ff ff76 	bl	8009d90 <__multadd>
 8009ea4:	e7ee      	b.n	8009e84 <__s2b+0x68>
 8009ea6:	bf00      	nop
 8009ea8:	0800c147 	.word	0x0800c147
 8009eac:	0800c1d4 	.word	0x0800c1d4

08009eb0 <__hi0bits>:
 8009eb0:	0c02      	lsrs	r2, r0, #16
 8009eb2:	0412      	lsls	r2, r2, #16
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	b9ca      	cbnz	r2, 8009eec <__hi0bits+0x3c>
 8009eb8:	0403      	lsls	r3, r0, #16
 8009eba:	2010      	movs	r0, #16
 8009ebc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009ec0:	bf04      	itt	eq
 8009ec2:	021b      	lsleq	r3, r3, #8
 8009ec4:	3008      	addeq	r0, #8
 8009ec6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009eca:	bf04      	itt	eq
 8009ecc:	011b      	lsleq	r3, r3, #4
 8009ece:	3004      	addeq	r0, #4
 8009ed0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009ed4:	bf04      	itt	eq
 8009ed6:	009b      	lsleq	r3, r3, #2
 8009ed8:	3002      	addeq	r0, #2
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	db05      	blt.n	8009eea <__hi0bits+0x3a>
 8009ede:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009ee2:	f100 0001 	add.w	r0, r0, #1
 8009ee6:	bf08      	it	eq
 8009ee8:	2020      	moveq	r0, #32
 8009eea:	4770      	bx	lr
 8009eec:	2000      	movs	r0, #0
 8009eee:	e7e5      	b.n	8009ebc <__hi0bits+0xc>

08009ef0 <__lo0bits>:
 8009ef0:	6803      	ldr	r3, [r0, #0]
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	f013 0007 	ands.w	r0, r3, #7
 8009ef8:	d00b      	beq.n	8009f12 <__lo0bits+0x22>
 8009efa:	07d9      	lsls	r1, r3, #31
 8009efc:	d421      	bmi.n	8009f42 <__lo0bits+0x52>
 8009efe:	0798      	lsls	r0, r3, #30
 8009f00:	bf49      	itett	mi
 8009f02:	085b      	lsrmi	r3, r3, #1
 8009f04:	089b      	lsrpl	r3, r3, #2
 8009f06:	2001      	movmi	r0, #1
 8009f08:	6013      	strmi	r3, [r2, #0]
 8009f0a:	bf5c      	itt	pl
 8009f0c:	2002      	movpl	r0, #2
 8009f0e:	6013      	strpl	r3, [r2, #0]
 8009f10:	4770      	bx	lr
 8009f12:	b299      	uxth	r1, r3
 8009f14:	b909      	cbnz	r1, 8009f1a <__lo0bits+0x2a>
 8009f16:	2010      	movs	r0, #16
 8009f18:	0c1b      	lsrs	r3, r3, #16
 8009f1a:	b2d9      	uxtb	r1, r3
 8009f1c:	b909      	cbnz	r1, 8009f22 <__lo0bits+0x32>
 8009f1e:	3008      	adds	r0, #8
 8009f20:	0a1b      	lsrs	r3, r3, #8
 8009f22:	0719      	lsls	r1, r3, #28
 8009f24:	bf04      	itt	eq
 8009f26:	091b      	lsreq	r3, r3, #4
 8009f28:	3004      	addeq	r0, #4
 8009f2a:	0799      	lsls	r1, r3, #30
 8009f2c:	bf04      	itt	eq
 8009f2e:	089b      	lsreq	r3, r3, #2
 8009f30:	3002      	addeq	r0, #2
 8009f32:	07d9      	lsls	r1, r3, #31
 8009f34:	d403      	bmi.n	8009f3e <__lo0bits+0x4e>
 8009f36:	085b      	lsrs	r3, r3, #1
 8009f38:	f100 0001 	add.w	r0, r0, #1
 8009f3c:	d003      	beq.n	8009f46 <__lo0bits+0x56>
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	4770      	bx	lr
 8009f42:	2000      	movs	r0, #0
 8009f44:	4770      	bx	lr
 8009f46:	2020      	movs	r0, #32
 8009f48:	4770      	bx	lr
	...

08009f4c <__i2b>:
 8009f4c:	b510      	push	{r4, lr}
 8009f4e:	460c      	mov	r4, r1
 8009f50:	2101      	movs	r1, #1
 8009f52:	f7ff febb 	bl	8009ccc <_Balloc>
 8009f56:	4602      	mov	r2, r0
 8009f58:	b928      	cbnz	r0, 8009f66 <__i2b+0x1a>
 8009f5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f5e:	4b04      	ldr	r3, [pc, #16]	; (8009f70 <__i2b+0x24>)
 8009f60:	4804      	ldr	r0, [pc, #16]	; (8009f74 <__i2b+0x28>)
 8009f62:	f000 fdef 	bl	800ab44 <__assert_func>
 8009f66:	2301      	movs	r3, #1
 8009f68:	6144      	str	r4, [r0, #20]
 8009f6a:	6103      	str	r3, [r0, #16]
 8009f6c:	bd10      	pop	{r4, pc}
 8009f6e:	bf00      	nop
 8009f70:	0800c147 	.word	0x0800c147
 8009f74:	0800c1d4 	.word	0x0800c1d4

08009f78 <__multiply>:
 8009f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	4691      	mov	r9, r2
 8009f7e:	690a      	ldr	r2, [r1, #16]
 8009f80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f84:	460c      	mov	r4, r1
 8009f86:	429a      	cmp	r2, r3
 8009f88:	bfbe      	ittt	lt
 8009f8a:	460b      	movlt	r3, r1
 8009f8c:	464c      	movlt	r4, r9
 8009f8e:	4699      	movlt	r9, r3
 8009f90:	6927      	ldr	r7, [r4, #16]
 8009f92:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f96:	68a3      	ldr	r3, [r4, #8]
 8009f98:	6861      	ldr	r1, [r4, #4]
 8009f9a:	eb07 060a 	add.w	r6, r7, sl
 8009f9e:	42b3      	cmp	r3, r6
 8009fa0:	b085      	sub	sp, #20
 8009fa2:	bfb8      	it	lt
 8009fa4:	3101      	addlt	r1, #1
 8009fa6:	f7ff fe91 	bl	8009ccc <_Balloc>
 8009faa:	b930      	cbnz	r0, 8009fba <__multiply+0x42>
 8009fac:	4602      	mov	r2, r0
 8009fae:	f240 115d 	movw	r1, #349	; 0x15d
 8009fb2:	4b43      	ldr	r3, [pc, #268]	; (800a0c0 <__multiply+0x148>)
 8009fb4:	4843      	ldr	r0, [pc, #268]	; (800a0c4 <__multiply+0x14c>)
 8009fb6:	f000 fdc5 	bl	800ab44 <__assert_func>
 8009fba:	f100 0514 	add.w	r5, r0, #20
 8009fbe:	462b      	mov	r3, r5
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fc6:	4543      	cmp	r3, r8
 8009fc8:	d321      	bcc.n	800a00e <__multiply+0x96>
 8009fca:	f104 0314 	add.w	r3, r4, #20
 8009fce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009fd2:	f109 0314 	add.w	r3, r9, #20
 8009fd6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009fda:	9202      	str	r2, [sp, #8]
 8009fdc:	1b3a      	subs	r2, r7, r4
 8009fde:	3a15      	subs	r2, #21
 8009fe0:	f022 0203 	bic.w	r2, r2, #3
 8009fe4:	3204      	adds	r2, #4
 8009fe6:	f104 0115 	add.w	r1, r4, #21
 8009fea:	428f      	cmp	r7, r1
 8009fec:	bf38      	it	cc
 8009fee:	2204      	movcc	r2, #4
 8009ff0:	9201      	str	r2, [sp, #4]
 8009ff2:	9a02      	ldr	r2, [sp, #8]
 8009ff4:	9303      	str	r3, [sp, #12]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d80c      	bhi.n	800a014 <__multiply+0x9c>
 8009ffa:	2e00      	cmp	r6, #0
 8009ffc:	dd03      	ble.n	800a006 <__multiply+0x8e>
 8009ffe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a002:	2b00      	cmp	r3, #0
 800a004:	d059      	beq.n	800a0ba <__multiply+0x142>
 800a006:	6106      	str	r6, [r0, #16]
 800a008:	b005      	add	sp, #20
 800a00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00e:	f843 2b04 	str.w	r2, [r3], #4
 800a012:	e7d8      	b.n	8009fc6 <__multiply+0x4e>
 800a014:	f8b3 a000 	ldrh.w	sl, [r3]
 800a018:	f1ba 0f00 	cmp.w	sl, #0
 800a01c:	d023      	beq.n	800a066 <__multiply+0xee>
 800a01e:	46a9      	mov	r9, r5
 800a020:	f04f 0c00 	mov.w	ip, #0
 800a024:	f104 0e14 	add.w	lr, r4, #20
 800a028:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a02c:	f8d9 1000 	ldr.w	r1, [r9]
 800a030:	fa1f fb82 	uxth.w	fp, r2
 800a034:	b289      	uxth	r1, r1
 800a036:	fb0a 110b 	mla	r1, sl, fp, r1
 800a03a:	4461      	add	r1, ip
 800a03c:	f8d9 c000 	ldr.w	ip, [r9]
 800a040:	0c12      	lsrs	r2, r2, #16
 800a042:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a046:	fb0a c202 	mla	r2, sl, r2, ip
 800a04a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a04e:	b289      	uxth	r1, r1
 800a050:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a054:	4577      	cmp	r7, lr
 800a056:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a05a:	f849 1b04 	str.w	r1, [r9], #4
 800a05e:	d8e3      	bhi.n	800a028 <__multiply+0xb0>
 800a060:	9a01      	ldr	r2, [sp, #4]
 800a062:	f845 c002 	str.w	ip, [r5, r2]
 800a066:	9a03      	ldr	r2, [sp, #12]
 800a068:	3304      	adds	r3, #4
 800a06a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a06e:	f1b9 0f00 	cmp.w	r9, #0
 800a072:	d020      	beq.n	800a0b6 <__multiply+0x13e>
 800a074:	46ae      	mov	lr, r5
 800a076:	f04f 0a00 	mov.w	sl, #0
 800a07a:	6829      	ldr	r1, [r5, #0]
 800a07c:	f104 0c14 	add.w	ip, r4, #20
 800a080:	f8bc b000 	ldrh.w	fp, [ip]
 800a084:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a088:	b289      	uxth	r1, r1
 800a08a:	fb09 220b 	mla	r2, r9, fp, r2
 800a08e:	4492      	add	sl, r2
 800a090:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a094:	f84e 1b04 	str.w	r1, [lr], #4
 800a098:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a09c:	f8be 1000 	ldrh.w	r1, [lr]
 800a0a0:	0c12      	lsrs	r2, r2, #16
 800a0a2:	fb09 1102 	mla	r1, r9, r2, r1
 800a0a6:	4567      	cmp	r7, ip
 800a0a8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a0ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0b0:	d8e6      	bhi.n	800a080 <__multiply+0x108>
 800a0b2:	9a01      	ldr	r2, [sp, #4]
 800a0b4:	50a9      	str	r1, [r5, r2]
 800a0b6:	3504      	adds	r5, #4
 800a0b8:	e79b      	b.n	8009ff2 <__multiply+0x7a>
 800a0ba:	3e01      	subs	r6, #1
 800a0bc:	e79d      	b.n	8009ffa <__multiply+0x82>
 800a0be:	bf00      	nop
 800a0c0:	0800c147 	.word	0x0800c147
 800a0c4:	0800c1d4 	.word	0x0800c1d4

0800a0c8 <__pow5mult>:
 800a0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0cc:	4615      	mov	r5, r2
 800a0ce:	f012 0203 	ands.w	r2, r2, #3
 800a0d2:	4606      	mov	r6, r0
 800a0d4:	460f      	mov	r7, r1
 800a0d6:	d007      	beq.n	800a0e8 <__pow5mult+0x20>
 800a0d8:	4c25      	ldr	r4, [pc, #148]	; (800a170 <__pow5mult+0xa8>)
 800a0da:	3a01      	subs	r2, #1
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0e2:	f7ff fe55 	bl	8009d90 <__multadd>
 800a0e6:	4607      	mov	r7, r0
 800a0e8:	10ad      	asrs	r5, r5, #2
 800a0ea:	d03d      	beq.n	800a168 <__pow5mult+0xa0>
 800a0ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a0ee:	b97c      	cbnz	r4, 800a110 <__pow5mult+0x48>
 800a0f0:	2010      	movs	r0, #16
 800a0f2:	f7ff fdb5 	bl	8009c60 <malloc>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	6270      	str	r0, [r6, #36]	; 0x24
 800a0fa:	b928      	cbnz	r0, 800a108 <__pow5mult+0x40>
 800a0fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a100:	4b1c      	ldr	r3, [pc, #112]	; (800a174 <__pow5mult+0xac>)
 800a102:	481d      	ldr	r0, [pc, #116]	; (800a178 <__pow5mult+0xb0>)
 800a104:	f000 fd1e 	bl	800ab44 <__assert_func>
 800a108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a10c:	6004      	str	r4, [r0, #0]
 800a10e:	60c4      	str	r4, [r0, #12]
 800a110:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a118:	b94c      	cbnz	r4, 800a12e <__pow5mult+0x66>
 800a11a:	f240 2171 	movw	r1, #625	; 0x271
 800a11e:	4630      	mov	r0, r6
 800a120:	f7ff ff14 	bl	8009f4c <__i2b>
 800a124:	2300      	movs	r3, #0
 800a126:	4604      	mov	r4, r0
 800a128:	f8c8 0008 	str.w	r0, [r8, #8]
 800a12c:	6003      	str	r3, [r0, #0]
 800a12e:	f04f 0900 	mov.w	r9, #0
 800a132:	07eb      	lsls	r3, r5, #31
 800a134:	d50a      	bpl.n	800a14c <__pow5mult+0x84>
 800a136:	4639      	mov	r1, r7
 800a138:	4622      	mov	r2, r4
 800a13a:	4630      	mov	r0, r6
 800a13c:	f7ff ff1c 	bl	8009f78 <__multiply>
 800a140:	4680      	mov	r8, r0
 800a142:	4639      	mov	r1, r7
 800a144:	4630      	mov	r0, r6
 800a146:	f7ff fe01 	bl	8009d4c <_Bfree>
 800a14a:	4647      	mov	r7, r8
 800a14c:	106d      	asrs	r5, r5, #1
 800a14e:	d00b      	beq.n	800a168 <__pow5mult+0xa0>
 800a150:	6820      	ldr	r0, [r4, #0]
 800a152:	b938      	cbnz	r0, 800a164 <__pow5mult+0x9c>
 800a154:	4622      	mov	r2, r4
 800a156:	4621      	mov	r1, r4
 800a158:	4630      	mov	r0, r6
 800a15a:	f7ff ff0d 	bl	8009f78 <__multiply>
 800a15e:	6020      	str	r0, [r4, #0]
 800a160:	f8c0 9000 	str.w	r9, [r0]
 800a164:	4604      	mov	r4, r0
 800a166:	e7e4      	b.n	800a132 <__pow5mult+0x6a>
 800a168:	4638      	mov	r0, r7
 800a16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a16e:	bf00      	nop
 800a170:	0800c320 	.word	0x0800c320
 800a174:	0800c0d5 	.word	0x0800c0d5
 800a178:	0800c1d4 	.word	0x0800c1d4

0800a17c <__lshift>:
 800a17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a180:	460c      	mov	r4, r1
 800a182:	4607      	mov	r7, r0
 800a184:	4691      	mov	r9, r2
 800a186:	6923      	ldr	r3, [r4, #16]
 800a188:	6849      	ldr	r1, [r1, #4]
 800a18a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a18e:	68a3      	ldr	r3, [r4, #8]
 800a190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a194:	f108 0601 	add.w	r6, r8, #1
 800a198:	42b3      	cmp	r3, r6
 800a19a:	db0b      	blt.n	800a1b4 <__lshift+0x38>
 800a19c:	4638      	mov	r0, r7
 800a19e:	f7ff fd95 	bl	8009ccc <_Balloc>
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	b948      	cbnz	r0, 800a1ba <__lshift+0x3e>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a1ac:	4b29      	ldr	r3, [pc, #164]	; (800a254 <__lshift+0xd8>)
 800a1ae:	482a      	ldr	r0, [pc, #168]	; (800a258 <__lshift+0xdc>)
 800a1b0:	f000 fcc8 	bl	800ab44 <__assert_func>
 800a1b4:	3101      	adds	r1, #1
 800a1b6:	005b      	lsls	r3, r3, #1
 800a1b8:	e7ee      	b.n	800a198 <__lshift+0x1c>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f100 0114 	add.w	r1, r0, #20
 800a1c0:	f100 0210 	add.w	r2, r0, #16
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	4553      	cmp	r3, sl
 800a1c8:	db37      	blt.n	800a23a <__lshift+0xbe>
 800a1ca:	6920      	ldr	r0, [r4, #16]
 800a1cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1d0:	f104 0314 	add.w	r3, r4, #20
 800a1d4:	f019 091f 	ands.w	r9, r9, #31
 800a1d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a1e0:	d02f      	beq.n	800a242 <__lshift+0xc6>
 800a1e2:	468a      	mov	sl, r1
 800a1e4:	f04f 0c00 	mov.w	ip, #0
 800a1e8:	f1c9 0e20 	rsb	lr, r9, #32
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	fa02 f209 	lsl.w	r2, r2, r9
 800a1f2:	ea42 020c 	orr.w	r2, r2, ip
 800a1f6:	f84a 2b04 	str.w	r2, [sl], #4
 800a1fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1fe:	4298      	cmp	r0, r3
 800a200:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a204:	d8f2      	bhi.n	800a1ec <__lshift+0x70>
 800a206:	1b03      	subs	r3, r0, r4
 800a208:	3b15      	subs	r3, #21
 800a20a:	f023 0303 	bic.w	r3, r3, #3
 800a20e:	3304      	adds	r3, #4
 800a210:	f104 0215 	add.w	r2, r4, #21
 800a214:	4290      	cmp	r0, r2
 800a216:	bf38      	it	cc
 800a218:	2304      	movcc	r3, #4
 800a21a:	f841 c003 	str.w	ip, [r1, r3]
 800a21e:	f1bc 0f00 	cmp.w	ip, #0
 800a222:	d001      	beq.n	800a228 <__lshift+0xac>
 800a224:	f108 0602 	add.w	r6, r8, #2
 800a228:	3e01      	subs	r6, #1
 800a22a:	4638      	mov	r0, r7
 800a22c:	4621      	mov	r1, r4
 800a22e:	612e      	str	r6, [r5, #16]
 800a230:	f7ff fd8c 	bl	8009d4c <_Bfree>
 800a234:	4628      	mov	r0, r5
 800a236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a23a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a23e:	3301      	adds	r3, #1
 800a240:	e7c1      	b.n	800a1c6 <__lshift+0x4a>
 800a242:	3904      	subs	r1, #4
 800a244:	f853 2b04 	ldr.w	r2, [r3], #4
 800a248:	4298      	cmp	r0, r3
 800a24a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a24e:	d8f9      	bhi.n	800a244 <__lshift+0xc8>
 800a250:	e7ea      	b.n	800a228 <__lshift+0xac>
 800a252:	bf00      	nop
 800a254:	0800c147 	.word	0x0800c147
 800a258:	0800c1d4 	.word	0x0800c1d4

0800a25c <__mcmp>:
 800a25c:	4603      	mov	r3, r0
 800a25e:	690a      	ldr	r2, [r1, #16]
 800a260:	6900      	ldr	r0, [r0, #16]
 800a262:	b530      	push	{r4, r5, lr}
 800a264:	1a80      	subs	r0, r0, r2
 800a266:	d10d      	bne.n	800a284 <__mcmp+0x28>
 800a268:	3314      	adds	r3, #20
 800a26a:	3114      	adds	r1, #20
 800a26c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a270:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a274:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a278:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a27c:	4295      	cmp	r5, r2
 800a27e:	d002      	beq.n	800a286 <__mcmp+0x2a>
 800a280:	d304      	bcc.n	800a28c <__mcmp+0x30>
 800a282:	2001      	movs	r0, #1
 800a284:	bd30      	pop	{r4, r5, pc}
 800a286:	42a3      	cmp	r3, r4
 800a288:	d3f4      	bcc.n	800a274 <__mcmp+0x18>
 800a28a:	e7fb      	b.n	800a284 <__mcmp+0x28>
 800a28c:	f04f 30ff 	mov.w	r0, #4294967295
 800a290:	e7f8      	b.n	800a284 <__mcmp+0x28>
	...

0800a294 <__mdiff>:
 800a294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a298:	460d      	mov	r5, r1
 800a29a:	4607      	mov	r7, r0
 800a29c:	4611      	mov	r1, r2
 800a29e:	4628      	mov	r0, r5
 800a2a0:	4614      	mov	r4, r2
 800a2a2:	f7ff ffdb 	bl	800a25c <__mcmp>
 800a2a6:	1e06      	subs	r6, r0, #0
 800a2a8:	d111      	bne.n	800a2ce <__mdiff+0x3a>
 800a2aa:	4631      	mov	r1, r6
 800a2ac:	4638      	mov	r0, r7
 800a2ae:	f7ff fd0d 	bl	8009ccc <_Balloc>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	b928      	cbnz	r0, 800a2c2 <__mdiff+0x2e>
 800a2b6:	f240 2132 	movw	r1, #562	; 0x232
 800a2ba:	4b3a      	ldr	r3, [pc, #232]	; (800a3a4 <__mdiff+0x110>)
 800a2bc:	483a      	ldr	r0, [pc, #232]	; (800a3a8 <__mdiff+0x114>)
 800a2be:	f000 fc41 	bl	800ab44 <__assert_func>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ce:	bfa4      	itt	ge
 800a2d0:	4623      	movge	r3, r4
 800a2d2:	462c      	movge	r4, r5
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	6861      	ldr	r1, [r4, #4]
 800a2d8:	bfa6      	itte	ge
 800a2da:	461d      	movge	r5, r3
 800a2dc:	2600      	movge	r6, #0
 800a2de:	2601      	movlt	r6, #1
 800a2e0:	f7ff fcf4 	bl	8009ccc <_Balloc>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	b918      	cbnz	r0, 800a2f0 <__mdiff+0x5c>
 800a2e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a2ec:	4b2d      	ldr	r3, [pc, #180]	; (800a3a4 <__mdiff+0x110>)
 800a2ee:	e7e5      	b.n	800a2bc <__mdiff+0x28>
 800a2f0:	f102 0814 	add.w	r8, r2, #20
 800a2f4:	46c2      	mov	sl, r8
 800a2f6:	f04f 0c00 	mov.w	ip, #0
 800a2fa:	6927      	ldr	r7, [r4, #16]
 800a2fc:	60c6      	str	r6, [r0, #12]
 800a2fe:	692e      	ldr	r6, [r5, #16]
 800a300:	f104 0014 	add.w	r0, r4, #20
 800a304:	f105 0914 	add.w	r9, r5, #20
 800a308:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a30c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a310:	3410      	adds	r4, #16
 800a312:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a316:	f859 3b04 	ldr.w	r3, [r9], #4
 800a31a:	fa1f f18b 	uxth.w	r1, fp
 800a31e:	448c      	add	ip, r1
 800a320:	b299      	uxth	r1, r3
 800a322:	0c1b      	lsrs	r3, r3, #16
 800a324:	ebac 0101 	sub.w	r1, ip, r1
 800a328:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a32c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a330:	b289      	uxth	r1, r1
 800a332:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a336:	454e      	cmp	r6, r9
 800a338:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a33c:	f84a 3b04 	str.w	r3, [sl], #4
 800a340:	d8e7      	bhi.n	800a312 <__mdiff+0x7e>
 800a342:	1b73      	subs	r3, r6, r5
 800a344:	3b15      	subs	r3, #21
 800a346:	f023 0303 	bic.w	r3, r3, #3
 800a34a:	3515      	adds	r5, #21
 800a34c:	3304      	adds	r3, #4
 800a34e:	42ae      	cmp	r6, r5
 800a350:	bf38      	it	cc
 800a352:	2304      	movcc	r3, #4
 800a354:	4418      	add	r0, r3
 800a356:	4443      	add	r3, r8
 800a358:	461e      	mov	r6, r3
 800a35a:	4605      	mov	r5, r0
 800a35c:	4575      	cmp	r5, lr
 800a35e:	d30e      	bcc.n	800a37e <__mdiff+0xea>
 800a360:	f10e 0103 	add.w	r1, lr, #3
 800a364:	1a09      	subs	r1, r1, r0
 800a366:	f021 0103 	bic.w	r1, r1, #3
 800a36a:	3803      	subs	r0, #3
 800a36c:	4586      	cmp	lr, r0
 800a36e:	bf38      	it	cc
 800a370:	2100      	movcc	r1, #0
 800a372:	4419      	add	r1, r3
 800a374:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a378:	b18b      	cbz	r3, 800a39e <__mdiff+0x10a>
 800a37a:	6117      	str	r7, [r2, #16]
 800a37c:	e7a4      	b.n	800a2c8 <__mdiff+0x34>
 800a37e:	f855 8b04 	ldr.w	r8, [r5], #4
 800a382:	fa1f f188 	uxth.w	r1, r8
 800a386:	4461      	add	r1, ip
 800a388:	140c      	asrs	r4, r1, #16
 800a38a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a38e:	b289      	uxth	r1, r1
 800a390:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a394:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a398:	f846 1b04 	str.w	r1, [r6], #4
 800a39c:	e7de      	b.n	800a35c <__mdiff+0xc8>
 800a39e:	3f01      	subs	r7, #1
 800a3a0:	e7e8      	b.n	800a374 <__mdiff+0xe0>
 800a3a2:	bf00      	nop
 800a3a4:	0800c147 	.word	0x0800c147
 800a3a8:	0800c1d4 	.word	0x0800c1d4

0800a3ac <__ulp>:
 800a3ac:	4b11      	ldr	r3, [pc, #68]	; (800a3f4 <__ulp+0x48>)
 800a3ae:	400b      	ands	r3, r1
 800a3b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dd02      	ble.n	800a3be <__ulp+0x12>
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	4770      	bx	lr
 800a3be:	425b      	negs	r3, r3
 800a3c0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a3c4:	f04f 0000 	mov.w	r0, #0
 800a3c8:	f04f 0100 	mov.w	r1, #0
 800a3cc:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a3d0:	da04      	bge.n	800a3dc <__ulp+0x30>
 800a3d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a3d6:	fa43 f102 	asr.w	r1, r3, r2
 800a3da:	4770      	bx	lr
 800a3dc:	f1a2 0314 	sub.w	r3, r2, #20
 800a3e0:	2b1e      	cmp	r3, #30
 800a3e2:	bfd6      	itet	le
 800a3e4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a3e8:	2301      	movgt	r3, #1
 800a3ea:	fa22 f303 	lsrle.w	r3, r2, r3
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	7ff00000 	.word	0x7ff00000

0800a3f8 <__b2d>:
 800a3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3fc:	6907      	ldr	r7, [r0, #16]
 800a3fe:	f100 0914 	add.w	r9, r0, #20
 800a402:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a406:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a40a:	f1a7 0804 	sub.w	r8, r7, #4
 800a40e:	4630      	mov	r0, r6
 800a410:	f7ff fd4e 	bl	8009eb0 <__hi0bits>
 800a414:	f1c0 0320 	rsb	r3, r0, #32
 800a418:	280a      	cmp	r0, #10
 800a41a:	600b      	str	r3, [r1, #0]
 800a41c:	491f      	ldr	r1, [pc, #124]	; (800a49c <__b2d+0xa4>)
 800a41e:	dc17      	bgt.n	800a450 <__b2d+0x58>
 800a420:	45c1      	cmp	r9, r8
 800a422:	bf28      	it	cs
 800a424:	2200      	movcs	r2, #0
 800a426:	f1c0 0c0b 	rsb	ip, r0, #11
 800a42a:	fa26 f30c 	lsr.w	r3, r6, ip
 800a42e:	bf38      	it	cc
 800a430:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a434:	ea43 0501 	orr.w	r5, r3, r1
 800a438:	f100 0315 	add.w	r3, r0, #21
 800a43c:	fa06 f303 	lsl.w	r3, r6, r3
 800a440:	fa22 f20c 	lsr.w	r2, r2, ip
 800a444:	ea43 0402 	orr.w	r4, r3, r2
 800a448:	4620      	mov	r0, r4
 800a44a:	4629      	mov	r1, r5
 800a44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a450:	45c1      	cmp	r9, r8
 800a452:	bf2e      	itee	cs
 800a454:	2200      	movcs	r2, #0
 800a456:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a45a:	f1a7 0808 	subcc.w	r8, r7, #8
 800a45e:	f1b0 030b 	subs.w	r3, r0, #11
 800a462:	d016      	beq.n	800a492 <__b2d+0x9a>
 800a464:	f1c3 0720 	rsb	r7, r3, #32
 800a468:	fa22 f107 	lsr.w	r1, r2, r7
 800a46c:	45c8      	cmp	r8, r9
 800a46e:	fa06 f603 	lsl.w	r6, r6, r3
 800a472:	ea46 0601 	orr.w	r6, r6, r1
 800a476:	bf94      	ite	ls
 800a478:	2100      	movls	r1, #0
 800a47a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a47e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a482:	fa02 f003 	lsl.w	r0, r2, r3
 800a486:	40f9      	lsrs	r1, r7
 800a488:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a48c:	ea40 0401 	orr.w	r4, r0, r1
 800a490:	e7da      	b.n	800a448 <__b2d+0x50>
 800a492:	4614      	mov	r4, r2
 800a494:	ea46 0501 	orr.w	r5, r6, r1
 800a498:	e7d6      	b.n	800a448 <__b2d+0x50>
 800a49a:	bf00      	nop
 800a49c:	3ff00000 	.word	0x3ff00000

0800a4a0 <__d2b>:
 800a4a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a4a4:	2101      	movs	r1, #1
 800a4a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a4aa:	4690      	mov	r8, r2
 800a4ac:	461d      	mov	r5, r3
 800a4ae:	f7ff fc0d 	bl	8009ccc <_Balloc>
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	b930      	cbnz	r0, 800a4c4 <__d2b+0x24>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	f240 310a 	movw	r1, #778	; 0x30a
 800a4bc:	4b24      	ldr	r3, [pc, #144]	; (800a550 <__d2b+0xb0>)
 800a4be:	4825      	ldr	r0, [pc, #148]	; (800a554 <__d2b+0xb4>)
 800a4c0:	f000 fb40 	bl	800ab44 <__assert_func>
 800a4c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a4c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a4cc:	bb2d      	cbnz	r5, 800a51a <__d2b+0x7a>
 800a4ce:	9301      	str	r3, [sp, #4]
 800a4d0:	f1b8 0300 	subs.w	r3, r8, #0
 800a4d4:	d026      	beq.n	800a524 <__d2b+0x84>
 800a4d6:	4668      	mov	r0, sp
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	f7ff fd09 	bl	8009ef0 <__lo0bits>
 800a4de:	9900      	ldr	r1, [sp, #0]
 800a4e0:	b1f0      	cbz	r0, 800a520 <__d2b+0x80>
 800a4e2:	9a01      	ldr	r2, [sp, #4]
 800a4e4:	f1c0 0320 	rsb	r3, r0, #32
 800a4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ec:	430b      	orrs	r3, r1
 800a4ee:	40c2      	lsrs	r2, r0
 800a4f0:	6163      	str	r3, [r4, #20]
 800a4f2:	9201      	str	r2, [sp, #4]
 800a4f4:	9b01      	ldr	r3, [sp, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	bf14      	ite	ne
 800a4fa:	2102      	movne	r1, #2
 800a4fc:	2101      	moveq	r1, #1
 800a4fe:	61a3      	str	r3, [r4, #24]
 800a500:	6121      	str	r1, [r4, #16]
 800a502:	b1c5      	cbz	r5, 800a536 <__d2b+0x96>
 800a504:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a508:	4405      	add	r5, r0
 800a50a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a50e:	603d      	str	r5, [r7, #0]
 800a510:	6030      	str	r0, [r6, #0]
 800a512:	4620      	mov	r0, r4
 800a514:	b002      	add	sp, #8
 800a516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a51a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a51e:	e7d6      	b.n	800a4ce <__d2b+0x2e>
 800a520:	6161      	str	r1, [r4, #20]
 800a522:	e7e7      	b.n	800a4f4 <__d2b+0x54>
 800a524:	a801      	add	r0, sp, #4
 800a526:	f7ff fce3 	bl	8009ef0 <__lo0bits>
 800a52a:	2101      	movs	r1, #1
 800a52c:	9b01      	ldr	r3, [sp, #4]
 800a52e:	6121      	str	r1, [r4, #16]
 800a530:	6163      	str	r3, [r4, #20]
 800a532:	3020      	adds	r0, #32
 800a534:	e7e5      	b.n	800a502 <__d2b+0x62>
 800a536:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a53a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a53e:	6038      	str	r0, [r7, #0]
 800a540:	6918      	ldr	r0, [r3, #16]
 800a542:	f7ff fcb5 	bl	8009eb0 <__hi0bits>
 800a546:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a54a:	6031      	str	r1, [r6, #0]
 800a54c:	e7e1      	b.n	800a512 <__d2b+0x72>
 800a54e:	bf00      	nop
 800a550:	0800c147 	.word	0x0800c147
 800a554:	0800c1d4 	.word	0x0800c1d4

0800a558 <__ratio>:
 800a558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	4688      	mov	r8, r1
 800a55e:	4669      	mov	r1, sp
 800a560:	4681      	mov	r9, r0
 800a562:	f7ff ff49 	bl	800a3f8 <__b2d>
 800a566:	460f      	mov	r7, r1
 800a568:	4604      	mov	r4, r0
 800a56a:	460d      	mov	r5, r1
 800a56c:	4640      	mov	r0, r8
 800a56e:	a901      	add	r1, sp, #4
 800a570:	f7ff ff42 	bl	800a3f8 <__b2d>
 800a574:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a578:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a57c:	468b      	mov	fp, r1
 800a57e:	eba3 0c02 	sub.w	ip, r3, r2
 800a582:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a586:	1a9b      	subs	r3, r3, r2
 800a588:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	bfd5      	itete	le
 800a590:	460a      	movle	r2, r1
 800a592:	462a      	movgt	r2, r5
 800a594:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a598:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a59c:	bfd8      	it	le
 800a59e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a5a2:	465b      	mov	r3, fp
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	4639      	mov	r1, r7
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f7f6 f8bf 	bl	800072c <__aeabi_ddiv>
 800a5ae:	b003      	add	sp, #12
 800a5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5b4 <__copybits>:
 800a5b4:	3901      	subs	r1, #1
 800a5b6:	b570      	push	{r4, r5, r6, lr}
 800a5b8:	1149      	asrs	r1, r1, #5
 800a5ba:	6914      	ldr	r4, [r2, #16]
 800a5bc:	3101      	adds	r1, #1
 800a5be:	f102 0314 	add.w	r3, r2, #20
 800a5c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a5c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a5ca:	1f05      	subs	r5, r0, #4
 800a5cc:	42a3      	cmp	r3, r4
 800a5ce:	d30c      	bcc.n	800a5ea <__copybits+0x36>
 800a5d0:	1aa3      	subs	r3, r4, r2
 800a5d2:	3b11      	subs	r3, #17
 800a5d4:	f023 0303 	bic.w	r3, r3, #3
 800a5d8:	3211      	adds	r2, #17
 800a5da:	42a2      	cmp	r2, r4
 800a5dc:	bf88      	it	hi
 800a5de:	2300      	movhi	r3, #0
 800a5e0:	4418      	add	r0, r3
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	4288      	cmp	r0, r1
 800a5e6:	d305      	bcc.n	800a5f4 <__copybits+0x40>
 800a5e8:	bd70      	pop	{r4, r5, r6, pc}
 800a5ea:	f853 6b04 	ldr.w	r6, [r3], #4
 800a5ee:	f845 6f04 	str.w	r6, [r5, #4]!
 800a5f2:	e7eb      	b.n	800a5cc <__copybits+0x18>
 800a5f4:	f840 3b04 	str.w	r3, [r0], #4
 800a5f8:	e7f4      	b.n	800a5e4 <__copybits+0x30>

0800a5fa <__any_on>:
 800a5fa:	f100 0214 	add.w	r2, r0, #20
 800a5fe:	6900      	ldr	r0, [r0, #16]
 800a600:	114b      	asrs	r3, r1, #5
 800a602:	4298      	cmp	r0, r3
 800a604:	b510      	push	{r4, lr}
 800a606:	db11      	blt.n	800a62c <__any_on+0x32>
 800a608:	dd0a      	ble.n	800a620 <__any_on+0x26>
 800a60a:	f011 011f 	ands.w	r1, r1, #31
 800a60e:	d007      	beq.n	800a620 <__any_on+0x26>
 800a610:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a614:	fa24 f001 	lsr.w	r0, r4, r1
 800a618:	fa00 f101 	lsl.w	r1, r0, r1
 800a61c:	428c      	cmp	r4, r1
 800a61e:	d10b      	bne.n	800a638 <__any_on+0x3e>
 800a620:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a624:	4293      	cmp	r3, r2
 800a626:	d803      	bhi.n	800a630 <__any_on+0x36>
 800a628:	2000      	movs	r0, #0
 800a62a:	bd10      	pop	{r4, pc}
 800a62c:	4603      	mov	r3, r0
 800a62e:	e7f7      	b.n	800a620 <__any_on+0x26>
 800a630:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a634:	2900      	cmp	r1, #0
 800a636:	d0f5      	beq.n	800a624 <__any_on+0x2a>
 800a638:	2001      	movs	r0, #1
 800a63a:	e7f6      	b.n	800a62a <__any_on+0x30>

0800a63c <_calloc_r>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	fba1 5402 	umull	r5, r4, r1, r2
 800a642:	b934      	cbnz	r4, 800a652 <_calloc_r+0x16>
 800a644:	4629      	mov	r1, r5
 800a646:	f000 f875 	bl	800a734 <_malloc_r>
 800a64a:	4606      	mov	r6, r0
 800a64c:	b928      	cbnz	r0, 800a65a <_calloc_r+0x1e>
 800a64e:	4630      	mov	r0, r6
 800a650:	bd70      	pop	{r4, r5, r6, pc}
 800a652:	220c      	movs	r2, #12
 800a654:	2600      	movs	r6, #0
 800a656:	6002      	str	r2, [r0, #0]
 800a658:	e7f9      	b.n	800a64e <_calloc_r+0x12>
 800a65a:	462a      	mov	r2, r5
 800a65c:	4621      	mov	r1, r4
 800a65e:	f7fc fe69 	bl	8007334 <memset>
 800a662:	e7f4      	b.n	800a64e <_calloc_r+0x12>

0800a664 <_free_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4605      	mov	r5, r0
 800a668:	2900      	cmp	r1, #0
 800a66a:	d040      	beq.n	800a6ee <_free_r+0x8a>
 800a66c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a670:	1f0c      	subs	r4, r1, #4
 800a672:	2b00      	cmp	r3, #0
 800a674:	bfb8      	it	lt
 800a676:	18e4      	addlt	r4, r4, r3
 800a678:	f000 faae 	bl	800abd8 <__malloc_lock>
 800a67c:	4a1c      	ldr	r2, [pc, #112]	; (800a6f0 <_free_r+0x8c>)
 800a67e:	6813      	ldr	r3, [r2, #0]
 800a680:	b933      	cbnz	r3, 800a690 <_free_r+0x2c>
 800a682:	6063      	str	r3, [r4, #4]
 800a684:	6014      	str	r4, [r2, #0]
 800a686:	4628      	mov	r0, r5
 800a688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a68c:	f000 baaa 	b.w	800abe4 <__malloc_unlock>
 800a690:	42a3      	cmp	r3, r4
 800a692:	d908      	bls.n	800a6a6 <_free_r+0x42>
 800a694:	6820      	ldr	r0, [r4, #0]
 800a696:	1821      	adds	r1, r4, r0
 800a698:	428b      	cmp	r3, r1
 800a69a:	bf01      	itttt	eq
 800a69c:	6819      	ldreq	r1, [r3, #0]
 800a69e:	685b      	ldreq	r3, [r3, #4]
 800a6a0:	1809      	addeq	r1, r1, r0
 800a6a2:	6021      	streq	r1, [r4, #0]
 800a6a4:	e7ed      	b.n	800a682 <_free_r+0x1e>
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	b10b      	cbz	r3, 800a6b0 <_free_r+0x4c>
 800a6ac:	42a3      	cmp	r3, r4
 800a6ae:	d9fa      	bls.n	800a6a6 <_free_r+0x42>
 800a6b0:	6811      	ldr	r1, [r2, #0]
 800a6b2:	1850      	adds	r0, r2, r1
 800a6b4:	42a0      	cmp	r0, r4
 800a6b6:	d10b      	bne.n	800a6d0 <_free_r+0x6c>
 800a6b8:	6820      	ldr	r0, [r4, #0]
 800a6ba:	4401      	add	r1, r0
 800a6bc:	1850      	adds	r0, r2, r1
 800a6be:	4283      	cmp	r3, r0
 800a6c0:	6011      	str	r1, [r2, #0]
 800a6c2:	d1e0      	bne.n	800a686 <_free_r+0x22>
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	4401      	add	r1, r0
 800a6ca:	6011      	str	r1, [r2, #0]
 800a6cc:	6053      	str	r3, [r2, #4]
 800a6ce:	e7da      	b.n	800a686 <_free_r+0x22>
 800a6d0:	d902      	bls.n	800a6d8 <_free_r+0x74>
 800a6d2:	230c      	movs	r3, #12
 800a6d4:	602b      	str	r3, [r5, #0]
 800a6d6:	e7d6      	b.n	800a686 <_free_r+0x22>
 800a6d8:	6820      	ldr	r0, [r4, #0]
 800a6da:	1821      	adds	r1, r4, r0
 800a6dc:	428b      	cmp	r3, r1
 800a6de:	bf01      	itttt	eq
 800a6e0:	6819      	ldreq	r1, [r3, #0]
 800a6e2:	685b      	ldreq	r3, [r3, #4]
 800a6e4:	1809      	addeq	r1, r1, r0
 800a6e6:	6021      	streq	r1, [r4, #0]
 800a6e8:	6063      	str	r3, [r4, #4]
 800a6ea:	6054      	str	r4, [r2, #4]
 800a6ec:	e7cb      	b.n	800a686 <_free_r+0x22>
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	20000428 	.word	0x20000428

0800a6f4 <sbrk_aligned>:
 800a6f4:	b570      	push	{r4, r5, r6, lr}
 800a6f6:	4e0e      	ldr	r6, [pc, #56]	; (800a730 <sbrk_aligned+0x3c>)
 800a6f8:	460c      	mov	r4, r1
 800a6fa:	6831      	ldr	r1, [r6, #0]
 800a6fc:	4605      	mov	r5, r0
 800a6fe:	b911      	cbnz	r1, 800a706 <sbrk_aligned+0x12>
 800a700:	f000 f9ee 	bl	800aae0 <_sbrk_r>
 800a704:	6030      	str	r0, [r6, #0]
 800a706:	4621      	mov	r1, r4
 800a708:	4628      	mov	r0, r5
 800a70a:	f000 f9e9 	bl	800aae0 <_sbrk_r>
 800a70e:	1c43      	adds	r3, r0, #1
 800a710:	d00a      	beq.n	800a728 <sbrk_aligned+0x34>
 800a712:	1cc4      	adds	r4, r0, #3
 800a714:	f024 0403 	bic.w	r4, r4, #3
 800a718:	42a0      	cmp	r0, r4
 800a71a:	d007      	beq.n	800a72c <sbrk_aligned+0x38>
 800a71c:	1a21      	subs	r1, r4, r0
 800a71e:	4628      	mov	r0, r5
 800a720:	f000 f9de 	bl	800aae0 <_sbrk_r>
 800a724:	3001      	adds	r0, #1
 800a726:	d101      	bne.n	800a72c <sbrk_aligned+0x38>
 800a728:	f04f 34ff 	mov.w	r4, #4294967295
 800a72c:	4620      	mov	r0, r4
 800a72e:	bd70      	pop	{r4, r5, r6, pc}
 800a730:	2000042c 	.word	0x2000042c

0800a734 <_malloc_r>:
 800a734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a738:	1ccd      	adds	r5, r1, #3
 800a73a:	f025 0503 	bic.w	r5, r5, #3
 800a73e:	3508      	adds	r5, #8
 800a740:	2d0c      	cmp	r5, #12
 800a742:	bf38      	it	cc
 800a744:	250c      	movcc	r5, #12
 800a746:	2d00      	cmp	r5, #0
 800a748:	4607      	mov	r7, r0
 800a74a:	db01      	blt.n	800a750 <_malloc_r+0x1c>
 800a74c:	42a9      	cmp	r1, r5
 800a74e:	d905      	bls.n	800a75c <_malloc_r+0x28>
 800a750:	230c      	movs	r3, #12
 800a752:	2600      	movs	r6, #0
 800a754:	603b      	str	r3, [r7, #0]
 800a756:	4630      	mov	r0, r6
 800a758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a75c:	4e2e      	ldr	r6, [pc, #184]	; (800a818 <_malloc_r+0xe4>)
 800a75e:	f000 fa3b 	bl	800abd8 <__malloc_lock>
 800a762:	6833      	ldr	r3, [r6, #0]
 800a764:	461c      	mov	r4, r3
 800a766:	bb34      	cbnz	r4, 800a7b6 <_malloc_r+0x82>
 800a768:	4629      	mov	r1, r5
 800a76a:	4638      	mov	r0, r7
 800a76c:	f7ff ffc2 	bl	800a6f4 <sbrk_aligned>
 800a770:	1c43      	adds	r3, r0, #1
 800a772:	4604      	mov	r4, r0
 800a774:	d14d      	bne.n	800a812 <_malloc_r+0xde>
 800a776:	6834      	ldr	r4, [r6, #0]
 800a778:	4626      	mov	r6, r4
 800a77a:	2e00      	cmp	r6, #0
 800a77c:	d140      	bne.n	800a800 <_malloc_r+0xcc>
 800a77e:	6823      	ldr	r3, [r4, #0]
 800a780:	4631      	mov	r1, r6
 800a782:	4638      	mov	r0, r7
 800a784:	eb04 0803 	add.w	r8, r4, r3
 800a788:	f000 f9aa 	bl	800aae0 <_sbrk_r>
 800a78c:	4580      	cmp	r8, r0
 800a78e:	d13a      	bne.n	800a806 <_malloc_r+0xd2>
 800a790:	6821      	ldr	r1, [r4, #0]
 800a792:	3503      	adds	r5, #3
 800a794:	1a6d      	subs	r5, r5, r1
 800a796:	f025 0503 	bic.w	r5, r5, #3
 800a79a:	3508      	adds	r5, #8
 800a79c:	2d0c      	cmp	r5, #12
 800a79e:	bf38      	it	cc
 800a7a0:	250c      	movcc	r5, #12
 800a7a2:	4638      	mov	r0, r7
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	f7ff ffa5 	bl	800a6f4 <sbrk_aligned>
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	d02b      	beq.n	800a806 <_malloc_r+0xd2>
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	442b      	add	r3, r5
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	e00e      	b.n	800a7d4 <_malloc_r+0xa0>
 800a7b6:	6822      	ldr	r2, [r4, #0]
 800a7b8:	1b52      	subs	r2, r2, r5
 800a7ba:	d41e      	bmi.n	800a7fa <_malloc_r+0xc6>
 800a7bc:	2a0b      	cmp	r2, #11
 800a7be:	d916      	bls.n	800a7ee <_malloc_r+0xba>
 800a7c0:	1961      	adds	r1, r4, r5
 800a7c2:	42a3      	cmp	r3, r4
 800a7c4:	6025      	str	r5, [r4, #0]
 800a7c6:	bf18      	it	ne
 800a7c8:	6059      	strne	r1, [r3, #4]
 800a7ca:	6863      	ldr	r3, [r4, #4]
 800a7cc:	bf08      	it	eq
 800a7ce:	6031      	streq	r1, [r6, #0]
 800a7d0:	5162      	str	r2, [r4, r5]
 800a7d2:	604b      	str	r3, [r1, #4]
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	f104 060b 	add.w	r6, r4, #11
 800a7da:	f000 fa03 	bl	800abe4 <__malloc_unlock>
 800a7de:	f026 0607 	bic.w	r6, r6, #7
 800a7e2:	1d23      	adds	r3, r4, #4
 800a7e4:	1af2      	subs	r2, r6, r3
 800a7e6:	d0b6      	beq.n	800a756 <_malloc_r+0x22>
 800a7e8:	1b9b      	subs	r3, r3, r6
 800a7ea:	50a3      	str	r3, [r4, r2]
 800a7ec:	e7b3      	b.n	800a756 <_malloc_r+0x22>
 800a7ee:	6862      	ldr	r2, [r4, #4]
 800a7f0:	42a3      	cmp	r3, r4
 800a7f2:	bf0c      	ite	eq
 800a7f4:	6032      	streq	r2, [r6, #0]
 800a7f6:	605a      	strne	r2, [r3, #4]
 800a7f8:	e7ec      	b.n	800a7d4 <_malloc_r+0xa0>
 800a7fa:	4623      	mov	r3, r4
 800a7fc:	6864      	ldr	r4, [r4, #4]
 800a7fe:	e7b2      	b.n	800a766 <_malloc_r+0x32>
 800a800:	4634      	mov	r4, r6
 800a802:	6876      	ldr	r6, [r6, #4]
 800a804:	e7b9      	b.n	800a77a <_malloc_r+0x46>
 800a806:	230c      	movs	r3, #12
 800a808:	4638      	mov	r0, r7
 800a80a:	603b      	str	r3, [r7, #0]
 800a80c:	f000 f9ea 	bl	800abe4 <__malloc_unlock>
 800a810:	e7a1      	b.n	800a756 <_malloc_r+0x22>
 800a812:	6025      	str	r5, [r4, #0]
 800a814:	e7de      	b.n	800a7d4 <_malloc_r+0xa0>
 800a816:	bf00      	nop
 800a818:	20000428 	.word	0x20000428

0800a81c <__ssputs_r>:
 800a81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a820:	688e      	ldr	r6, [r1, #8]
 800a822:	4682      	mov	sl, r0
 800a824:	429e      	cmp	r6, r3
 800a826:	460c      	mov	r4, r1
 800a828:	4690      	mov	r8, r2
 800a82a:	461f      	mov	r7, r3
 800a82c:	d838      	bhi.n	800a8a0 <__ssputs_r+0x84>
 800a82e:	898a      	ldrh	r2, [r1, #12]
 800a830:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a834:	d032      	beq.n	800a89c <__ssputs_r+0x80>
 800a836:	6825      	ldr	r5, [r4, #0]
 800a838:	6909      	ldr	r1, [r1, #16]
 800a83a:	3301      	adds	r3, #1
 800a83c:	eba5 0901 	sub.w	r9, r5, r1
 800a840:	6965      	ldr	r5, [r4, #20]
 800a842:	444b      	add	r3, r9
 800a844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a848:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a84c:	106d      	asrs	r5, r5, #1
 800a84e:	429d      	cmp	r5, r3
 800a850:	bf38      	it	cc
 800a852:	461d      	movcc	r5, r3
 800a854:	0553      	lsls	r3, r2, #21
 800a856:	d531      	bpl.n	800a8bc <__ssputs_r+0xa0>
 800a858:	4629      	mov	r1, r5
 800a85a:	f7ff ff6b 	bl	800a734 <_malloc_r>
 800a85e:	4606      	mov	r6, r0
 800a860:	b950      	cbnz	r0, 800a878 <__ssputs_r+0x5c>
 800a862:	230c      	movs	r3, #12
 800a864:	f04f 30ff 	mov.w	r0, #4294967295
 800a868:	f8ca 3000 	str.w	r3, [sl]
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a872:	81a3      	strh	r3, [r4, #12]
 800a874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a878:	464a      	mov	r2, r9
 800a87a:	6921      	ldr	r1, [r4, #16]
 800a87c:	f7ff fa18 	bl	8009cb0 <memcpy>
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a88a:	81a3      	strh	r3, [r4, #12]
 800a88c:	6126      	str	r6, [r4, #16]
 800a88e:	444e      	add	r6, r9
 800a890:	6026      	str	r6, [r4, #0]
 800a892:	463e      	mov	r6, r7
 800a894:	6165      	str	r5, [r4, #20]
 800a896:	eba5 0509 	sub.w	r5, r5, r9
 800a89a:	60a5      	str	r5, [r4, #8]
 800a89c:	42be      	cmp	r6, r7
 800a89e:	d900      	bls.n	800a8a2 <__ssputs_r+0x86>
 800a8a0:	463e      	mov	r6, r7
 800a8a2:	4632      	mov	r2, r6
 800a8a4:	4641      	mov	r1, r8
 800a8a6:	6820      	ldr	r0, [r4, #0]
 800a8a8:	f000 f97c 	bl	800aba4 <memmove>
 800a8ac:	68a3      	ldr	r3, [r4, #8]
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	1b9b      	subs	r3, r3, r6
 800a8b2:	60a3      	str	r3, [r4, #8]
 800a8b4:	6823      	ldr	r3, [r4, #0]
 800a8b6:	4433      	add	r3, r6
 800a8b8:	6023      	str	r3, [r4, #0]
 800a8ba:	e7db      	b.n	800a874 <__ssputs_r+0x58>
 800a8bc:	462a      	mov	r2, r5
 800a8be:	f000 f997 	bl	800abf0 <_realloc_r>
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d1e1      	bne.n	800a88c <__ssputs_r+0x70>
 800a8c8:	4650      	mov	r0, sl
 800a8ca:	6921      	ldr	r1, [r4, #16]
 800a8cc:	f7ff feca 	bl	800a664 <_free_r>
 800a8d0:	e7c7      	b.n	800a862 <__ssputs_r+0x46>
	...

0800a8d4 <_svfiprintf_r>:
 800a8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	4698      	mov	r8, r3
 800a8da:	898b      	ldrh	r3, [r1, #12]
 800a8dc:	4607      	mov	r7, r0
 800a8de:	061b      	lsls	r3, r3, #24
 800a8e0:	460d      	mov	r5, r1
 800a8e2:	4614      	mov	r4, r2
 800a8e4:	b09d      	sub	sp, #116	; 0x74
 800a8e6:	d50e      	bpl.n	800a906 <_svfiprintf_r+0x32>
 800a8e8:	690b      	ldr	r3, [r1, #16]
 800a8ea:	b963      	cbnz	r3, 800a906 <_svfiprintf_r+0x32>
 800a8ec:	2140      	movs	r1, #64	; 0x40
 800a8ee:	f7ff ff21 	bl	800a734 <_malloc_r>
 800a8f2:	6028      	str	r0, [r5, #0]
 800a8f4:	6128      	str	r0, [r5, #16]
 800a8f6:	b920      	cbnz	r0, 800a902 <_svfiprintf_r+0x2e>
 800a8f8:	230c      	movs	r3, #12
 800a8fa:	603b      	str	r3, [r7, #0]
 800a8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a900:	e0d1      	b.n	800aaa6 <_svfiprintf_r+0x1d2>
 800a902:	2340      	movs	r3, #64	; 0x40
 800a904:	616b      	str	r3, [r5, #20]
 800a906:	2300      	movs	r3, #0
 800a908:	9309      	str	r3, [sp, #36]	; 0x24
 800a90a:	2320      	movs	r3, #32
 800a90c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a910:	2330      	movs	r3, #48	; 0x30
 800a912:	f04f 0901 	mov.w	r9, #1
 800a916:	f8cd 800c 	str.w	r8, [sp, #12]
 800a91a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aac0 <_svfiprintf_r+0x1ec>
 800a91e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a922:	4623      	mov	r3, r4
 800a924:	469a      	mov	sl, r3
 800a926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a92a:	b10a      	cbz	r2, 800a930 <_svfiprintf_r+0x5c>
 800a92c:	2a25      	cmp	r2, #37	; 0x25
 800a92e:	d1f9      	bne.n	800a924 <_svfiprintf_r+0x50>
 800a930:	ebba 0b04 	subs.w	fp, sl, r4
 800a934:	d00b      	beq.n	800a94e <_svfiprintf_r+0x7a>
 800a936:	465b      	mov	r3, fp
 800a938:	4622      	mov	r2, r4
 800a93a:	4629      	mov	r1, r5
 800a93c:	4638      	mov	r0, r7
 800a93e:	f7ff ff6d 	bl	800a81c <__ssputs_r>
 800a942:	3001      	adds	r0, #1
 800a944:	f000 80aa 	beq.w	800aa9c <_svfiprintf_r+0x1c8>
 800a948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a94a:	445a      	add	r2, fp
 800a94c:	9209      	str	r2, [sp, #36]	; 0x24
 800a94e:	f89a 3000 	ldrb.w	r3, [sl]
 800a952:	2b00      	cmp	r3, #0
 800a954:	f000 80a2 	beq.w	800aa9c <_svfiprintf_r+0x1c8>
 800a958:	2300      	movs	r3, #0
 800a95a:	f04f 32ff 	mov.w	r2, #4294967295
 800a95e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a962:	f10a 0a01 	add.w	sl, sl, #1
 800a966:	9304      	str	r3, [sp, #16]
 800a968:	9307      	str	r3, [sp, #28]
 800a96a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a96e:	931a      	str	r3, [sp, #104]	; 0x68
 800a970:	4654      	mov	r4, sl
 800a972:	2205      	movs	r2, #5
 800a974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a978:	4851      	ldr	r0, [pc, #324]	; (800aac0 <_svfiprintf_r+0x1ec>)
 800a97a:	f7ff f98b 	bl	8009c94 <memchr>
 800a97e:	9a04      	ldr	r2, [sp, #16]
 800a980:	b9d8      	cbnz	r0, 800a9ba <_svfiprintf_r+0xe6>
 800a982:	06d0      	lsls	r0, r2, #27
 800a984:	bf44      	itt	mi
 800a986:	2320      	movmi	r3, #32
 800a988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a98c:	0711      	lsls	r1, r2, #28
 800a98e:	bf44      	itt	mi
 800a990:	232b      	movmi	r3, #43	; 0x2b
 800a992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a996:	f89a 3000 	ldrb.w	r3, [sl]
 800a99a:	2b2a      	cmp	r3, #42	; 0x2a
 800a99c:	d015      	beq.n	800a9ca <_svfiprintf_r+0xf6>
 800a99e:	4654      	mov	r4, sl
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	f04f 0c0a 	mov.w	ip, #10
 800a9a6:	9a07      	ldr	r2, [sp, #28]
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ae:	3b30      	subs	r3, #48	; 0x30
 800a9b0:	2b09      	cmp	r3, #9
 800a9b2:	d94e      	bls.n	800aa52 <_svfiprintf_r+0x17e>
 800a9b4:	b1b0      	cbz	r0, 800a9e4 <_svfiprintf_r+0x110>
 800a9b6:	9207      	str	r2, [sp, #28]
 800a9b8:	e014      	b.n	800a9e4 <_svfiprintf_r+0x110>
 800a9ba:	eba0 0308 	sub.w	r3, r0, r8
 800a9be:	fa09 f303 	lsl.w	r3, r9, r3
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	46a2      	mov	sl, r4
 800a9c6:	9304      	str	r3, [sp, #16]
 800a9c8:	e7d2      	b.n	800a970 <_svfiprintf_r+0x9c>
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	1d19      	adds	r1, r3, #4
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	9103      	str	r1, [sp, #12]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	bfbb      	ittet	lt
 800a9d6:	425b      	neglt	r3, r3
 800a9d8:	f042 0202 	orrlt.w	r2, r2, #2
 800a9dc:	9307      	strge	r3, [sp, #28]
 800a9de:	9307      	strlt	r3, [sp, #28]
 800a9e0:	bfb8      	it	lt
 800a9e2:	9204      	strlt	r2, [sp, #16]
 800a9e4:	7823      	ldrb	r3, [r4, #0]
 800a9e6:	2b2e      	cmp	r3, #46	; 0x2e
 800a9e8:	d10c      	bne.n	800aa04 <_svfiprintf_r+0x130>
 800a9ea:	7863      	ldrb	r3, [r4, #1]
 800a9ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ee:	d135      	bne.n	800aa5c <_svfiprintf_r+0x188>
 800a9f0:	9b03      	ldr	r3, [sp, #12]
 800a9f2:	3402      	adds	r4, #2
 800a9f4:	1d1a      	adds	r2, r3, #4
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	9203      	str	r2, [sp, #12]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	bfb8      	it	lt
 800a9fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa02:	9305      	str	r3, [sp, #20]
 800aa04:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800aac4 <_svfiprintf_r+0x1f0>
 800aa08:	2203      	movs	r2, #3
 800aa0a:	4650      	mov	r0, sl
 800aa0c:	7821      	ldrb	r1, [r4, #0]
 800aa0e:	f7ff f941 	bl	8009c94 <memchr>
 800aa12:	b140      	cbz	r0, 800aa26 <_svfiprintf_r+0x152>
 800aa14:	2340      	movs	r3, #64	; 0x40
 800aa16:	eba0 000a 	sub.w	r0, r0, sl
 800aa1a:	fa03 f000 	lsl.w	r0, r3, r0
 800aa1e:	9b04      	ldr	r3, [sp, #16]
 800aa20:	3401      	adds	r4, #1
 800aa22:	4303      	orrs	r3, r0
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2a:	2206      	movs	r2, #6
 800aa2c:	4826      	ldr	r0, [pc, #152]	; (800aac8 <_svfiprintf_r+0x1f4>)
 800aa2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa32:	f7ff f92f 	bl	8009c94 <memchr>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d038      	beq.n	800aaac <_svfiprintf_r+0x1d8>
 800aa3a:	4b24      	ldr	r3, [pc, #144]	; (800aacc <_svfiprintf_r+0x1f8>)
 800aa3c:	bb1b      	cbnz	r3, 800aa86 <_svfiprintf_r+0x1b2>
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	3307      	adds	r3, #7
 800aa42:	f023 0307 	bic.w	r3, r3, #7
 800aa46:	3308      	adds	r3, #8
 800aa48:	9303      	str	r3, [sp, #12]
 800aa4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa4c:	4433      	add	r3, r6
 800aa4e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa50:	e767      	b.n	800a922 <_svfiprintf_r+0x4e>
 800aa52:	460c      	mov	r4, r1
 800aa54:	2001      	movs	r0, #1
 800aa56:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa5a:	e7a5      	b.n	800a9a8 <_svfiprintf_r+0xd4>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f04f 0c0a 	mov.w	ip, #10
 800aa62:	4619      	mov	r1, r3
 800aa64:	3401      	adds	r4, #1
 800aa66:	9305      	str	r3, [sp, #20]
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa6e:	3a30      	subs	r2, #48	; 0x30
 800aa70:	2a09      	cmp	r2, #9
 800aa72:	d903      	bls.n	800aa7c <_svfiprintf_r+0x1a8>
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d0c5      	beq.n	800aa04 <_svfiprintf_r+0x130>
 800aa78:	9105      	str	r1, [sp, #20]
 800aa7a:	e7c3      	b.n	800aa04 <_svfiprintf_r+0x130>
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	2301      	movs	r3, #1
 800aa80:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa84:	e7f0      	b.n	800aa68 <_svfiprintf_r+0x194>
 800aa86:	ab03      	add	r3, sp, #12
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	462a      	mov	r2, r5
 800aa8c:	4638      	mov	r0, r7
 800aa8e:	4b10      	ldr	r3, [pc, #64]	; (800aad0 <_svfiprintf_r+0x1fc>)
 800aa90:	a904      	add	r1, sp, #16
 800aa92:	f7fc fcf5 	bl	8007480 <_printf_float>
 800aa96:	1c42      	adds	r2, r0, #1
 800aa98:	4606      	mov	r6, r0
 800aa9a:	d1d6      	bne.n	800aa4a <_svfiprintf_r+0x176>
 800aa9c:	89ab      	ldrh	r3, [r5, #12]
 800aa9e:	065b      	lsls	r3, r3, #25
 800aaa0:	f53f af2c 	bmi.w	800a8fc <_svfiprintf_r+0x28>
 800aaa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaa6:	b01d      	add	sp, #116	; 0x74
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaac:	ab03      	add	r3, sp, #12
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	462a      	mov	r2, r5
 800aab2:	4638      	mov	r0, r7
 800aab4:	4b06      	ldr	r3, [pc, #24]	; (800aad0 <_svfiprintf_r+0x1fc>)
 800aab6:	a904      	add	r1, sp, #16
 800aab8:	f7fc ff7e 	bl	80079b8 <_printf_i>
 800aabc:	e7eb      	b.n	800aa96 <_svfiprintf_r+0x1c2>
 800aabe:	bf00      	nop
 800aac0:	0800c32c 	.word	0x0800c32c
 800aac4:	0800c332 	.word	0x0800c332
 800aac8:	0800c336 	.word	0x0800c336
 800aacc:	08007481 	.word	0x08007481
 800aad0:	0800a81d 	.word	0x0800a81d

0800aad4 <nan>:
 800aad4:	2000      	movs	r0, #0
 800aad6:	4901      	ldr	r1, [pc, #4]	; (800aadc <nan+0x8>)
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	7ff80000 	.word	0x7ff80000

0800aae0 <_sbrk_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	2300      	movs	r3, #0
 800aae4:	4d05      	ldr	r5, [pc, #20]	; (800aafc <_sbrk_r+0x1c>)
 800aae6:	4604      	mov	r4, r0
 800aae8:	4608      	mov	r0, r1
 800aaea:	602b      	str	r3, [r5, #0]
 800aaec:	f7f8 f866 	bl	8002bbc <_sbrk>
 800aaf0:	1c43      	adds	r3, r0, #1
 800aaf2:	d102      	bne.n	800aafa <_sbrk_r+0x1a>
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	b103      	cbz	r3, 800aafa <_sbrk_r+0x1a>
 800aaf8:	6023      	str	r3, [r4, #0]
 800aafa:	bd38      	pop	{r3, r4, r5, pc}
 800aafc:	20000430 	.word	0x20000430

0800ab00 <strncmp>:
 800ab00:	4603      	mov	r3, r0
 800ab02:	b510      	push	{r4, lr}
 800ab04:	b172      	cbz	r2, 800ab24 <strncmp+0x24>
 800ab06:	3901      	subs	r1, #1
 800ab08:	1884      	adds	r4, r0, r2
 800ab0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab12:	4290      	cmp	r0, r2
 800ab14:	d101      	bne.n	800ab1a <strncmp+0x1a>
 800ab16:	42a3      	cmp	r3, r4
 800ab18:	d101      	bne.n	800ab1e <strncmp+0x1e>
 800ab1a:	1a80      	subs	r0, r0, r2
 800ab1c:	bd10      	pop	{r4, pc}
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d1f3      	bne.n	800ab0a <strncmp+0xa>
 800ab22:	e7fa      	b.n	800ab1a <strncmp+0x1a>
 800ab24:	4610      	mov	r0, r2
 800ab26:	e7f9      	b.n	800ab1c <strncmp+0x1c>

0800ab28 <__ascii_wctomb>:
 800ab28:	4603      	mov	r3, r0
 800ab2a:	4608      	mov	r0, r1
 800ab2c:	b141      	cbz	r1, 800ab40 <__ascii_wctomb+0x18>
 800ab2e:	2aff      	cmp	r2, #255	; 0xff
 800ab30:	d904      	bls.n	800ab3c <__ascii_wctomb+0x14>
 800ab32:	228a      	movs	r2, #138	; 0x8a
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	4770      	bx	lr
 800ab3c:	2001      	movs	r0, #1
 800ab3e:	700a      	strb	r2, [r1, #0]
 800ab40:	4770      	bx	lr
	...

0800ab44 <__assert_func>:
 800ab44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab46:	4614      	mov	r4, r2
 800ab48:	461a      	mov	r2, r3
 800ab4a:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <__assert_func+0x2c>)
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68d8      	ldr	r0, [r3, #12]
 800ab52:	b14c      	cbz	r4, 800ab68 <__assert_func+0x24>
 800ab54:	4b07      	ldr	r3, [pc, #28]	; (800ab74 <__assert_func+0x30>)
 800ab56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab5a:	9100      	str	r1, [sp, #0]
 800ab5c:	462b      	mov	r3, r5
 800ab5e:	4906      	ldr	r1, [pc, #24]	; (800ab78 <__assert_func+0x34>)
 800ab60:	f000 f80e 	bl	800ab80 <fiprintf>
 800ab64:	f000 fa8a 	bl	800b07c <abort>
 800ab68:	4b04      	ldr	r3, [pc, #16]	; (800ab7c <__assert_func+0x38>)
 800ab6a:	461c      	mov	r4, r3
 800ab6c:	e7f3      	b.n	800ab56 <__assert_func+0x12>
 800ab6e:	bf00      	nop
 800ab70:	20000014 	.word	0x20000014
 800ab74:	0800c33d 	.word	0x0800c33d
 800ab78:	0800c34a 	.word	0x0800c34a
 800ab7c:	0800c378 	.word	0x0800c378

0800ab80 <fiprintf>:
 800ab80:	b40e      	push	{r1, r2, r3}
 800ab82:	b503      	push	{r0, r1, lr}
 800ab84:	4601      	mov	r1, r0
 800ab86:	ab03      	add	r3, sp, #12
 800ab88:	4805      	ldr	r0, [pc, #20]	; (800aba0 <fiprintf+0x20>)
 800ab8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab8e:	6800      	ldr	r0, [r0, #0]
 800ab90:	9301      	str	r3, [sp, #4]
 800ab92:	f000 f883 	bl	800ac9c <_vfiprintf_r>
 800ab96:	b002      	add	sp, #8
 800ab98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab9c:	b003      	add	sp, #12
 800ab9e:	4770      	bx	lr
 800aba0:	20000014 	.word	0x20000014

0800aba4 <memmove>:
 800aba4:	4288      	cmp	r0, r1
 800aba6:	b510      	push	{r4, lr}
 800aba8:	eb01 0402 	add.w	r4, r1, r2
 800abac:	d902      	bls.n	800abb4 <memmove+0x10>
 800abae:	4284      	cmp	r4, r0
 800abb0:	4623      	mov	r3, r4
 800abb2:	d807      	bhi.n	800abc4 <memmove+0x20>
 800abb4:	1e43      	subs	r3, r0, #1
 800abb6:	42a1      	cmp	r1, r4
 800abb8:	d008      	beq.n	800abcc <memmove+0x28>
 800abba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abc2:	e7f8      	b.n	800abb6 <memmove+0x12>
 800abc4:	4601      	mov	r1, r0
 800abc6:	4402      	add	r2, r0
 800abc8:	428a      	cmp	r2, r1
 800abca:	d100      	bne.n	800abce <memmove+0x2a>
 800abcc:	bd10      	pop	{r4, pc}
 800abce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abd6:	e7f7      	b.n	800abc8 <memmove+0x24>

0800abd8 <__malloc_lock>:
 800abd8:	4801      	ldr	r0, [pc, #4]	; (800abe0 <__malloc_lock+0x8>)
 800abda:	f000 bc0b 	b.w	800b3f4 <__retarget_lock_acquire_recursive>
 800abde:	bf00      	nop
 800abe0:	20000434 	.word	0x20000434

0800abe4 <__malloc_unlock>:
 800abe4:	4801      	ldr	r0, [pc, #4]	; (800abec <__malloc_unlock+0x8>)
 800abe6:	f000 bc06 	b.w	800b3f6 <__retarget_lock_release_recursive>
 800abea:	bf00      	nop
 800abec:	20000434 	.word	0x20000434

0800abf0 <_realloc_r>:
 800abf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf4:	4680      	mov	r8, r0
 800abf6:	4614      	mov	r4, r2
 800abf8:	460e      	mov	r6, r1
 800abfa:	b921      	cbnz	r1, 800ac06 <_realloc_r+0x16>
 800abfc:	4611      	mov	r1, r2
 800abfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac02:	f7ff bd97 	b.w	800a734 <_malloc_r>
 800ac06:	b92a      	cbnz	r2, 800ac14 <_realloc_r+0x24>
 800ac08:	f7ff fd2c 	bl	800a664 <_free_r>
 800ac0c:	4625      	mov	r5, r4
 800ac0e:	4628      	mov	r0, r5
 800ac10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac14:	f000 fc56 	bl	800b4c4 <_malloc_usable_size_r>
 800ac18:	4284      	cmp	r4, r0
 800ac1a:	4607      	mov	r7, r0
 800ac1c:	d802      	bhi.n	800ac24 <_realloc_r+0x34>
 800ac1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac22:	d812      	bhi.n	800ac4a <_realloc_r+0x5a>
 800ac24:	4621      	mov	r1, r4
 800ac26:	4640      	mov	r0, r8
 800ac28:	f7ff fd84 	bl	800a734 <_malloc_r>
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d0ed      	beq.n	800ac0e <_realloc_r+0x1e>
 800ac32:	42bc      	cmp	r4, r7
 800ac34:	4622      	mov	r2, r4
 800ac36:	4631      	mov	r1, r6
 800ac38:	bf28      	it	cs
 800ac3a:	463a      	movcs	r2, r7
 800ac3c:	f7ff f838 	bl	8009cb0 <memcpy>
 800ac40:	4631      	mov	r1, r6
 800ac42:	4640      	mov	r0, r8
 800ac44:	f7ff fd0e 	bl	800a664 <_free_r>
 800ac48:	e7e1      	b.n	800ac0e <_realloc_r+0x1e>
 800ac4a:	4635      	mov	r5, r6
 800ac4c:	e7df      	b.n	800ac0e <_realloc_r+0x1e>

0800ac4e <__sfputc_r>:
 800ac4e:	6893      	ldr	r3, [r2, #8]
 800ac50:	b410      	push	{r4}
 800ac52:	3b01      	subs	r3, #1
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	6093      	str	r3, [r2, #8]
 800ac58:	da07      	bge.n	800ac6a <__sfputc_r+0x1c>
 800ac5a:	6994      	ldr	r4, [r2, #24]
 800ac5c:	42a3      	cmp	r3, r4
 800ac5e:	db01      	blt.n	800ac64 <__sfputc_r+0x16>
 800ac60:	290a      	cmp	r1, #10
 800ac62:	d102      	bne.n	800ac6a <__sfputc_r+0x1c>
 800ac64:	bc10      	pop	{r4}
 800ac66:	f000 b949 	b.w	800aefc <__swbuf_r>
 800ac6a:	6813      	ldr	r3, [r2, #0]
 800ac6c:	1c58      	adds	r0, r3, #1
 800ac6e:	6010      	str	r0, [r2, #0]
 800ac70:	7019      	strb	r1, [r3, #0]
 800ac72:	4608      	mov	r0, r1
 800ac74:	bc10      	pop	{r4}
 800ac76:	4770      	bx	lr

0800ac78 <__sfputs_r>:
 800ac78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	460f      	mov	r7, r1
 800ac7e:	4614      	mov	r4, r2
 800ac80:	18d5      	adds	r5, r2, r3
 800ac82:	42ac      	cmp	r4, r5
 800ac84:	d101      	bne.n	800ac8a <__sfputs_r+0x12>
 800ac86:	2000      	movs	r0, #0
 800ac88:	e007      	b.n	800ac9a <__sfputs_r+0x22>
 800ac8a:	463a      	mov	r2, r7
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac92:	f7ff ffdc 	bl	800ac4e <__sfputc_r>
 800ac96:	1c43      	adds	r3, r0, #1
 800ac98:	d1f3      	bne.n	800ac82 <__sfputs_r+0xa>
 800ac9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac9c <_vfiprintf_r>:
 800ac9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	460d      	mov	r5, r1
 800aca2:	4614      	mov	r4, r2
 800aca4:	4698      	mov	r8, r3
 800aca6:	4606      	mov	r6, r0
 800aca8:	b09d      	sub	sp, #116	; 0x74
 800acaa:	b118      	cbz	r0, 800acb4 <_vfiprintf_r+0x18>
 800acac:	6983      	ldr	r3, [r0, #24]
 800acae:	b90b      	cbnz	r3, 800acb4 <_vfiprintf_r+0x18>
 800acb0:	f000 fb02 	bl	800b2b8 <__sinit>
 800acb4:	4b89      	ldr	r3, [pc, #548]	; (800aedc <_vfiprintf_r+0x240>)
 800acb6:	429d      	cmp	r5, r3
 800acb8:	d11b      	bne.n	800acf2 <_vfiprintf_r+0x56>
 800acba:	6875      	ldr	r5, [r6, #4]
 800acbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acbe:	07d9      	lsls	r1, r3, #31
 800acc0:	d405      	bmi.n	800acce <_vfiprintf_r+0x32>
 800acc2:	89ab      	ldrh	r3, [r5, #12]
 800acc4:	059a      	lsls	r2, r3, #22
 800acc6:	d402      	bmi.n	800acce <_vfiprintf_r+0x32>
 800acc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acca:	f000 fb93 	bl	800b3f4 <__retarget_lock_acquire_recursive>
 800acce:	89ab      	ldrh	r3, [r5, #12]
 800acd0:	071b      	lsls	r3, r3, #28
 800acd2:	d501      	bpl.n	800acd8 <_vfiprintf_r+0x3c>
 800acd4:	692b      	ldr	r3, [r5, #16]
 800acd6:	b9eb      	cbnz	r3, 800ad14 <_vfiprintf_r+0x78>
 800acd8:	4629      	mov	r1, r5
 800acda:	4630      	mov	r0, r6
 800acdc:	f000 f960 	bl	800afa0 <__swsetup_r>
 800ace0:	b1c0      	cbz	r0, 800ad14 <_vfiprintf_r+0x78>
 800ace2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ace4:	07dc      	lsls	r4, r3, #31
 800ace6:	d50e      	bpl.n	800ad06 <_vfiprintf_r+0x6a>
 800ace8:	f04f 30ff 	mov.w	r0, #4294967295
 800acec:	b01d      	add	sp, #116	; 0x74
 800acee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf2:	4b7b      	ldr	r3, [pc, #492]	; (800aee0 <_vfiprintf_r+0x244>)
 800acf4:	429d      	cmp	r5, r3
 800acf6:	d101      	bne.n	800acfc <_vfiprintf_r+0x60>
 800acf8:	68b5      	ldr	r5, [r6, #8]
 800acfa:	e7df      	b.n	800acbc <_vfiprintf_r+0x20>
 800acfc:	4b79      	ldr	r3, [pc, #484]	; (800aee4 <_vfiprintf_r+0x248>)
 800acfe:	429d      	cmp	r5, r3
 800ad00:	bf08      	it	eq
 800ad02:	68f5      	ldreq	r5, [r6, #12]
 800ad04:	e7da      	b.n	800acbc <_vfiprintf_r+0x20>
 800ad06:	89ab      	ldrh	r3, [r5, #12]
 800ad08:	0598      	lsls	r0, r3, #22
 800ad0a:	d4ed      	bmi.n	800ace8 <_vfiprintf_r+0x4c>
 800ad0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad0e:	f000 fb72 	bl	800b3f6 <__retarget_lock_release_recursive>
 800ad12:	e7e9      	b.n	800ace8 <_vfiprintf_r+0x4c>
 800ad14:	2300      	movs	r3, #0
 800ad16:	9309      	str	r3, [sp, #36]	; 0x24
 800ad18:	2320      	movs	r3, #32
 800ad1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad1e:	2330      	movs	r3, #48	; 0x30
 800ad20:	f04f 0901 	mov.w	r9, #1
 800ad24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad28:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800aee8 <_vfiprintf_r+0x24c>
 800ad2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad30:	4623      	mov	r3, r4
 800ad32:	469a      	mov	sl, r3
 800ad34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad38:	b10a      	cbz	r2, 800ad3e <_vfiprintf_r+0xa2>
 800ad3a:	2a25      	cmp	r2, #37	; 0x25
 800ad3c:	d1f9      	bne.n	800ad32 <_vfiprintf_r+0x96>
 800ad3e:	ebba 0b04 	subs.w	fp, sl, r4
 800ad42:	d00b      	beq.n	800ad5c <_vfiprintf_r+0xc0>
 800ad44:	465b      	mov	r3, fp
 800ad46:	4622      	mov	r2, r4
 800ad48:	4629      	mov	r1, r5
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f7ff ff94 	bl	800ac78 <__sfputs_r>
 800ad50:	3001      	adds	r0, #1
 800ad52:	f000 80aa 	beq.w	800aeaa <_vfiprintf_r+0x20e>
 800ad56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad58:	445a      	add	r2, fp
 800ad5a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 80a2 	beq.w	800aeaa <_vfiprintf_r+0x20e>
 800ad66:	2300      	movs	r3, #0
 800ad68:	f04f 32ff 	mov.w	r2, #4294967295
 800ad6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad70:	f10a 0a01 	add.w	sl, sl, #1
 800ad74:	9304      	str	r3, [sp, #16]
 800ad76:	9307      	str	r3, [sp, #28]
 800ad78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad7c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad7e:	4654      	mov	r4, sl
 800ad80:	2205      	movs	r2, #5
 800ad82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad86:	4858      	ldr	r0, [pc, #352]	; (800aee8 <_vfiprintf_r+0x24c>)
 800ad88:	f7fe ff84 	bl	8009c94 <memchr>
 800ad8c:	9a04      	ldr	r2, [sp, #16]
 800ad8e:	b9d8      	cbnz	r0, 800adc8 <_vfiprintf_r+0x12c>
 800ad90:	06d1      	lsls	r1, r2, #27
 800ad92:	bf44      	itt	mi
 800ad94:	2320      	movmi	r3, #32
 800ad96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad9a:	0713      	lsls	r3, r2, #28
 800ad9c:	bf44      	itt	mi
 800ad9e:	232b      	movmi	r3, #43	; 0x2b
 800ada0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ada4:	f89a 3000 	ldrb.w	r3, [sl]
 800ada8:	2b2a      	cmp	r3, #42	; 0x2a
 800adaa:	d015      	beq.n	800add8 <_vfiprintf_r+0x13c>
 800adac:	4654      	mov	r4, sl
 800adae:	2000      	movs	r0, #0
 800adb0:	f04f 0c0a 	mov.w	ip, #10
 800adb4:	9a07      	ldr	r2, [sp, #28]
 800adb6:	4621      	mov	r1, r4
 800adb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adbc:	3b30      	subs	r3, #48	; 0x30
 800adbe:	2b09      	cmp	r3, #9
 800adc0:	d94e      	bls.n	800ae60 <_vfiprintf_r+0x1c4>
 800adc2:	b1b0      	cbz	r0, 800adf2 <_vfiprintf_r+0x156>
 800adc4:	9207      	str	r2, [sp, #28]
 800adc6:	e014      	b.n	800adf2 <_vfiprintf_r+0x156>
 800adc8:	eba0 0308 	sub.w	r3, r0, r8
 800adcc:	fa09 f303 	lsl.w	r3, r9, r3
 800add0:	4313      	orrs	r3, r2
 800add2:	46a2      	mov	sl, r4
 800add4:	9304      	str	r3, [sp, #16]
 800add6:	e7d2      	b.n	800ad7e <_vfiprintf_r+0xe2>
 800add8:	9b03      	ldr	r3, [sp, #12]
 800adda:	1d19      	adds	r1, r3, #4
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	9103      	str	r1, [sp, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	bfbb      	ittet	lt
 800ade4:	425b      	neglt	r3, r3
 800ade6:	f042 0202 	orrlt.w	r2, r2, #2
 800adea:	9307      	strge	r3, [sp, #28]
 800adec:	9307      	strlt	r3, [sp, #28]
 800adee:	bfb8      	it	lt
 800adf0:	9204      	strlt	r2, [sp, #16]
 800adf2:	7823      	ldrb	r3, [r4, #0]
 800adf4:	2b2e      	cmp	r3, #46	; 0x2e
 800adf6:	d10c      	bne.n	800ae12 <_vfiprintf_r+0x176>
 800adf8:	7863      	ldrb	r3, [r4, #1]
 800adfa:	2b2a      	cmp	r3, #42	; 0x2a
 800adfc:	d135      	bne.n	800ae6a <_vfiprintf_r+0x1ce>
 800adfe:	9b03      	ldr	r3, [sp, #12]
 800ae00:	3402      	adds	r4, #2
 800ae02:	1d1a      	adds	r2, r3, #4
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	9203      	str	r2, [sp, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bfb8      	it	lt
 800ae0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae10:	9305      	str	r3, [sp, #20]
 800ae12:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800aeec <_vfiprintf_r+0x250>
 800ae16:	2203      	movs	r2, #3
 800ae18:	4650      	mov	r0, sl
 800ae1a:	7821      	ldrb	r1, [r4, #0]
 800ae1c:	f7fe ff3a 	bl	8009c94 <memchr>
 800ae20:	b140      	cbz	r0, 800ae34 <_vfiprintf_r+0x198>
 800ae22:	2340      	movs	r3, #64	; 0x40
 800ae24:	eba0 000a 	sub.w	r0, r0, sl
 800ae28:	fa03 f000 	lsl.w	r0, r3, r0
 800ae2c:	9b04      	ldr	r3, [sp, #16]
 800ae2e:	3401      	adds	r4, #1
 800ae30:	4303      	orrs	r3, r0
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae38:	2206      	movs	r2, #6
 800ae3a:	482d      	ldr	r0, [pc, #180]	; (800aef0 <_vfiprintf_r+0x254>)
 800ae3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae40:	f7fe ff28 	bl	8009c94 <memchr>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d03f      	beq.n	800aec8 <_vfiprintf_r+0x22c>
 800ae48:	4b2a      	ldr	r3, [pc, #168]	; (800aef4 <_vfiprintf_r+0x258>)
 800ae4a:	bb1b      	cbnz	r3, 800ae94 <_vfiprintf_r+0x1f8>
 800ae4c:	9b03      	ldr	r3, [sp, #12]
 800ae4e:	3307      	adds	r3, #7
 800ae50:	f023 0307 	bic.w	r3, r3, #7
 800ae54:	3308      	adds	r3, #8
 800ae56:	9303      	str	r3, [sp, #12]
 800ae58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae5a:	443b      	add	r3, r7
 800ae5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae5e:	e767      	b.n	800ad30 <_vfiprintf_r+0x94>
 800ae60:	460c      	mov	r4, r1
 800ae62:	2001      	movs	r0, #1
 800ae64:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae68:	e7a5      	b.n	800adb6 <_vfiprintf_r+0x11a>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	f04f 0c0a 	mov.w	ip, #10
 800ae70:	4619      	mov	r1, r3
 800ae72:	3401      	adds	r4, #1
 800ae74:	9305      	str	r3, [sp, #20]
 800ae76:	4620      	mov	r0, r4
 800ae78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae7c:	3a30      	subs	r2, #48	; 0x30
 800ae7e:	2a09      	cmp	r2, #9
 800ae80:	d903      	bls.n	800ae8a <_vfiprintf_r+0x1ee>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0c5      	beq.n	800ae12 <_vfiprintf_r+0x176>
 800ae86:	9105      	str	r1, [sp, #20]
 800ae88:	e7c3      	b.n	800ae12 <_vfiprintf_r+0x176>
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae92:	e7f0      	b.n	800ae76 <_vfiprintf_r+0x1da>
 800ae94:	ab03      	add	r3, sp, #12
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	462a      	mov	r2, r5
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	4b16      	ldr	r3, [pc, #88]	; (800aef8 <_vfiprintf_r+0x25c>)
 800ae9e:	a904      	add	r1, sp, #16
 800aea0:	f7fc faee 	bl	8007480 <_printf_float>
 800aea4:	4607      	mov	r7, r0
 800aea6:	1c78      	adds	r0, r7, #1
 800aea8:	d1d6      	bne.n	800ae58 <_vfiprintf_r+0x1bc>
 800aeaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aeac:	07d9      	lsls	r1, r3, #31
 800aeae:	d405      	bmi.n	800aebc <_vfiprintf_r+0x220>
 800aeb0:	89ab      	ldrh	r3, [r5, #12]
 800aeb2:	059a      	lsls	r2, r3, #22
 800aeb4:	d402      	bmi.n	800aebc <_vfiprintf_r+0x220>
 800aeb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeb8:	f000 fa9d 	bl	800b3f6 <__retarget_lock_release_recursive>
 800aebc:	89ab      	ldrh	r3, [r5, #12]
 800aebe:	065b      	lsls	r3, r3, #25
 800aec0:	f53f af12 	bmi.w	800ace8 <_vfiprintf_r+0x4c>
 800aec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aec6:	e711      	b.n	800acec <_vfiprintf_r+0x50>
 800aec8:	ab03      	add	r3, sp, #12
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	462a      	mov	r2, r5
 800aece:	4630      	mov	r0, r6
 800aed0:	4b09      	ldr	r3, [pc, #36]	; (800aef8 <_vfiprintf_r+0x25c>)
 800aed2:	a904      	add	r1, sp, #16
 800aed4:	f7fc fd70 	bl	80079b8 <_printf_i>
 800aed8:	e7e4      	b.n	800aea4 <_vfiprintf_r+0x208>
 800aeda:	bf00      	nop
 800aedc:	0800c49c 	.word	0x0800c49c
 800aee0:	0800c4bc 	.word	0x0800c4bc
 800aee4:	0800c47c 	.word	0x0800c47c
 800aee8:	0800c32c 	.word	0x0800c32c
 800aeec:	0800c332 	.word	0x0800c332
 800aef0:	0800c336 	.word	0x0800c336
 800aef4:	08007481 	.word	0x08007481
 800aef8:	0800ac79 	.word	0x0800ac79

0800aefc <__swbuf_r>:
 800aefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefe:	460e      	mov	r6, r1
 800af00:	4614      	mov	r4, r2
 800af02:	4605      	mov	r5, r0
 800af04:	b118      	cbz	r0, 800af0e <__swbuf_r+0x12>
 800af06:	6983      	ldr	r3, [r0, #24]
 800af08:	b90b      	cbnz	r3, 800af0e <__swbuf_r+0x12>
 800af0a:	f000 f9d5 	bl	800b2b8 <__sinit>
 800af0e:	4b21      	ldr	r3, [pc, #132]	; (800af94 <__swbuf_r+0x98>)
 800af10:	429c      	cmp	r4, r3
 800af12:	d12b      	bne.n	800af6c <__swbuf_r+0x70>
 800af14:	686c      	ldr	r4, [r5, #4]
 800af16:	69a3      	ldr	r3, [r4, #24]
 800af18:	60a3      	str	r3, [r4, #8]
 800af1a:	89a3      	ldrh	r3, [r4, #12]
 800af1c:	071a      	lsls	r2, r3, #28
 800af1e:	d52f      	bpl.n	800af80 <__swbuf_r+0x84>
 800af20:	6923      	ldr	r3, [r4, #16]
 800af22:	b36b      	cbz	r3, 800af80 <__swbuf_r+0x84>
 800af24:	6923      	ldr	r3, [r4, #16]
 800af26:	6820      	ldr	r0, [r4, #0]
 800af28:	b2f6      	uxtb	r6, r6
 800af2a:	1ac0      	subs	r0, r0, r3
 800af2c:	6963      	ldr	r3, [r4, #20]
 800af2e:	4637      	mov	r7, r6
 800af30:	4283      	cmp	r3, r0
 800af32:	dc04      	bgt.n	800af3e <__swbuf_r+0x42>
 800af34:	4621      	mov	r1, r4
 800af36:	4628      	mov	r0, r5
 800af38:	f000 f92a 	bl	800b190 <_fflush_r>
 800af3c:	bb30      	cbnz	r0, 800af8c <__swbuf_r+0x90>
 800af3e:	68a3      	ldr	r3, [r4, #8]
 800af40:	3001      	adds	r0, #1
 800af42:	3b01      	subs	r3, #1
 800af44:	60a3      	str	r3, [r4, #8]
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	1c5a      	adds	r2, r3, #1
 800af4a:	6022      	str	r2, [r4, #0]
 800af4c:	701e      	strb	r6, [r3, #0]
 800af4e:	6963      	ldr	r3, [r4, #20]
 800af50:	4283      	cmp	r3, r0
 800af52:	d004      	beq.n	800af5e <__swbuf_r+0x62>
 800af54:	89a3      	ldrh	r3, [r4, #12]
 800af56:	07db      	lsls	r3, r3, #31
 800af58:	d506      	bpl.n	800af68 <__swbuf_r+0x6c>
 800af5a:	2e0a      	cmp	r6, #10
 800af5c:	d104      	bne.n	800af68 <__swbuf_r+0x6c>
 800af5e:	4621      	mov	r1, r4
 800af60:	4628      	mov	r0, r5
 800af62:	f000 f915 	bl	800b190 <_fflush_r>
 800af66:	b988      	cbnz	r0, 800af8c <__swbuf_r+0x90>
 800af68:	4638      	mov	r0, r7
 800af6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af6c:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <__swbuf_r+0x9c>)
 800af6e:	429c      	cmp	r4, r3
 800af70:	d101      	bne.n	800af76 <__swbuf_r+0x7a>
 800af72:	68ac      	ldr	r4, [r5, #8]
 800af74:	e7cf      	b.n	800af16 <__swbuf_r+0x1a>
 800af76:	4b09      	ldr	r3, [pc, #36]	; (800af9c <__swbuf_r+0xa0>)
 800af78:	429c      	cmp	r4, r3
 800af7a:	bf08      	it	eq
 800af7c:	68ec      	ldreq	r4, [r5, #12]
 800af7e:	e7ca      	b.n	800af16 <__swbuf_r+0x1a>
 800af80:	4621      	mov	r1, r4
 800af82:	4628      	mov	r0, r5
 800af84:	f000 f80c 	bl	800afa0 <__swsetup_r>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d0cb      	beq.n	800af24 <__swbuf_r+0x28>
 800af8c:	f04f 37ff 	mov.w	r7, #4294967295
 800af90:	e7ea      	b.n	800af68 <__swbuf_r+0x6c>
 800af92:	bf00      	nop
 800af94:	0800c49c 	.word	0x0800c49c
 800af98:	0800c4bc 	.word	0x0800c4bc
 800af9c:	0800c47c 	.word	0x0800c47c

0800afa0 <__swsetup_r>:
 800afa0:	4b32      	ldr	r3, [pc, #200]	; (800b06c <__swsetup_r+0xcc>)
 800afa2:	b570      	push	{r4, r5, r6, lr}
 800afa4:	681d      	ldr	r5, [r3, #0]
 800afa6:	4606      	mov	r6, r0
 800afa8:	460c      	mov	r4, r1
 800afaa:	b125      	cbz	r5, 800afb6 <__swsetup_r+0x16>
 800afac:	69ab      	ldr	r3, [r5, #24]
 800afae:	b913      	cbnz	r3, 800afb6 <__swsetup_r+0x16>
 800afb0:	4628      	mov	r0, r5
 800afb2:	f000 f981 	bl	800b2b8 <__sinit>
 800afb6:	4b2e      	ldr	r3, [pc, #184]	; (800b070 <__swsetup_r+0xd0>)
 800afb8:	429c      	cmp	r4, r3
 800afba:	d10f      	bne.n	800afdc <__swsetup_r+0x3c>
 800afbc:	686c      	ldr	r4, [r5, #4]
 800afbe:	89a3      	ldrh	r3, [r4, #12]
 800afc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afc4:	0719      	lsls	r1, r3, #28
 800afc6:	d42c      	bmi.n	800b022 <__swsetup_r+0x82>
 800afc8:	06dd      	lsls	r5, r3, #27
 800afca:	d411      	bmi.n	800aff0 <__swsetup_r+0x50>
 800afcc:	2309      	movs	r3, #9
 800afce:	6033      	str	r3, [r6, #0]
 800afd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800afd4:	f04f 30ff 	mov.w	r0, #4294967295
 800afd8:	81a3      	strh	r3, [r4, #12]
 800afda:	e03e      	b.n	800b05a <__swsetup_r+0xba>
 800afdc:	4b25      	ldr	r3, [pc, #148]	; (800b074 <__swsetup_r+0xd4>)
 800afde:	429c      	cmp	r4, r3
 800afe0:	d101      	bne.n	800afe6 <__swsetup_r+0x46>
 800afe2:	68ac      	ldr	r4, [r5, #8]
 800afe4:	e7eb      	b.n	800afbe <__swsetup_r+0x1e>
 800afe6:	4b24      	ldr	r3, [pc, #144]	; (800b078 <__swsetup_r+0xd8>)
 800afe8:	429c      	cmp	r4, r3
 800afea:	bf08      	it	eq
 800afec:	68ec      	ldreq	r4, [r5, #12]
 800afee:	e7e6      	b.n	800afbe <__swsetup_r+0x1e>
 800aff0:	0758      	lsls	r0, r3, #29
 800aff2:	d512      	bpl.n	800b01a <__swsetup_r+0x7a>
 800aff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aff6:	b141      	cbz	r1, 800b00a <__swsetup_r+0x6a>
 800aff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800affc:	4299      	cmp	r1, r3
 800affe:	d002      	beq.n	800b006 <__swsetup_r+0x66>
 800b000:	4630      	mov	r0, r6
 800b002:	f7ff fb2f 	bl	800a664 <_free_r>
 800b006:	2300      	movs	r3, #0
 800b008:	6363      	str	r3, [r4, #52]	; 0x34
 800b00a:	89a3      	ldrh	r3, [r4, #12]
 800b00c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b010:	81a3      	strh	r3, [r4, #12]
 800b012:	2300      	movs	r3, #0
 800b014:	6063      	str	r3, [r4, #4]
 800b016:	6923      	ldr	r3, [r4, #16]
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	89a3      	ldrh	r3, [r4, #12]
 800b01c:	f043 0308 	orr.w	r3, r3, #8
 800b020:	81a3      	strh	r3, [r4, #12]
 800b022:	6923      	ldr	r3, [r4, #16]
 800b024:	b94b      	cbnz	r3, 800b03a <__swsetup_r+0x9a>
 800b026:	89a3      	ldrh	r3, [r4, #12]
 800b028:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b030:	d003      	beq.n	800b03a <__swsetup_r+0x9a>
 800b032:	4621      	mov	r1, r4
 800b034:	4630      	mov	r0, r6
 800b036:	f000 fa05 	bl	800b444 <__smakebuf_r>
 800b03a:	89a0      	ldrh	r0, [r4, #12]
 800b03c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b040:	f010 0301 	ands.w	r3, r0, #1
 800b044:	d00a      	beq.n	800b05c <__swsetup_r+0xbc>
 800b046:	2300      	movs	r3, #0
 800b048:	60a3      	str	r3, [r4, #8]
 800b04a:	6963      	ldr	r3, [r4, #20]
 800b04c:	425b      	negs	r3, r3
 800b04e:	61a3      	str	r3, [r4, #24]
 800b050:	6923      	ldr	r3, [r4, #16]
 800b052:	b943      	cbnz	r3, 800b066 <__swsetup_r+0xc6>
 800b054:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b058:	d1ba      	bne.n	800afd0 <__swsetup_r+0x30>
 800b05a:	bd70      	pop	{r4, r5, r6, pc}
 800b05c:	0781      	lsls	r1, r0, #30
 800b05e:	bf58      	it	pl
 800b060:	6963      	ldrpl	r3, [r4, #20]
 800b062:	60a3      	str	r3, [r4, #8]
 800b064:	e7f4      	b.n	800b050 <__swsetup_r+0xb0>
 800b066:	2000      	movs	r0, #0
 800b068:	e7f7      	b.n	800b05a <__swsetup_r+0xba>
 800b06a:	bf00      	nop
 800b06c:	20000014 	.word	0x20000014
 800b070:	0800c49c 	.word	0x0800c49c
 800b074:	0800c4bc 	.word	0x0800c4bc
 800b078:	0800c47c 	.word	0x0800c47c

0800b07c <abort>:
 800b07c:	2006      	movs	r0, #6
 800b07e:	b508      	push	{r3, lr}
 800b080:	f000 fa50 	bl	800b524 <raise>
 800b084:	2001      	movs	r0, #1
 800b086:	f7f7 fd26 	bl	8002ad6 <_exit>
	...

0800b08c <__sflush_r>:
 800b08c:	898a      	ldrh	r2, [r1, #12]
 800b08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b090:	4605      	mov	r5, r0
 800b092:	0710      	lsls	r0, r2, #28
 800b094:	460c      	mov	r4, r1
 800b096:	d457      	bmi.n	800b148 <__sflush_r+0xbc>
 800b098:	684b      	ldr	r3, [r1, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	dc04      	bgt.n	800b0a8 <__sflush_r+0x1c>
 800b09e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	dc01      	bgt.n	800b0a8 <__sflush_r+0x1c>
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0aa:	2e00      	cmp	r6, #0
 800b0ac:	d0fa      	beq.n	800b0a4 <__sflush_r+0x18>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0b4:	682f      	ldr	r7, [r5, #0]
 800b0b6:	602b      	str	r3, [r5, #0]
 800b0b8:	d032      	beq.n	800b120 <__sflush_r+0x94>
 800b0ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0bc:	89a3      	ldrh	r3, [r4, #12]
 800b0be:	075a      	lsls	r2, r3, #29
 800b0c0:	d505      	bpl.n	800b0ce <__sflush_r+0x42>
 800b0c2:	6863      	ldr	r3, [r4, #4]
 800b0c4:	1ac0      	subs	r0, r0, r3
 800b0c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0c8:	b10b      	cbz	r3, 800b0ce <__sflush_r+0x42>
 800b0ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0cc:	1ac0      	subs	r0, r0, r3
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	6a21      	ldr	r1, [r4, #32]
 800b0d8:	47b0      	blx	r6
 800b0da:	1c43      	adds	r3, r0, #1
 800b0dc:	89a3      	ldrh	r3, [r4, #12]
 800b0de:	d106      	bne.n	800b0ee <__sflush_r+0x62>
 800b0e0:	6829      	ldr	r1, [r5, #0]
 800b0e2:	291d      	cmp	r1, #29
 800b0e4:	d82c      	bhi.n	800b140 <__sflush_r+0xb4>
 800b0e6:	4a29      	ldr	r2, [pc, #164]	; (800b18c <__sflush_r+0x100>)
 800b0e8:	40ca      	lsrs	r2, r1
 800b0ea:	07d6      	lsls	r6, r2, #31
 800b0ec:	d528      	bpl.n	800b140 <__sflush_r+0xb4>
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	6062      	str	r2, [r4, #4]
 800b0f2:	6922      	ldr	r2, [r4, #16]
 800b0f4:	04d9      	lsls	r1, r3, #19
 800b0f6:	6022      	str	r2, [r4, #0]
 800b0f8:	d504      	bpl.n	800b104 <__sflush_r+0x78>
 800b0fa:	1c42      	adds	r2, r0, #1
 800b0fc:	d101      	bne.n	800b102 <__sflush_r+0x76>
 800b0fe:	682b      	ldr	r3, [r5, #0]
 800b100:	b903      	cbnz	r3, 800b104 <__sflush_r+0x78>
 800b102:	6560      	str	r0, [r4, #84]	; 0x54
 800b104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b106:	602f      	str	r7, [r5, #0]
 800b108:	2900      	cmp	r1, #0
 800b10a:	d0cb      	beq.n	800b0a4 <__sflush_r+0x18>
 800b10c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b110:	4299      	cmp	r1, r3
 800b112:	d002      	beq.n	800b11a <__sflush_r+0x8e>
 800b114:	4628      	mov	r0, r5
 800b116:	f7ff faa5 	bl	800a664 <_free_r>
 800b11a:	2000      	movs	r0, #0
 800b11c:	6360      	str	r0, [r4, #52]	; 0x34
 800b11e:	e7c2      	b.n	800b0a6 <__sflush_r+0x1a>
 800b120:	6a21      	ldr	r1, [r4, #32]
 800b122:	2301      	movs	r3, #1
 800b124:	4628      	mov	r0, r5
 800b126:	47b0      	blx	r6
 800b128:	1c41      	adds	r1, r0, #1
 800b12a:	d1c7      	bne.n	800b0bc <__sflush_r+0x30>
 800b12c:	682b      	ldr	r3, [r5, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d0c4      	beq.n	800b0bc <__sflush_r+0x30>
 800b132:	2b1d      	cmp	r3, #29
 800b134:	d001      	beq.n	800b13a <__sflush_r+0xae>
 800b136:	2b16      	cmp	r3, #22
 800b138:	d101      	bne.n	800b13e <__sflush_r+0xb2>
 800b13a:	602f      	str	r7, [r5, #0]
 800b13c:	e7b2      	b.n	800b0a4 <__sflush_r+0x18>
 800b13e:	89a3      	ldrh	r3, [r4, #12]
 800b140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b144:	81a3      	strh	r3, [r4, #12]
 800b146:	e7ae      	b.n	800b0a6 <__sflush_r+0x1a>
 800b148:	690f      	ldr	r7, [r1, #16]
 800b14a:	2f00      	cmp	r7, #0
 800b14c:	d0aa      	beq.n	800b0a4 <__sflush_r+0x18>
 800b14e:	0793      	lsls	r3, r2, #30
 800b150:	bf18      	it	ne
 800b152:	2300      	movne	r3, #0
 800b154:	680e      	ldr	r6, [r1, #0]
 800b156:	bf08      	it	eq
 800b158:	694b      	ldreq	r3, [r1, #20]
 800b15a:	1bf6      	subs	r6, r6, r7
 800b15c:	600f      	str	r7, [r1, #0]
 800b15e:	608b      	str	r3, [r1, #8]
 800b160:	2e00      	cmp	r6, #0
 800b162:	dd9f      	ble.n	800b0a4 <__sflush_r+0x18>
 800b164:	4633      	mov	r3, r6
 800b166:	463a      	mov	r2, r7
 800b168:	4628      	mov	r0, r5
 800b16a:	6a21      	ldr	r1, [r4, #32]
 800b16c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b170:	47e0      	blx	ip
 800b172:	2800      	cmp	r0, #0
 800b174:	dc06      	bgt.n	800b184 <__sflush_r+0xf8>
 800b176:	89a3      	ldrh	r3, [r4, #12]
 800b178:	f04f 30ff 	mov.w	r0, #4294967295
 800b17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b180:	81a3      	strh	r3, [r4, #12]
 800b182:	e790      	b.n	800b0a6 <__sflush_r+0x1a>
 800b184:	4407      	add	r7, r0
 800b186:	1a36      	subs	r6, r6, r0
 800b188:	e7ea      	b.n	800b160 <__sflush_r+0xd4>
 800b18a:	bf00      	nop
 800b18c:	20400001 	.word	0x20400001

0800b190 <_fflush_r>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	690b      	ldr	r3, [r1, #16]
 800b194:	4605      	mov	r5, r0
 800b196:	460c      	mov	r4, r1
 800b198:	b913      	cbnz	r3, 800b1a0 <_fflush_r+0x10>
 800b19a:	2500      	movs	r5, #0
 800b19c:	4628      	mov	r0, r5
 800b19e:	bd38      	pop	{r3, r4, r5, pc}
 800b1a0:	b118      	cbz	r0, 800b1aa <_fflush_r+0x1a>
 800b1a2:	6983      	ldr	r3, [r0, #24]
 800b1a4:	b90b      	cbnz	r3, 800b1aa <_fflush_r+0x1a>
 800b1a6:	f000 f887 	bl	800b2b8 <__sinit>
 800b1aa:	4b14      	ldr	r3, [pc, #80]	; (800b1fc <_fflush_r+0x6c>)
 800b1ac:	429c      	cmp	r4, r3
 800b1ae:	d11b      	bne.n	800b1e8 <_fflush_r+0x58>
 800b1b0:	686c      	ldr	r4, [r5, #4]
 800b1b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d0ef      	beq.n	800b19a <_fflush_r+0xa>
 800b1ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1bc:	07d0      	lsls	r0, r2, #31
 800b1be:	d404      	bmi.n	800b1ca <_fflush_r+0x3a>
 800b1c0:	0599      	lsls	r1, r3, #22
 800b1c2:	d402      	bmi.n	800b1ca <_fflush_r+0x3a>
 800b1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1c6:	f000 f915 	bl	800b3f4 <__retarget_lock_acquire_recursive>
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	f7ff ff5d 	bl	800b08c <__sflush_r>
 800b1d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1d4:	4605      	mov	r5, r0
 800b1d6:	07da      	lsls	r2, r3, #31
 800b1d8:	d4e0      	bmi.n	800b19c <_fflush_r+0xc>
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	059b      	lsls	r3, r3, #22
 800b1de:	d4dd      	bmi.n	800b19c <_fflush_r+0xc>
 800b1e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1e2:	f000 f908 	bl	800b3f6 <__retarget_lock_release_recursive>
 800b1e6:	e7d9      	b.n	800b19c <_fflush_r+0xc>
 800b1e8:	4b05      	ldr	r3, [pc, #20]	; (800b200 <_fflush_r+0x70>)
 800b1ea:	429c      	cmp	r4, r3
 800b1ec:	d101      	bne.n	800b1f2 <_fflush_r+0x62>
 800b1ee:	68ac      	ldr	r4, [r5, #8]
 800b1f0:	e7df      	b.n	800b1b2 <_fflush_r+0x22>
 800b1f2:	4b04      	ldr	r3, [pc, #16]	; (800b204 <_fflush_r+0x74>)
 800b1f4:	429c      	cmp	r4, r3
 800b1f6:	bf08      	it	eq
 800b1f8:	68ec      	ldreq	r4, [r5, #12]
 800b1fa:	e7da      	b.n	800b1b2 <_fflush_r+0x22>
 800b1fc:	0800c49c 	.word	0x0800c49c
 800b200:	0800c4bc 	.word	0x0800c4bc
 800b204:	0800c47c 	.word	0x0800c47c

0800b208 <std>:
 800b208:	2300      	movs	r3, #0
 800b20a:	b510      	push	{r4, lr}
 800b20c:	4604      	mov	r4, r0
 800b20e:	e9c0 3300 	strd	r3, r3, [r0]
 800b212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b216:	6083      	str	r3, [r0, #8]
 800b218:	8181      	strh	r1, [r0, #12]
 800b21a:	6643      	str	r3, [r0, #100]	; 0x64
 800b21c:	81c2      	strh	r2, [r0, #14]
 800b21e:	6183      	str	r3, [r0, #24]
 800b220:	4619      	mov	r1, r3
 800b222:	2208      	movs	r2, #8
 800b224:	305c      	adds	r0, #92	; 0x5c
 800b226:	f7fc f885 	bl	8007334 <memset>
 800b22a:	4b05      	ldr	r3, [pc, #20]	; (800b240 <std+0x38>)
 800b22c:	6224      	str	r4, [r4, #32]
 800b22e:	6263      	str	r3, [r4, #36]	; 0x24
 800b230:	4b04      	ldr	r3, [pc, #16]	; (800b244 <std+0x3c>)
 800b232:	62a3      	str	r3, [r4, #40]	; 0x28
 800b234:	4b04      	ldr	r3, [pc, #16]	; (800b248 <std+0x40>)
 800b236:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b238:	4b04      	ldr	r3, [pc, #16]	; (800b24c <std+0x44>)
 800b23a:	6323      	str	r3, [r4, #48]	; 0x30
 800b23c:	bd10      	pop	{r4, pc}
 800b23e:	bf00      	nop
 800b240:	0800b55d 	.word	0x0800b55d
 800b244:	0800b57f 	.word	0x0800b57f
 800b248:	0800b5b7 	.word	0x0800b5b7
 800b24c:	0800b5db 	.word	0x0800b5db

0800b250 <_cleanup_r>:
 800b250:	4901      	ldr	r1, [pc, #4]	; (800b258 <_cleanup_r+0x8>)
 800b252:	f000 b8af 	b.w	800b3b4 <_fwalk_reent>
 800b256:	bf00      	nop
 800b258:	0800b191 	.word	0x0800b191

0800b25c <__sfmoreglue>:
 800b25c:	2268      	movs	r2, #104	; 0x68
 800b25e:	b570      	push	{r4, r5, r6, lr}
 800b260:	1e4d      	subs	r5, r1, #1
 800b262:	4355      	muls	r5, r2
 800b264:	460e      	mov	r6, r1
 800b266:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b26a:	f7ff fa63 	bl	800a734 <_malloc_r>
 800b26e:	4604      	mov	r4, r0
 800b270:	b140      	cbz	r0, 800b284 <__sfmoreglue+0x28>
 800b272:	2100      	movs	r1, #0
 800b274:	e9c0 1600 	strd	r1, r6, [r0]
 800b278:	300c      	adds	r0, #12
 800b27a:	60a0      	str	r0, [r4, #8]
 800b27c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b280:	f7fc f858 	bl	8007334 <memset>
 800b284:	4620      	mov	r0, r4
 800b286:	bd70      	pop	{r4, r5, r6, pc}

0800b288 <__sfp_lock_acquire>:
 800b288:	4801      	ldr	r0, [pc, #4]	; (800b290 <__sfp_lock_acquire+0x8>)
 800b28a:	f000 b8b3 	b.w	800b3f4 <__retarget_lock_acquire_recursive>
 800b28e:	bf00      	nop
 800b290:	20000435 	.word	0x20000435

0800b294 <__sfp_lock_release>:
 800b294:	4801      	ldr	r0, [pc, #4]	; (800b29c <__sfp_lock_release+0x8>)
 800b296:	f000 b8ae 	b.w	800b3f6 <__retarget_lock_release_recursive>
 800b29a:	bf00      	nop
 800b29c:	20000435 	.word	0x20000435

0800b2a0 <__sinit_lock_acquire>:
 800b2a0:	4801      	ldr	r0, [pc, #4]	; (800b2a8 <__sinit_lock_acquire+0x8>)
 800b2a2:	f000 b8a7 	b.w	800b3f4 <__retarget_lock_acquire_recursive>
 800b2a6:	bf00      	nop
 800b2a8:	20000436 	.word	0x20000436

0800b2ac <__sinit_lock_release>:
 800b2ac:	4801      	ldr	r0, [pc, #4]	; (800b2b4 <__sinit_lock_release+0x8>)
 800b2ae:	f000 b8a2 	b.w	800b3f6 <__retarget_lock_release_recursive>
 800b2b2:	bf00      	nop
 800b2b4:	20000436 	.word	0x20000436

0800b2b8 <__sinit>:
 800b2b8:	b510      	push	{r4, lr}
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	f7ff fff0 	bl	800b2a0 <__sinit_lock_acquire>
 800b2c0:	69a3      	ldr	r3, [r4, #24]
 800b2c2:	b11b      	cbz	r3, 800b2cc <__sinit+0x14>
 800b2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2c8:	f7ff bff0 	b.w	800b2ac <__sinit_lock_release>
 800b2cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b2d0:	6523      	str	r3, [r4, #80]	; 0x50
 800b2d2:	4b13      	ldr	r3, [pc, #76]	; (800b320 <__sinit+0x68>)
 800b2d4:	4a13      	ldr	r2, [pc, #76]	; (800b324 <__sinit+0x6c>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b2da:	42a3      	cmp	r3, r4
 800b2dc:	bf08      	it	eq
 800b2de:	2301      	moveq	r3, #1
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	bf08      	it	eq
 800b2e4:	61a3      	streq	r3, [r4, #24]
 800b2e6:	f000 f81f 	bl	800b328 <__sfp>
 800b2ea:	6060      	str	r0, [r4, #4]
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f000 f81b 	bl	800b328 <__sfp>
 800b2f2:	60a0      	str	r0, [r4, #8]
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	f000 f817 	bl	800b328 <__sfp>
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	2104      	movs	r1, #4
 800b2fe:	60e0      	str	r0, [r4, #12]
 800b300:	6860      	ldr	r0, [r4, #4]
 800b302:	f7ff ff81 	bl	800b208 <std>
 800b306:	2201      	movs	r2, #1
 800b308:	2109      	movs	r1, #9
 800b30a:	68a0      	ldr	r0, [r4, #8]
 800b30c:	f7ff ff7c 	bl	800b208 <std>
 800b310:	2202      	movs	r2, #2
 800b312:	2112      	movs	r1, #18
 800b314:	68e0      	ldr	r0, [r4, #12]
 800b316:	f7ff ff77 	bl	800b208 <std>
 800b31a:	2301      	movs	r3, #1
 800b31c:	61a3      	str	r3, [r4, #24]
 800b31e:	e7d1      	b.n	800b2c4 <__sinit+0xc>
 800b320:	0800c040 	.word	0x0800c040
 800b324:	0800b251 	.word	0x0800b251

0800b328 <__sfp>:
 800b328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32a:	4607      	mov	r7, r0
 800b32c:	f7ff ffac 	bl	800b288 <__sfp_lock_acquire>
 800b330:	4b1e      	ldr	r3, [pc, #120]	; (800b3ac <__sfp+0x84>)
 800b332:	681e      	ldr	r6, [r3, #0]
 800b334:	69b3      	ldr	r3, [r6, #24]
 800b336:	b913      	cbnz	r3, 800b33e <__sfp+0x16>
 800b338:	4630      	mov	r0, r6
 800b33a:	f7ff ffbd 	bl	800b2b8 <__sinit>
 800b33e:	3648      	adds	r6, #72	; 0x48
 800b340:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b344:	3b01      	subs	r3, #1
 800b346:	d503      	bpl.n	800b350 <__sfp+0x28>
 800b348:	6833      	ldr	r3, [r6, #0]
 800b34a:	b30b      	cbz	r3, 800b390 <__sfp+0x68>
 800b34c:	6836      	ldr	r6, [r6, #0]
 800b34e:	e7f7      	b.n	800b340 <__sfp+0x18>
 800b350:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b354:	b9d5      	cbnz	r5, 800b38c <__sfp+0x64>
 800b356:	4b16      	ldr	r3, [pc, #88]	; (800b3b0 <__sfp+0x88>)
 800b358:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b35c:	60e3      	str	r3, [r4, #12]
 800b35e:	6665      	str	r5, [r4, #100]	; 0x64
 800b360:	f000 f847 	bl	800b3f2 <__retarget_lock_init_recursive>
 800b364:	f7ff ff96 	bl	800b294 <__sfp_lock_release>
 800b368:	2208      	movs	r2, #8
 800b36a:	4629      	mov	r1, r5
 800b36c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b370:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b374:	6025      	str	r5, [r4, #0]
 800b376:	61a5      	str	r5, [r4, #24]
 800b378:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b37c:	f7fb ffda 	bl	8007334 <memset>
 800b380:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b384:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b388:	4620      	mov	r0, r4
 800b38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b38c:	3468      	adds	r4, #104	; 0x68
 800b38e:	e7d9      	b.n	800b344 <__sfp+0x1c>
 800b390:	2104      	movs	r1, #4
 800b392:	4638      	mov	r0, r7
 800b394:	f7ff ff62 	bl	800b25c <__sfmoreglue>
 800b398:	4604      	mov	r4, r0
 800b39a:	6030      	str	r0, [r6, #0]
 800b39c:	2800      	cmp	r0, #0
 800b39e:	d1d5      	bne.n	800b34c <__sfp+0x24>
 800b3a0:	f7ff ff78 	bl	800b294 <__sfp_lock_release>
 800b3a4:	230c      	movs	r3, #12
 800b3a6:	603b      	str	r3, [r7, #0]
 800b3a8:	e7ee      	b.n	800b388 <__sfp+0x60>
 800b3aa:	bf00      	nop
 800b3ac:	0800c040 	.word	0x0800c040
 800b3b0:	ffff0001 	.word	0xffff0001

0800b3b4 <_fwalk_reent>:
 800b3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	4688      	mov	r8, r1
 800b3bc:	2700      	movs	r7, #0
 800b3be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b3c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3c6:	f1b9 0901 	subs.w	r9, r9, #1
 800b3ca:	d505      	bpl.n	800b3d8 <_fwalk_reent+0x24>
 800b3cc:	6824      	ldr	r4, [r4, #0]
 800b3ce:	2c00      	cmp	r4, #0
 800b3d0:	d1f7      	bne.n	800b3c2 <_fwalk_reent+0xe>
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3d8:	89ab      	ldrh	r3, [r5, #12]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d907      	bls.n	800b3ee <_fwalk_reent+0x3a>
 800b3de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	d003      	beq.n	800b3ee <_fwalk_reent+0x3a>
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	47c0      	blx	r8
 800b3ec:	4307      	orrs	r7, r0
 800b3ee:	3568      	adds	r5, #104	; 0x68
 800b3f0:	e7e9      	b.n	800b3c6 <_fwalk_reent+0x12>

0800b3f2 <__retarget_lock_init_recursive>:
 800b3f2:	4770      	bx	lr

0800b3f4 <__retarget_lock_acquire_recursive>:
 800b3f4:	4770      	bx	lr

0800b3f6 <__retarget_lock_release_recursive>:
 800b3f6:	4770      	bx	lr

0800b3f8 <__swhatbuf_r>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	460e      	mov	r6, r1
 800b3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b400:	4614      	mov	r4, r2
 800b402:	2900      	cmp	r1, #0
 800b404:	461d      	mov	r5, r3
 800b406:	b096      	sub	sp, #88	; 0x58
 800b408:	da08      	bge.n	800b41c <__swhatbuf_r+0x24>
 800b40a:	2200      	movs	r2, #0
 800b40c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b410:	602a      	str	r2, [r5, #0]
 800b412:	061a      	lsls	r2, r3, #24
 800b414:	d410      	bmi.n	800b438 <__swhatbuf_r+0x40>
 800b416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b41a:	e00e      	b.n	800b43a <__swhatbuf_r+0x42>
 800b41c:	466a      	mov	r2, sp
 800b41e:	f000 f903 	bl	800b628 <_fstat_r>
 800b422:	2800      	cmp	r0, #0
 800b424:	dbf1      	blt.n	800b40a <__swhatbuf_r+0x12>
 800b426:	9a01      	ldr	r2, [sp, #4]
 800b428:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b42c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b430:	425a      	negs	r2, r3
 800b432:	415a      	adcs	r2, r3
 800b434:	602a      	str	r2, [r5, #0]
 800b436:	e7ee      	b.n	800b416 <__swhatbuf_r+0x1e>
 800b438:	2340      	movs	r3, #64	; 0x40
 800b43a:	2000      	movs	r0, #0
 800b43c:	6023      	str	r3, [r4, #0]
 800b43e:	b016      	add	sp, #88	; 0x58
 800b440:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b444 <__smakebuf_r>:
 800b444:	898b      	ldrh	r3, [r1, #12]
 800b446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b448:	079d      	lsls	r5, r3, #30
 800b44a:	4606      	mov	r6, r0
 800b44c:	460c      	mov	r4, r1
 800b44e:	d507      	bpl.n	800b460 <__smakebuf_r+0x1c>
 800b450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b454:	6023      	str	r3, [r4, #0]
 800b456:	6123      	str	r3, [r4, #16]
 800b458:	2301      	movs	r3, #1
 800b45a:	6163      	str	r3, [r4, #20]
 800b45c:	b002      	add	sp, #8
 800b45e:	bd70      	pop	{r4, r5, r6, pc}
 800b460:	466a      	mov	r2, sp
 800b462:	ab01      	add	r3, sp, #4
 800b464:	f7ff ffc8 	bl	800b3f8 <__swhatbuf_r>
 800b468:	9900      	ldr	r1, [sp, #0]
 800b46a:	4605      	mov	r5, r0
 800b46c:	4630      	mov	r0, r6
 800b46e:	f7ff f961 	bl	800a734 <_malloc_r>
 800b472:	b948      	cbnz	r0, 800b488 <__smakebuf_r+0x44>
 800b474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b478:	059a      	lsls	r2, r3, #22
 800b47a:	d4ef      	bmi.n	800b45c <__smakebuf_r+0x18>
 800b47c:	f023 0303 	bic.w	r3, r3, #3
 800b480:	f043 0302 	orr.w	r3, r3, #2
 800b484:	81a3      	strh	r3, [r4, #12]
 800b486:	e7e3      	b.n	800b450 <__smakebuf_r+0xc>
 800b488:	4b0d      	ldr	r3, [pc, #52]	; (800b4c0 <__smakebuf_r+0x7c>)
 800b48a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b48c:	89a3      	ldrh	r3, [r4, #12]
 800b48e:	6020      	str	r0, [r4, #0]
 800b490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b494:	81a3      	strh	r3, [r4, #12]
 800b496:	9b00      	ldr	r3, [sp, #0]
 800b498:	6120      	str	r0, [r4, #16]
 800b49a:	6163      	str	r3, [r4, #20]
 800b49c:	9b01      	ldr	r3, [sp, #4]
 800b49e:	b15b      	cbz	r3, 800b4b8 <__smakebuf_r+0x74>
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4a6:	f000 f8d1 	bl	800b64c <_isatty_r>
 800b4aa:	b128      	cbz	r0, 800b4b8 <__smakebuf_r+0x74>
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	f023 0303 	bic.w	r3, r3, #3
 800b4b2:	f043 0301 	orr.w	r3, r3, #1
 800b4b6:	81a3      	strh	r3, [r4, #12]
 800b4b8:	89a0      	ldrh	r0, [r4, #12]
 800b4ba:	4305      	orrs	r5, r0
 800b4bc:	81a5      	strh	r5, [r4, #12]
 800b4be:	e7cd      	b.n	800b45c <__smakebuf_r+0x18>
 800b4c0:	0800b251 	.word	0x0800b251

0800b4c4 <_malloc_usable_size_r>:
 800b4c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4c8:	1f18      	subs	r0, r3, #4
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	bfbc      	itt	lt
 800b4ce:	580b      	ldrlt	r3, [r1, r0]
 800b4d0:	18c0      	addlt	r0, r0, r3
 800b4d2:	4770      	bx	lr

0800b4d4 <_raise_r>:
 800b4d4:	291f      	cmp	r1, #31
 800b4d6:	b538      	push	{r3, r4, r5, lr}
 800b4d8:	4604      	mov	r4, r0
 800b4da:	460d      	mov	r5, r1
 800b4dc:	d904      	bls.n	800b4e8 <_raise_r+0x14>
 800b4de:	2316      	movs	r3, #22
 800b4e0:	6003      	str	r3, [r0, #0]
 800b4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e6:	bd38      	pop	{r3, r4, r5, pc}
 800b4e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b4ea:	b112      	cbz	r2, 800b4f2 <_raise_r+0x1e>
 800b4ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4f0:	b94b      	cbnz	r3, 800b506 <_raise_r+0x32>
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f000 f830 	bl	800b558 <_getpid_r>
 800b4f8:	462a      	mov	r2, r5
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b502:	f000 b817 	b.w	800b534 <_kill_r>
 800b506:	2b01      	cmp	r3, #1
 800b508:	d00a      	beq.n	800b520 <_raise_r+0x4c>
 800b50a:	1c59      	adds	r1, r3, #1
 800b50c:	d103      	bne.n	800b516 <_raise_r+0x42>
 800b50e:	2316      	movs	r3, #22
 800b510:	6003      	str	r3, [r0, #0]
 800b512:	2001      	movs	r0, #1
 800b514:	e7e7      	b.n	800b4e6 <_raise_r+0x12>
 800b516:	2400      	movs	r4, #0
 800b518:	4628      	mov	r0, r5
 800b51a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b51e:	4798      	blx	r3
 800b520:	2000      	movs	r0, #0
 800b522:	e7e0      	b.n	800b4e6 <_raise_r+0x12>

0800b524 <raise>:
 800b524:	4b02      	ldr	r3, [pc, #8]	; (800b530 <raise+0xc>)
 800b526:	4601      	mov	r1, r0
 800b528:	6818      	ldr	r0, [r3, #0]
 800b52a:	f7ff bfd3 	b.w	800b4d4 <_raise_r>
 800b52e:	bf00      	nop
 800b530:	20000014 	.word	0x20000014

0800b534 <_kill_r>:
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	2300      	movs	r3, #0
 800b538:	4d06      	ldr	r5, [pc, #24]	; (800b554 <_kill_r+0x20>)
 800b53a:	4604      	mov	r4, r0
 800b53c:	4608      	mov	r0, r1
 800b53e:	4611      	mov	r1, r2
 800b540:	602b      	str	r3, [r5, #0]
 800b542:	f7f7 fab8 	bl	8002ab6 <_kill>
 800b546:	1c43      	adds	r3, r0, #1
 800b548:	d102      	bne.n	800b550 <_kill_r+0x1c>
 800b54a:	682b      	ldr	r3, [r5, #0]
 800b54c:	b103      	cbz	r3, 800b550 <_kill_r+0x1c>
 800b54e:	6023      	str	r3, [r4, #0]
 800b550:	bd38      	pop	{r3, r4, r5, pc}
 800b552:	bf00      	nop
 800b554:	20000430 	.word	0x20000430

0800b558 <_getpid_r>:
 800b558:	f7f7 baa6 	b.w	8002aa8 <_getpid>

0800b55c <__sread>:
 800b55c:	b510      	push	{r4, lr}
 800b55e:	460c      	mov	r4, r1
 800b560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b564:	f000 f894 	bl	800b690 <_read_r>
 800b568:	2800      	cmp	r0, #0
 800b56a:	bfab      	itete	ge
 800b56c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b56e:	89a3      	ldrhlt	r3, [r4, #12]
 800b570:	181b      	addge	r3, r3, r0
 800b572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b576:	bfac      	ite	ge
 800b578:	6563      	strge	r3, [r4, #84]	; 0x54
 800b57a:	81a3      	strhlt	r3, [r4, #12]
 800b57c:	bd10      	pop	{r4, pc}

0800b57e <__swrite>:
 800b57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b582:	461f      	mov	r7, r3
 800b584:	898b      	ldrh	r3, [r1, #12]
 800b586:	4605      	mov	r5, r0
 800b588:	05db      	lsls	r3, r3, #23
 800b58a:	460c      	mov	r4, r1
 800b58c:	4616      	mov	r6, r2
 800b58e:	d505      	bpl.n	800b59c <__swrite+0x1e>
 800b590:	2302      	movs	r3, #2
 800b592:	2200      	movs	r2, #0
 800b594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b598:	f000 f868 	bl	800b66c <_lseek_r>
 800b59c:	89a3      	ldrh	r3, [r4, #12]
 800b59e:	4632      	mov	r2, r6
 800b5a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5a4:	81a3      	strh	r3, [r4, #12]
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	463b      	mov	r3, r7
 800b5aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b2:	f000 b817 	b.w	800b5e4 <_write_r>

0800b5b6 <__sseek>:
 800b5b6:	b510      	push	{r4, lr}
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5be:	f000 f855 	bl	800b66c <_lseek_r>
 800b5c2:	1c43      	adds	r3, r0, #1
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	bf15      	itete	ne
 800b5c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5d2:	81a3      	strheq	r3, [r4, #12]
 800b5d4:	bf18      	it	ne
 800b5d6:	81a3      	strhne	r3, [r4, #12]
 800b5d8:	bd10      	pop	{r4, pc}

0800b5da <__sclose>:
 800b5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5de:	f000 b813 	b.w	800b608 <_close_r>
	...

0800b5e4 <_write_r>:
 800b5e4:	b538      	push	{r3, r4, r5, lr}
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	4608      	mov	r0, r1
 800b5ea:	4611      	mov	r1, r2
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	4d05      	ldr	r5, [pc, #20]	; (800b604 <_write_r+0x20>)
 800b5f0:	602a      	str	r2, [r5, #0]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	f7f7 fa96 	bl	8002b24 <_write>
 800b5f8:	1c43      	adds	r3, r0, #1
 800b5fa:	d102      	bne.n	800b602 <_write_r+0x1e>
 800b5fc:	682b      	ldr	r3, [r5, #0]
 800b5fe:	b103      	cbz	r3, 800b602 <_write_r+0x1e>
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	bd38      	pop	{r3, r4, r5, pc}
 800b604:	20000430 	.word	0x20000430

0800b608 <_close_r>:
 800b608:	b538      	push	{r3, r4, r5, lr}
 800b60a:	2300      	movs	r3, #0
 800b60c:	4d05      	ldr	r5, [pc, #20]	; (800b624 <_close_r+0x1c>)
 800b60e:	4604      	mov	r4, r0
 800b610:	4608      	mov	r0, r1
 800b612:	602b      	str	r3, [r5, #0]
 800b614:	f7f7 faa2 	bl	8002b5c <_close>
 800b618:	1c43      	adds	r3, r0, #1
 800b61a:	d102      	bne.n	800b622 <_close_r+0x1a>
 800b61c:	682b      	ldr	r3, [r5, #0]
 800b61e:	b103      	cbz	r3, 800b622 <_close_r+0x1a>
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	bd38      	pop	{r3, r4, r5, pc}
 800b624:	20000430 	.word	0x20000430

0800b628 <_fstat_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	2300      	movs	r3, #0
 800b62c:	4d06      	ldr	r5, [pc, #24]	; (800b648 <_fstat_r+0x20>)
 800b62e:	4604      	mov	r4, r0
 800b630:	4608      	mov	r0, r1
 800b632:	4611      	mov	r1, r2
 800b634:	602b      	str	r3, [r5, #0]
 800b636:	f7f7 fa9c 	bl	8002b72 <_fstat>
 800b63a:	1c43      	adds	r3, r0, #1
 800b63c:	d102      	bne.n	800b644 <_fstat_r+0x1c>
 800b63e:	682b      	ldr	r3, [r5, #0]
 800b640:	b103      	cbz	r3, 800b644 <_fstat_r+0x1c>
 800b642:	6023      	str	r3, [r4, #0]
 800b644:	bd38      	pop	{r3, r4, r5, pc}
 800b646:	bf00      	nop
 800b648:	20000430 	.word	0x20000430

0800b64c <_isatty_r>:
 800b64c:	b538      	push	{r3, r4, r5, lr}
 800b64e:	2300      	movs	r3, #0
 800b650:	4d05      	ldr	r5, [pc, #20]	; (800b668 <_isatty_r+0x1c>)
 800b652:	4604      	mov	r4, r0
 800b654:	4608      	mov	r0, r1
 800b656:	602b      	str	r3, [r5, #0]
 800b658:	f7f7 fa9a 	bl	8002b90 <_isatty>
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	d102      	bne.n	800b666 <_isatty_r+0x1a>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	b103      	cbz	r3, 800b666 <_isatty_r+0x1a>
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	bd38      	pop	{r3, r4, r5, pc}
 800b668:	20000430 	.word	0x20000430

0800b66c <_lseek_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	4604      	mov	r4, r0
 800b670:	4608      	mov	r0, r1
 800b672:	4611      	mov	r1, r2
 800b674:	2200      	movs	r2, #0
 800b676:	4d05      	ldr	r5, [pc, #20]	; (800b68c <_lseek_r+0x20>)
 800b678:	602a      	str	r2, [r5, #0]
 800b67a:	461a      	mov	r2, r3
 800b67c:	f7f7 fa92 	bl	8002ba4 <_lseek>
 800b680:	1c43      	adds	r3, r0, #1
 800b682:	d102      	bne.n	800b68a <_lseek_r+0x1e>
 800b684:	682b      	ldr	r3, [r5, #0]
 800b686:	b103      	cbz	r3, 800b68a <_lseek_r+0x1e>
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	20000430 	.word	0x20000430

0800b690 <_read_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4604      	mov	r4, r0
 800b694:	4608      	mov	r0, r1
 800b696:	4611      	mov	r1, r2
 800b698:	2200      	movs	r2, #0
 800b69a:	4d05      	ldr	r5, [pc, #20]	; (800b6b0 <_read_r+0x20>)
 800b69c:	602a      	str	r2, [r5, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f7f7 fa23 	bl	8002aea <_read>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d102      	bne.n	800b6ae <_read_r+0x1e>
 800b6a8:	682b      	ldr	r3, [r5, #0]
 800b6aa:	b103      	cbz	r3, 800b6ae <_read_r+0x1e>
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	20000430 	.word	0x20000430

0800b6b4 <powf>:
 800b6b4:	b570      	push	{r4, r5, r6, lr}
 800b6b6:	460c      	mov	r4, r1
 800b6b8:	4606      	mov	r6, r0
 800b6ba:	f000 f849 	bl	800b750 <__ieee754_powf>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4605      	mov	r5, r0
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f7f5 fd24 	bl	8001110 <__aeabi_fcmpun>
 800b6c8:	bb68      	cbnz	r0, 800b726 <powf+0x72>
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f7f5 fced 	bl	80010ac <__aeabi_fcmpeq>
 800b6d2:	b190      	cbz	r0, 800b6fa <powf+0x46>
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f7f5 fce8 	bl	80010ac <__aeabi_fcmpeq>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d133      	bne.n	800b748 <powf+0x94>
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f000 fc0e 	bl	800bf02 <finitef>
 800b6e6:	b1f0      	cbz	r0, 800b726 <powf+0x72>
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f7f5 fce8 	bl	80010c0 <__aeabi_fcmplt>
 800b6f0:	b1c8      	cbz	r0, 800b726 <powf+0x72>
 800b6f2:	f7fb fdf5 	bl	80072e0 <__errno>
 800b6f6:	2322      	movs	r3, #34	; 0x22
 800b6f8:	e014      	b.n	800b724 <powf+0x70>
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	f000 fc01 	bl	800bf02 <finitef>
 800b700:	b998      	cbnz	r0, 800b72a <powf+0x76>
 800b702:	4630      	mov	r0, r6
 800b704:	f000 fbfd 	bl	800bf02 <finitef>
 800b708:	b178      	cbz	r0, 800b72a <powf+0x76>
 800b70a:	4620      	mov	r0, r4
 800b70c:	f000 fbf9 	bl	800bf02 <finitef>
 800b710:	b158      	cbz	r0, 800b72a <powf+0x76>
 800b712:	4629      	mov	r1, r5
 800b714:	4628      	mov	r0, r5
 800b716:	f7f5 fcfb 	bl	8001110 <__aeabi_fcmpun>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	d0e9      	beq.n	800b6f2 <powf+0x3e>
 800b71e:	f7fb fddf 	bl	80072e0 <__errno>
 800b722:	2321      	movs	r3, #33	; 0x21
 800b724:	6003      	str	r3, [r0, #0]
 800b726:	4628      	mov	r0, r5
 800b728:	bd70      	pop	{r4, r5, r6, pc}
 800b72a:	2100      	movs	r1, #0
 800b72c:	4628      	mov	r0, r5
 800b72e:	f7f5 fcbd 	bl	80010ac <__aeabi_fcmpeq>
 800b732:	2800      	cmp	r0, #0
 800b734:	d0f7      	beq.n	800b726 <powf+0x72>
 800b736:	4630      	mov	r0, r6
 800b738:	f000 fbe3 	bl	800bf02 <finitef>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	d0f2      	beq.n	800b726 <powf+0x72>
 800b740:	4620      	mov	r0, r4
 800b742:	f000 fbde 	bl	800bf02 <finitef>
 800b746:	e7d3      	b.n	800b6f0 <powf+0x3c>
 800b748:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 800b74c:	e7eb      	b.n	800b726 <powf+0x72>
	...

0800b750 <__ieee754_powf>:
 800b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b754:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 800b758:	4681      	mov	r9, r0
 800b75a:	460f      	mov	r7, r1
 800b75c:	4680      	mov	r8, r0
 800b75e:	460c      	mov	r4, r1
 800b760:	b087      	sub	sp, #28
 800b762:	d10d      	bne.n	800b780 <__ieee754_powf+0x30>
 800b764:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 800b768:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800b76c:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 800b770:	f240 8338 	bls.w	800bde4 <__ieee754_powf+0x694>
 800b774:	4639      	mov	r1, r7
 800b776:	4648      	mov	r0, r9
 800b778:	f7f5 f9fc 	bl	8000b74 <__addsf3>
 800b77c:	4601      	mov	r1, r0
 800b77e:	e040      	b.n	800b802 <__ieee754_powf+0xb2>
 800b780:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800b784:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b788:	dcf4      	bgt.n	800b774 <__ieee754_powf+0x24>
 800b78a:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800b78e:	dd08      	ble.n	800b7a2 <__ieee754_powf+0x52>
 800b790:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 800b794:	d1ee      	bne.n	800b774 <__ieee754_powf+0x24>
 800b796:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 800b79a:	0064      	lsls	r4, r4, #1
 800b79c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800b7a0:	e7e6      	b.n	800b770 <__ieee754_powf+0x20>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	da20      	bge.n	800b7e8 <__ieee754_powf+0x98>
 800b7a6:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 800b7aa:	da2e      	bge.n	800b80a <__ieee754_powf+0xba>
 800b7ac:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 800b7b0:	f2c0 831d 	blt.w	800bdee <__ieee754_powf+0x69e>
 800b7b4:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800b7b8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800b7bc:	fa4a f503 	asr.w	r5, sl, r3
 800b7c0:	fa05 f303 	lsl.w	r3, r5, r3
 800b7c4:	4553      	cmp	r3, sl
 800b7c6:	f040 8312 	bne.w	800bdee <__ieee754_powf+0x69e>
 800b7ca:	f005 0501 	and.w	r5, r5, #1
 800b7ce:	f1c5 0502 	rsb	r5, r5, #2
 800b7d2:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 800b7d6:	d120      	bne.n	800b81a <__ieee754_powf+0xca>
 800b7d8:	2c00      	cmp	r4, #0
 800b7da:	4649      	mov	r1, r9
 800b7dc:	da11      	bge.n	800b802 <__ieee754_powf+0xb2>
 800b7de:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b7e2:	f7f5 fb83 	bl	8000eec <__aeabi_fdiv>
 800b7e6:	e7c9      	b.n	800b77c <__ieee754_powf+0x2c>
 800b7e8:	2500      	movs	r5, #0
 800b7ea:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800b7ee:	d1f0      	bne.n	800b7d2 <__ieee754_powf+0x82>
 800b7f0:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800b7f4:	f000 82f6 	beq.w	800bde4 <__ieee754_powf+0x694>
 800b7f8:	dd09      	ble.n	800b80e <__ieee754_powf+0xbe>
 800b7fa:	2c00      	cmp	r4, #0
 800b7fc:	f2c0 82f5 	blt.w	800bdea <__ieee754_powf+0x69a>
 800b800:	4639      	mov	r1, r7
 800b802:	4608      	mov	r0, r1
 800b804:	b007      	add	sp, #28
 800b806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80a:	2502      	movs	r5, #2
 800b80c:	e7ed      	b.n	800b7ea <__ieee754_powf+0x9a>
 800b80e:	2c00      	cmp	r4, #0
 800b810:	f280 82eb 	bge.w	800bdea <__ieee754_powf+0x69a>
 800b814:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800b818:	e7f3      	b.n	800b802 <__ieee754_powf+0xb2>
 800b81a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800b81e:	d104      	bne.n	800b82a <__ieee754_powf+0xda>
 800b820:	4649      	mov	r1, r9
 800b822:	4648      	mov	r0, r9
 800b824:	f7f5 faae 	bl	8000d84 <__aeabi_fmul>
 800b828:	e7a8      	b.n	800b77c <__ieee754_powf+0x2c>
 800b82a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b82e:	4648      	mov	r0, r9
 800b830:	d107      	bne.n	800b842 <__ieee754_powf+0xf2>
 800b832:	f1b8 0f00 	cmp.w	r8, #0
 800b836:	db04      	blt.n	800b842 <__ieee754_powf+0xf2>
 800b838:	b007      	add	sp, #28
 800b83a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b83e:	f000 baef 	b.w	800be20 <__ieee754_sqrtf>
 800b842:	f000 fb5b 	bl	800befc <fabsf>
 800b846:	4601      	mov	r1, r0
 800b848:	b126      	cbz	r6, 800b854 <__ieee754_powf+0x104>
 800b84a:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800b84e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b852:	d118      	bne.n	800b886 <__ieee754_powf+0x136>
 800b854:	2c00      	cmp	r4, #0
 800b856:	da04      	bge.n	800b862 <__ieee754_powf+0x112>
 800b858:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b85c:	f7f5 fb46 	bl	8000eec <__aeabi_fdiv>
 800b860:	4601      	mov	r1, r0
 800b862:	f1b8 0f00 	cmp.w	r8, #0
 800b866:	dacc      	bge.n	800b802 <__ieee754_powf+0xb2>
 800b868:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 800b86c:	ea56 0305 	orrs.w	r3, r6, r5
 800b870:	d104      	bne.n	800b87c <__ieee754_powf+0x12c>
 800b872:	4608      	mov	r0, r1
 800b874:	f7f5 f97c 	bl	8000b70 <__aeabi_fsub>
 800b878:	4601      	mov	r1, r0
 800b87a:	e7b2      	b.n	800b7e2 <__ieee754_powf+0x92>
 800b87c:	2d01      	cmp	r5, #1
 800b87e:	d1c0      	bne.n	800b802 <__ieee754_powf+0xb2>
 800b880:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 800b884:	e77a      	b.n	800b77c <__ieee754_powf+0x2c>
 800b886:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800b88a:	3b01      	subs	r3, #1
 800b88c:	9302      	str	r3, [sp, #8]
 800b88e:	432b      	orrs	r3, r5
 800b890:	d101      	bne.n	800b896 <__ieee754_powf+0x146>
 800b892:	4649      	mov	r1, r9
 800b894:	e7ed      	b.n	800b872 <__ieee754_powf+0x122>
 800b896:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 800b89a:	f340 809f 	ble.w	800b9dc <__ieee754_powf+0x28c>
 800b89e:	4b48      	ldr	r3, [pc, #288]	; (800b9c0 <__ieee754_powf+0x270>)
 800b8a0:	429e      	cmp	r6, r3
 800b8a2:	dc07      	bgt.n	800b8b4 <__ieee754_powf+0x164>
 800b8a4:	2c00      	cmp	r4, #0
 800b8a6:	da0a      	bge.n	800b8be <__ieee754_powf+0x16e>
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	b007      	add	sp, #28
 800b8ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b0:	f000 bb20 	b.w	800bef4 <__math_oflowf>
 800b8b4:	4b43      	ldr	r3, [pc, #268]	; (800b9c4 <__ieee754_powf+0x274>)
 800b8b6:	429e      	cmp	r6, r3
 800b8b8:	dd07      	ble.n	800b8ca <__ieee754_powf+0x17a>
 800b8ba:	2c00      	cmp	r4, #0
 800b8bc:	dcf4      	bgt.n	800b8a8 <__ieee754_powf+0x158>
 800b8be:	2000      	movs	r0, #0
 800b8c0:	b007      	add	sp, #28
 800b8c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c6:	f000 bb11 	b.w	800beec <__math_uflowf>
 800b8ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b8ce:	f7f5 f94f 	bl	8000b70 <__aeabi_fsub>
 800b8d2:	493d      	ldr	r1, [pc, #244]	; (800b9c8 <__ieee754_powf+0x278>)
 800b8d4:	4606      	mov	r6, r0
 800b8d6:	f7f5 fa55 	bl	8000d84 <__aeabi_fmul>
 800b8da:	493c      	ldr	r1, [pc, #240]	; (800b9cc <__ieee754_powf+0x27c>)
 800b8dc:	4680      	mov	r8, r0
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f7f5 fa50 	bl	8000d84 <__aeabi_fmul>
 800b8e4:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800b8e8:	4681      	mov	r9, r0
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f7f5 fa4a 	bl	8000d84 <__aeabi_fmul>
 800b8f0:	4601      	mov	r1, r0
 800b8f2:	4837      	ldr	r0, [pc, #220]	; (800b9d0 <__ieee754_powf+0x280>)
 800b8f4:	f7f5 f93c 	bl	8000b70 <__aeabi_fsub>
 800b8f8:	4631      	mov	r1, r6
 800b8fa:	f7f5 fa43 	bl	8000d84 <__aeabi_fmul>
 800b8fe:	4601      	mov	r1, r0
 800b900:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800b904:	f7f5 f934 	bl	8000b70 <__aeabi_fsub>
 800b908:	4631      	mov	r1, r6
 800b90a:	4682      	mov	sl, r0
 800b90c:	4630      	mov	r0, r6
 800b90e:	f7f5 fa39 	bl	8000d84 <__aeabi_fmul>
 800b912:	4601      	mov	r1, r0
 800b914:	4650      	mov	r0, sl
 800b916:	f7f5 fa35 	bl	8000d84 <__aeabi_fmul>
 800b91a:	492e      	ldr	r1, [pc, #184]	; (800b9d4 <__ieee754_powf+0x284>)
 800b91c:	f7f5 fa32 	bl	8000d84 <__aeabi_fmul>
 800b920:	4601      	mov	r1, r0
 800b922:	4648      	mov	r0, r9
 800b924:	f7f5 f924 	bl	8000b70 <__aeabi_fsub>
 800b928:	4601      	mov	r1, r0
 800b92a:	4606      	mov	r6, r0
 800b92c:	4640      	mov	r0, r8
 800b92e:	f7f5 f921 	bl	8000b74 <__addsf3>
 800b932:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800b936:	f029 090f 	bic.w	r9, r9, #15
 800b93a:	4641      	mov	r1, r8
 800b93c:	4648      	mov	r0, r9
 800b93e:	f7f5 f917 	bl	8000b70 <__aeabi_fsub>
 800b942:	4601      	mov	r1, r0
 800b944:	4630      	mov	r0, r6
 800b946:	f7f5 f913 	bl	8000b70 <__aeabi_fsub>
 800b94a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800b94e:	9b02      	ldr	r3, [sp, #8]
 800b950:	3d01      	subs	r5, #1
 800b952:	f024 040f 	bic.w	r4, r4, #15
 800b956:	432b      	orrs	r3, r5
 800b958:	4606      	mov	r6, r0
 800b95a:	4621      	mov	r1, r4
 800b95c:	4638      	mov	r0, r7
 800b95e:	bf14      	ite	ne
 800b960:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 800b964:	4d1c      	ldreq	r5, [pc, #112]	; (800b9d8 <__ieee754_powf+0x288>)
 800b966:	f7f5 f903 	bl	8000b70 <__aeabi_fsub>
 800b96a:	4649      	mov	r1, r9
 800b96c:	f7f5 fa0a 	bl	8000d84 <__aeabi_fmul>
 800b970:	4639      	mov	r1, r7
 800b972:	4680      	mov	r8, r0
 800b974:	4630      	mov	r0, r6
 800b976:	f7f5 fa05 	bl	8000d84 <__aeabi_fmul>
 800b97a:	4601      	mov	r1, r0
 800b97c:	4640      	mov	r0, r8
 800b97e:	f7f5 f8f9 	bl	8000b74 <__addsf3>
 800b982:	4621      	mov	r1, r4
 800b984:	4606      	mov	r6, r0
 800b986:	4648      	mov	r0, r9
 800b988:	f7f5 f9fc 	bl	8000d84 <__aeabi_fmul>
 800b98c:	4601      	mov	r1, r0
 800b98e:	4607      	mov	r7, r0
 800b990:	4681      	mov	r9, r0
 800b992:	4630      	mov	r0, r6
 800b994:	f7f5 f8ee 	bl	8000b74 <__addsf3>
 800b998:	2800      	cmp	r0, #0
 800b99a:	4682      	mov	sl, r0
 800b99c:	4680      	mov	r8, r0
 800b99e:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800b9a2:	f340 8201 	ble.w	800bda8 <__ieee754_powf+0x658>
 800b9a6:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 800b9aa:	f340 814f 	ble.w	800bc4c <__ieee754_powf+0x4fc>
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	f7f5 fb85 	bl	80010c0 <__aeabi_fcmplt>
 800b9b6:	3800      	subs	r0, #0
 800b9b8:	bf18      	it	ne
 800b9ba:	2001      	movne	r0, #1
 800b9bc:	e775      	b.n	800b8aa <__ieee754_powf+0x15a>
 800b9be:	bf00      	nop
 800b9c0:	3f7ffff3 	.word	0x3f7ffff3
 800b9c4:	3f800007 	.word	0x3f800007
 800b9c8:	3fb8aa00 	.word	0x3fb8aa00
 800b9cc:	36eca570 	.word	0x36eca570
 800b9d0:	3eaaaaab 	.word	0x3eaaaaab
 800b9d4:	3fb8aa3b 	.word	0x3fb8aa3b
 800b9d8:	bf800000 	.word	0xbf800000
 800b9dc:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800b9e0:	f040 8111 	bne.w	800bc06 <__ieee754_powf+0x4b6>
 800b9e4:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 800b9e8:	f7f5 f9cc 	bl	8000d84 <__aeabi_fmul>
 800b9ec:	f06f 0217 	mvn.w	r2, #23
 800b9f0:	4606      	mov	r6, r0
 800b9f2:	15f3      	asrs	r3, r6, #23
 800b9f4:	3b7f      	subs	r3, #127	; 0x7f
 800b9f6:	4413      	add	r3, r2
 800b9f8:	9301      	str	r3, [sp, #4]
 800b9fa:	4b85      	ldr	r3, [pc, #532]	; (800bc10 <__ieee754_powf+0x4c0>)
 800b9fc:	f3c6 0016 	ubfx	r0, r6, #0, #23
 800ba00:	4298      	cmp	r0, r3
 800ba02:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 800ba06:	dd08      	ble.n	800ba1a <__ieee754_powf+0x2ca>
 800ba08:	4b82      	ldr	r3, [pc, #520]	; (800bc14 <__ieee754_powf+0x4c4>)
 800ba0a:	4298      	cmp	r0, r3
 800ba0c:	f340 80fd 	ble.w	800bc0a <__ieee754_powf+0x4ba>
 800ba10:	9b01      	ldr	r3, [sp, #4]
 800ba12:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 800ba16:	3301      	adds	r3, #1
 800ba18:	9301      	str	r3, [sp, #4]
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	9300      	str	r3, [sp, #0]
 800ba1e:	9900      	ldr	r1, [sp, #0]
 800ba20:	4a7d      	ldr	r2, [pc, #500]	; (800bc18 <__ieee754_powf+0x4c8>)
 800ba22:	4630      	mov	r0, r6
 800ba24:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ba28:	9603      	str	r6, [sp, #12]
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	9205      	str	r2, [sp, #20]
 800ba2e:	f7f5 f89f 	bl	8000b70 <__aeabi_fsub>
 800ba32:	9a05      	ldr	r2, [sp, #20]
 800ba34:	9b03      	ldr	r3, [sp, #12]
 800ba36:	4683      	mov	fp, r0
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	9203      	str	r2, [sp, #12]
 800ba3e:	9304      	str	r3, [sp, #16]
 800ba40:	f7f5 f898 	bl	8000b74 <__addsf3>
 800ba44:	4601      	mov	r1, r0
 800ba46:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ba4a:	f7f5 fa4f 	bl	8000eec <__aeabi_fdiv>
 800ba4e:	4682      	mov	sl, r0
 800ba50:	4601      	mov	r1, r0
 800ba52:	4658      	mov	r0, fp
 800ba54:	f7f5 f996 	bl	8000d84 <__aeabi_fmul>
 800ba58:	1076      	asrs	r6, r6, #1
 800ba5a:	9b00      	ldr	r3, [sp, #0]
 800ba5c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800ba60:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800ba64:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 800ba68:	f029 090f 	bic.w	r9, r9, #15
 800ba6c:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800ba70:	4680      	mov	r8, r0
 800ba72:	4631      	mov	r1, r6
 800ba74:	4648      	mov	r0, r9
 800ba76:	f7f5 f985 	bl	8000d84 <__aeabi_fmul>
 800ba7a:	4601      	mov	r1, r0
 800ba7c:	4658      	mov	r0, fp
 800ba7e:	f7f5 f877 	bl	8000b70 <__aeabi_fsub>
 800ba82:	9a03      	ldr	r2, [sp, #12]
 800ba84:	4683      	mov	fp, r0
 800ba86:	4611      	mov	r1, r2
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f7f5 f871 	bl	8000b70 <__aeabi_fsub>
 800ba8e:	9b04      	ldr	r3, [sp, #16]
 800ba90:	4601      	mov	r1, r0
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7f5 f86c 	bl	8000b70 <__aeabi_fsub>
 800ba98:	4649      	mov	r1, r9
 800ba9a:	f7f5 f973 	bl	8000d84 <__aeabi_fmul>
 800ba9e:	4601      	mov	r1, r0
 800baa0:	4658      	mov	r0, fp
 800baa2:	f7f5 f865 	bl	8000b70 <__aeabi_fsub>
 800baa6:	4651      	mov	r1, sl
 800baa8:	f7f5 f96c 	bl	8000d84 <__aeabi_fmul>
 800baac:	4641      	mov	r1, r8
 800baae:	4682      	mov	sl, r0
 800bab0:	4640      	mov	r0, r8
 800bab2:	f7f5 f967 	bl	8000d84 <__aeabi_fmul>
 800bab6:	4606      	mov	r6, r0
 800bab8:	4958      	ldr	r1, [pc, #352]	; (800bc1c <__ieee754_powf+0x4cc>)
 800baba:	f7f5 f963 	bl	8000d84 <__aeabi_fmul>
 800babe:	4958      	ldr	r1, [pc, #352]	; (800bc20 <__ieee754_powf+0x4d0>)
 800bac0:	f7f5 f858 	bl	8000b74 <__addsf3>
 800bac4:	4631      	mov	r1, r6
 800bac6:	f7f5 f95d 	bl	8000d84 <__aeabi_fmul>
 800baca:	4956      	ldr	r1, [pc, #344]	; (800bc24 <__ieee754_powf+0x4d4>)
 800bacc:	f7f5 f852 	bl	8000b74 <__addsf3>
 800bad0:	4631      	mov	r1, r6
 800bad2:	f7f5 f957 	bl	8000d84 <__aeabi_fmul>
 800bad6:	4954      	ldr	r1, [pc, #336]	; (800bc28 <__ieee754_powf+0x4d8>)
 800bad8:	f7f5 f84c 	bl	8000b74 <__addsf3>
 800badc:	4631      	mov	r1, r6
 800bade:	f7f5 f951 	bl	8000d84 <__aeabi_fmul>
 800bae2:	4952      	ldr	r1, [pc, #328]	; (800bc2c <__ieee754_powf+0x4dc>)
 800bae4:	f7f5 f846 	bl	8000b74 <__addsf3>
 800bae8:	4631      	mov	r1, r6
 800baea:	f7f5 f94b 	bl	8000d84 <__aeabi_fmul>
 800baee:	4950      	ldr	r1, [pc, #320]	; (800bc30 <__ieee754_powf+0x4e0>)
 800baf0:	f7f5 f840 	bl	8000b74 <__addsf3>
 800baf4:	4631      	mov	r1, r6
 800baf6:	4683      	mov	fp, r0
 800baf8:	4630      	mov	r0, r6
 800bafa:	f7f5 f943 	bl	8000d84 <__aeabi_fmul>
 800bafe:	4601      	mov	r1, r0
 800bb00:	4658      	mov	r0, fp
 800bb02:	f7f5 f93f 	bl	8000d84 <__aeabi_fmul>
 800bb06:	4606      	mov	r6, r0
 800bb08:	4649      	mov	r1, r9
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	f7f5 f832 	bl	8000b74 <__addsf3>
 800bb10:	4651      	mov	r1, sl
 800bb12:	f7f5 f937 	bl	8000d84 <__aeabi_fmul>
 800bb16:	4631      	mov	r1, r6
 800bb18:	f7f5 f82c 	bl	8000b74 <__addsf3>
 800bb1c:	4649      	mov	r1, r9
 800bb1e:	4683      	mov	fp, r0
 800bb20:	4648      	mov	r0, r9
 800bb22:	f7f5 f92f 	bl	8000d84 <__aeabi_fmul>
 800bb26:	4943      	ldr	r1, [pc, #268]	; (800bc34 <__ieee754_powf+0x4e4>)
 800bb28:	9003      	str	r0, [sp, #12]
 800bb2a:	f7f5 f823 	bl	8000b74 <__addsf3>
 800bb2e:	4659      	mov	r1, fp
 800bb30:	f7f5 f820 	bl	8000b74 <__addsf3>
 800bb34:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 800bb38:	f026 060f 	bic.w	r6, r6, #15
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	4648      	mov	r0, r9
 800bb40:	f7f5 f920 	bl	8000d84 <__aeabi_fmul>
 800bb44:	493b      	ldr	r1, [pc, #236]	; (800bc34 <__ieee754_powf+0x4e4>)
 800bb46:	4681      	mov	r9, r0
 800bb48:	4630      	mov	r0, r6
 800bb4a:	f7f5 f811 	bl	8000b70 <__aeabi_fsub>
 800bb4e:	9b03      	ldr	r3, [sp, #12]
 800bb50:	4619      	mov	r1, r3
 800bb52:	f7f5 f80d 	bl	8000b70 <__aeabi_fsub>
 800bb56:	4601      	mov	r1, r0
 800bb58:	4658      	mov	r0, fp
 800bb5a:	f7f5 f809 	bl	8000b70 <__aeabi_fsub>
 800bb5e:	4641      	mov	r1, r8
 800bb60:	f7f5 f910 	bl	8000d84 <__aeabi_fmul>
 800bb64:	4631      	mov	r1, r6
 800bb66:	4680      	mov	r8, r0
 800bb68:	4650      	mov	r0, sl
 800bb6a:	f7f5 f90b 	bl	8000d84 <__aeabi_fmul>
 800bb6e:	4601      	mov	r1, r0
 800bb70:	4640      	mov	r0, r8
 800bb72:	f7f4 ffff 	bl	8000b74 <__addsf3>
 800bb76:	4682      	mov	sl, r0
 800bb78:	4601      	mov	r1, r0
 800bb7a:	4648      	mov	r0, r9
 800bb7c:	f7f4 fffa 	bl	8000b74 <__addsf3>
 800bb80:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 800bb84:	f026 060f 	bic.w	r6, r6, #15
 800bb88:	4630      	mov	r0, r6
 800bb8a:	492b      	ldr	r1, [pc, #172]	; (800bc38 <__ieee754_powf+0x4e8>)
 800bb8c:	f7f5 f8fa 	bl	8000d84 <__aeabi_fmul>
 800bb90:	4649      	mov	r1, r9
 800bb92:	4680      	mov	r8, r0
 800bb94:	4630      	mov	r0, r6
 800bb96:	f7f4 ffeb 	bl	8000b70 <__aeabi_fsub>
 800bb9a:	4601      	mov	r1, r0
 800bb9c:	4650      	mov	r0, sl
 800bb9e:	f7f4 ffe7 	bl	8000b70 <__aeabi_fsub>
 800bba2:	4926      	ldr	r1, [pc, #152]	; (800bc3c <__ieee754_powf+0x4ec>)
 800bba4:	f7f5 f8ee 	bl	8000d84 <__aeabi_fmul>
 800bba8:	4925      	ldr	r1, [pc, #148]	; (800bc40 <__ieee754_powf+0x4f0>)
 800bbaa:	4681      	mov	r9, r0
 800bbac:	4630      	mov	r0, r6
 800bbae:	f7f5 f8e9 	bl	8000d84 <__aeabi_fmul>
 800bbb2:	4601      	mov	r1, r0
 800bbb4:	4648      	mov	r0, r9
 800bbb6:	f7f4 ffdd 	bl	8000b74 <__addsf3>
 800bbba:	4b22      	ldr	r3, [pc, #136]	; (800bc44 <__ieee754_powf+0x4f4>)
 800bbbc:	9a00      	ldr	r2, [sp, #0]
 800bbbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbc2:	f7f4 ffd7 	bl	8000b74 <__addsf3>
 800bbc6:	4606      	mov	r6, r0
 800bbc8:	9801      	ldr	r0, [sp, #4]
 800bbca:	f7f5 f887 	bl	8000cdc <__aeabi_i2f>
 800bbce:	4682      	mov	sl, r0
 800bbd0:	4b1d      	ldr	r3, [pc, #116]	; (800bc48 <__ieee754_powf+0x4f8>)
 800bbd2:	9a00      	ldr	r2, [sp, #0]
 800bbd4:	4631      	mov	r1, r6
 800bbd6:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800bbda:	4640      	mov	r0, r8
 800bbdc:	f7f4 ffca 	bl	8000b74 <__addsf3>
 800bbe0:	4659      	mov	r1, fp
 800bbe2:	f7f4 ffc7 	bl	8000b74 <__addsf3>
 800bbe6:	4651      	mov	r1, sl
 800bbe8:	f7f4 ffc4 	bl	8000b74 <__addsf3>
 800bbec:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800bbf0:	f029 090f 	bic.w	r9, r9, #15
 800bbf4:	4651      	mov	r1, sl
 800bbf6:	4648      	mov	r0, r9
 800bbf8:	f7f4 ffba 	bl	8000b70 <__aeabi_fsub>
 800bbfc:	4659      	mov	r1, fp
 800bbfe:	f7f4 ffb7 	bl	8000b70 <__aeabi_fsub>
 800bc02:	4641      	mov	r1, r8
 800bc04:	e69b      	b.n	800b93e <__ieee754_powf+0x1ee>
 800bc06:	2200      	movs	r2, #0
 800bc08:	e6f3      	b.n	800b9f2 <__ieee754_powf+0x2a2>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e706      	b.n	800ba1c <__ieee754_powf+0x2cc>
 800bc0e:	bf00      	nop
 800bc10:	001cc471 	.word	0x001cc471
 800bc14:	005db3d6 	.word	0x005db3d6
 800bc18:	0800c4dc 	.word	0x0800c4dc
 800bc1c:	3e53f142 	.word	0x3e53f142
 800bc20:	3e6c3255 	.word	0x3e6c3255
 800bc24:	3e8ba305 	.word	0x3e8ba305
 800bc28:	3eaaaaab 	.word	0x3eaaaaab
 800bc2c:	3edb6db7 	.word	0x3edb6db7
 800bc30:	3f19999a 	.word	0x3f19999a
 800bc34:	40400000 	.word	0x40400000
 800bc38:	3f763800 	.word	0x3f763800
 800bc3c:	3f76384f 	.word	0x3f76384f
 800bc40:	369dc3a0 	.word	0x369dc3a0
 800bc44:	0800c4ec 	.word	0x0800c4ec
 800bc48:	0800c4e4 	.word	0x0800c4e4
 800bc4c:	f040 80c2 	bne.w	800bdd4 <__ieee754_powf+0x684>
 800bc50:	4968      	ldr	r1, [pc, #416]	; (800bdf4 <__ieee754_powf+0x6a4>)
 800bc52:	4630      	mov	r0, r6
 800bc54:	f7f4 ff8e 	bl	8000b74 <__addsf3>
 800bc58:	4639      	mov	r1, r7
 800bc5a:	4681      	mov	r9, r0
 800bc5c:	4650      	mov	r0, sl
 800bc5e:	f7f4 ff87 	bl	8000b70 <__aeabi_fsub>
 800bc62:	4601      	mov	r1, r0
 800bc64:	4648      	mov	r0, r9
 800bc66:	f7f5 fa49 	bl	80010fc <__aeabi_fcmpgt>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	f47f ae9f 	bne.w	800b9ae <__ieee754_powf+0x25e>
 800bc70:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bc74:	15e4      	asrs	r4, r4, #23
 800bc76:	3c7e      	subs	r4, #126	; 0x7e
 800bc78:	4123      	asrs	r3, r4
 800bc7a:	4443      	add	r3, r8
 800bc7c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bc80:	495d      	ldr	r1, [pc, #372]	; (800bdf8 <__ieee754_powf+0x6a8>)
 800bc82:	3a7f      	subs	r2, #127	; 0x7f
 800bc84:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800bc88:	4111      	asrs	r1, r2
 800bc8a:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800bc8e:	f1c2 0217 	rsb	r2, r2, #23
 800bc92:	4114      	asrs	r4, r2
 800bc94:	f1b8 0f00 	cmp.w	r8, #0
 800bc98:	4638      	mov	r0, r7
 800bc9a:	ea23 0101 	bic.w	r1, r3, r1
 800bc9e:	bfb8      	it	lt
 800bca0:	4264      	neglt	r4, r4
 800bca2:	f7f4 ff65 	bl	8000b70 <__aeabi_fsub>
 800bca6:	4681      	mov	r9, r0
 800bca8:	4631      	mov	r1, r6
 800bcaa:	4648      	mov	r0, r9
 800bcac:	f7f4 ff62 	bl	8000b74 <__addsf3>
 800bcb0:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800bcb4:	f027 070f 	bic.w	r7, r7, #15
 800bcb8:	4638      	mov	r0, r7
 800bcba:	4950      	ldr	r1, [pc, #320]	; (800bdfc <__ieee754_powf+0x6ac>)
 800bcbc:	f7f5 f862 	bl	8000d84 <__aeabi_fmul>
 800bcc0:	4649      	mov	r1, r9
 800bcc2:	4680      	mov	r8, r0
 800bcc4:	4638      	mov	r0, r7
 800bcc6:	f7f4 ff53 	bl	8000b70 <__aeabi_fsub>
 800bcca:	4601      	mov	r1, r0
 800bccc:	4630      	mov	r0, r6
 800bcce:	f7f4 ff4f 	bl	8000b70 <__aeabi_fsub>
 800bcd2:	494b      	ldr	r1, [pc, #300]	; (800be00 <__ieee754_powf+0x6b0>)
 800bcd4:	f7f5 f856 	bl	8000d84 <__aeabi_fmul>
 800bcd8:	494a      	ldr	r1, [pc, #296]	; (800be04 <__ieee754_powf+0x6b4>)
 800bcda:	4606      	mov	r6, r0
 800bcdc:	4638      	mov	r0, r7
 800bcde:	f7f5 f851 	bl	8000d84 <__aeabi_fmul>
 800bce2:	4601      	mov	r1, r0
 800bce4:	4630      	mov	r0, r6
 800bce6:	f7f4 ff45 	bl	8000b74 <__addsf3>
 800bcea:	4607      	mov	r7, r0
 800bcec:	4601      	mov	r1, r0
 800bcee:	4640      	mov	r0, r8
 800bcf0:	f7f4 ff40 	bl	8000b74 <__addsf3>
 800bcf4:	4641      	mov	r1, r8
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	f7f4 ff3a 	bl	8000b70 <__aeabi_fsub>
 800bcfc:	4601      	mov	r1, r0
 800bcfe:	4638      	mov	r0, r7
 800bd00:	f7f4 ff36 	bl	8000b70 <__aeabi_fsub>
 800bd04:	4631      	mov	r1, r6
 800bd06:	4680      	mov	r8, r0
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f7f5 f83b 	bl	8000d84 <__aeabi_fmul>
 800bd0e:	4607      	mov	r7, r0
 800bd10:	493d      	ldr	r1, [pc, #244]	; (800be08 <__ieee754_powf+0x6b8>)
 800bd12:	f7f5 f837 	bl	8000d84 <__aeabi_fmul>
 800bd16:	493d      	ldr	r1, [pc, #244]	; (800be0c <__ieee754_powf+0x6bc>)
 800bd18:	f7f4 ff2a 	bl	8000b70 <__aeabi_fsub>
 800bd1c:	4639      	mov	r1, r7
 800bd1e:	f7f5 f831 	bl	8000d84 <__aeabi_fmul>
 800bd22:	493b      	ldr	r1, [pc, #236]	; (800be10 <__ieee754_powf+0x6c0>)
 800bd24:	f7f4 ff26 	bl	8000b74 <__addsf3>
 800bd28:	4639      	mov	r1, r7
 800bd2a:	f7f5 f82b 	bl	8000d84 <__aeabi_fmul>
 800bd2e:	4939      	ldr	r1, [pc, #228]	; (800be14 <__ieee754_powf+0x6c4>)
 800bd30:	f7f4 ff1e 	bl	8000b70 <__aeabi_fsub>
 800bd34:	4639      	mov	r1, r7
 800bd36:	f7f5 f825 	bl	8000d84 <__aeabi_fmul>
 800bd3a:	4937      	ldr	r1, [pc, #220]	; (800be18 <__ieee754_powf+0x6c8>)
 800bd3c:	f7f4 ff1a 	bl	8000b74 <__addsf3>
 800bd40:	4639      	mov	r1, r7
 800bd42:	f7f5 f81f 	bl	8000d84 <__aeabi_fmul>
 800bd46:	4601      	mov	r1, r0
 800bd48:	4630      	mov	r0, r6
 800bd4a:	f7f4 ff11 	bl	8000b70 <__aeabi_fsub>
 800bd4e:	4607      	mov	r7, r0
 800bd50:	4601      	mov	r1, r0
 800bd52:	4630      	mov	r0, r6
 800bd54:	f7f5 f816 	bl	8000d84 <__aeabi_fmul>
 800bd58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bd5c:	4681      	mov	r9, r0
 800bd5e:	4638      	mov	r0, r7
 800bd60:	f7f4 ff06 	bl	8000b70 <__aeabi_fsub>
 800bd64:	4601      	mov	r1, r0
 800bd66:	4648      	mov	r0, r9
 800bd68:	f7f5 f8c0 	bl	8000eec <__aeabi_fdiv>
 800bd6c:	4641      	mov	r1, r8
 800bd6e:	4607      	mov	r7, r0
 800bd70:	4630      	mov	r0, r6
 800bd72:	f7f5 f807 	bl	8000d84 <__aeabi_fmul>
 800bd76:	4641      	mov	r1, r8
 800bd78:	f7f4 fefc 	bl	8000b74 <__addsf3>
 800bd7c:	4601      	mov	r1, r0
 800bd7e:	4638      	mov	r0, r7
 800bd80:	f7f4 fef6 	bl	8000b70 <__aeabi_fsub>
 800bd84:	4631      	mov	r1, r6
 800bd86:	f7f4 fef3 	bl	8000b70 <__aeabi_fsub>
 800bd8a:	4601      	mov	r1, r0
 800bd8c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bd90:	f7f4 feee 	bl	8000b70 <__aeabi_fsub>
 800bd94:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800bd98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd9c:	da20      	bge.n	800bde0 <__ieee754_powf+0x690>
 800bd9e:	4621      	mov	r1, r4
 800bda0:	f000 f8b8 	bl	800bf14 <scalbnf>
 800bda4:	4629      	mov	r1, r5
 800bda6:	e53d      	b.n	800b824 <__ieee754_powf+0xd4>
 800bda8:	4b1c      	ldr	r3, [pc, #112]	; (800be1c <__ieee754_powf+0x6cc>)
 800bdaa:	429c      	cmp	r4, r3
 800bdac:	dd07      	ble.n	800bdbe <__ieee754_powf+0x66e>
 800bdae:	2100      	movs	r1, #0
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	f7f5 f985 	bl	80010c0 <__aeabi_fcmplt>
 800bdb6:	3800      	subs	r0, #0
 800bdb8:	bf18      	it	ne
 800bdba:	2001      	movne	r0, #1
 800bdbc:	e580      	b.n	800b8c0 <__ieee754_powf+0x170>
 800bdbe:	d109      	bne.n	800bdd4 <__ieee754_powf+0x684>
 800bdc0:	4639      	mov	r1, r7
 800bdc2:	f7f4 fed5 	bl	8000b70 <__aeabi_fsub>
 800bdc6:	4631      	mov	r1, r6
 800bdc8:	f7f5 f98e 	bl	80010e8 <__aeabi_fcmpge>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	f43f af4f 	beq.w	800bc70 <__ieee754_powf+0x520>
 800bdd2:	e7ec      	b.n	800bdae <__ieee754_powf+0x65e>
 800bdd4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800bdd8:	f73f af4a 	bgt.w	800bc70 <__ieee754_powf+0x520>
 800bddc:	2400      	movs	r4, #0
 800bdde:	e763      	b.n	800bca8 <__ieee754_powf+0x558>
 800bde0:	4618      	mov	r0, r3
 800bde2:	e7df      	b.n	800bda4 <__ieee754_powf+0x654>
 800bde4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bde8:	e50b      	b.n	800b802 <__ieee754_powf+0xb2>
 800bdea:	2100      	movs	r1, #0
 800bdec:	e509      	b.n	800b802 <__ieee754_powf+0xb2>
 800bdee:	2500      	movs	r5, #0
 800bdf0:	e4ef      	b.n	800b7d2 <__ieee754_powf+0x82>
 800bdf2:	bf00      	nop
 800bdf4:	3338aa3c 	.word	0x3338aa3c
 800bdf8:	007fffff 	.word	0x007fffff
 800bdfc:	3f317200 	.word	0x3f317200
 800be00:	3f317218 	.word	0x3f317218
 800be04:	35bfbe8c 	.word	0x35bfbe8c
 800be08:	3331bb4c 	.word	0x3331bb4c
 800be0c:	35ddea0e 	.word	0x35ddea0e
 800be10:	388ab355 	.word	0x388ab355
 800be14:	3b360b61 	.word	0x3b360b61
 800be18:	3e2aaaab 	.word	0x3e2aaaab
 800be1c:	43160000 	.word	0x43160000

0800be20 <__ieee754_sqrtf>:
 800be20:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800be24:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800be28:	b570      	push	{r4, r5, r6, lr}
 800be2a:	4603      	mov	r3, r0
 800be2c:	4604      	mov	r4, r0
 800be2e:	d309      	bcc.n	800be44 <__ieee754_sqrtf+0x24>
 800be30:	4601      	mov	r1, r0
 800be32:	f7f4 ffa7 	bl	8000d84 <__aeabi_fmul>
 800be36:	4601      	mov	r1, r0
 800be38:	4620      	mov	r0, r4
 800be3a:	f7f4 fe9b 	bl	8000b74 <__addsf3>
 800be3e:	4604      	mov	r4, r0
 800be40:	4620      	mov	r0, r4
 800be42:	bd70      	pop	{r4, r5, r6, pc}
 800be44:	2a00      	cmp	r2, #0
 800be46:	d0fb      	beq.n	800be40 <__ieee754_sqrtf+0x20>
 800be48:	2800      	cmp	r0, #0
 800be4a:	da06      	bge.n	800be5a <__ieee754_sqrtf+0x3a>
 800be4c:	4601      	mov	r1, r0
 800be4e:	f7f4 fe8f 	bl	8000b70 <__aeabi_fsub>
 800be52:	4601      	mov	r1, r0
 800be54:	f7f5 f84a 	bl	8000eec <__aeabi_fdiv>
 800be58:	e7f1      	b.n	800be3e <__ieee754_sqrtf+0x1e>
 800be5a:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800be5e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800be62:	d029      	beq.n	800beb8 <__ieee754_sqrtf+0x98>
 800be64:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800be68:	07cb      	lsls	r3, r1, #31
 800be6a:	f04f 0300 	mov.w	r3, #0
 800be6e:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800be72:	f04f 0419 	mov.w	r4, #25
 800be76:	461e      	mov	r6, r3
 800be78:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800be7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800be80:	bf58      	it	pl
 800be82:	0052      	lslpl	r2, r2, #1
 800be84:	1040      	asrs	r0, r0, #1
 800be86:	0052      	lsls	r2, r2, #1
 800be88:	1875      	adds	r5, r6, r1
 800be8a:	4295      	cmp	r5, r2
 800be8c:	bfde      	ittt	le
 800be8e:	186e      	addle	r6, r5, r1
 800be90:	1b52      	suble	r2, r2, r5
 800be92:	185b      	addle	r3, r3, r1
 800be94:	3c01      	subs	r4, #1
 800be96:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800be9a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800be9e:	d1f3      	bne.n	800be88 <__ieee754_sqrtf+0x68>
 800bea0:	b112      	cbz	r2, 800bea8 <__ieee754_sqrtf+0x88>
 800bea2:	3301      	adds	r3, #1
 800bea4:	f023 0301 	bic.w	r3, r3, #1
 800bea8:	105c      	asrs	r4, r3, #1
 800beaa:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800beae:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800beb2:	e7c5      	b.n	800be40 <__ieee754_sqrtf+0x20>
 800beb4:	005b      	lsls	r3, r3, #1
 800beb6:	3201      	adds	r2, #1
 800beb8:	0218      	lsls	r0, r3, #8
 800beba:	d5fb      	bpl.n	800beb4 <__ieee754_sqrtf+0x94>
 800bebc:	3a01      	subs	r2, #1
 800bebe:	1a89      	subs	r1, r1, r2
 800bec0:	e7d0      	b.n	800be64 <__ieee754_sqrtf+0x44>

0800bec2 <with_errnof>:
 800bec2:	b538      	push	{r3, r4, r5, lr}
 800bec4:	4604      	mov	r4, r0
 800bec6:	460d      	mov	r5, r1
 800bec8:	f7fb fa0a 	bl	80072e0 <__errno>
 800becc:	6005      	str	r5, [r0, #0]
 800bece:	4620      	mov	r0, r4
 800bed0:	bd38      	pop	{r3, r4, r5, pc}

0800bed2 <xflowf>:
 800bed2:	b508      	push	{r3, lr}
 800bed4:	b140      	cbz	r0, 800bee8 <xflowf+0x16>
 800bed6:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 800beda:	f7f4 ff53 	bl	8000d84 <__aeabi_fmul>
 800bede:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bee2:	2122      	movs	r1, #34	; 0x22
 800bee4:	f7ff bfed 	b.w	800bec2 <with_errnof>
 800bee8:	4608      	mov	r0, r1
 800beea:	e7f6      	b.n	800beda <xflowf+0x8>

0800beec <__math_uflowf>:
 800beec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 800bef0:	f7ff bfef 	b.w	800bed2 <xflowf>

0800bef4 <__math_oflowf>:
 800bef4:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800bef8:	f7ff bfeb 	b.w	800bed2 <xflowf>

0800befc <fabsf>:
 800befc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bf00:	4770      	bx	lr

0800bf02 <finitef>:
 800bf02:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bf06:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800bf0a:	bfac      	ite	ge
 800bf0c:	2000      	movge	r0, #0
 800bf0e:	2001      	movlt	r0, #1
 800bf10:	4770      	bx	lr
	...

0800bf14 <scalbnf>:
 800bf14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	460d      	mov	r5, r1
 800bf1e:	4604      	mov	r4, r0
 800bf20:	d02a      	beq.n	800bf78 <scalbnf+0x64>
 800bf22:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bf26:	d304      	bcc.n	800bf32 <scalbnf+0x1e>
 800bf28:	4601      	mov	r1, r0
 800bf2a:	f7f4 fe23 	bl	8000b74 <__addsf3>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	e022      	b.n	800bf78 <scalbnf+0x64>
 800bf32:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800bf36:	d117      	bne.n	800bf68 <scalbnf+0x54>
 800bf38:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800bf3c:	f7f4 ff22 	bl	8000d84 <__aeabi_fmul>
 800bf40:	4a17      	ldr	r2, [pc, #92]	; (800bfa0 <scalbnf+0x8c>)
 800bf42:	4603      	mov	r3, r0
 800bf44:	4295      	cmp	r5, r2
 800bf46:	db0b      	blt.n	800bf60 <scalbnf+0x4c>
 800bf48:	4604      	mov	r4, r0
 800bf4a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800bf4e:	3a19      	subs	r2, #25
 800bf50:	442a      	add	r2, r5
 800bf52:	2afe      	cmp	r2, #254	; 0xfe
 800bf54:	dd0a      	ble.n	800bf6c <scalbnf+0x58>
 800bf56:	4913      	ldr	r1, [pc, #76]	; (800bfa4 <scalbnf+0x90>)
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f361 001e 	bfi	r0, r1, #0, #31
 800bf5e:	e000      	b.n	800bf62 <scalbnf+0x4e>
 800bf60:	4911      	ldr	r1, [pc, #68]	; (800bfa8 <scalbnf+0x94>)
 800bf62:	f7f4 ff0f 	bl	8000d84 <__aeabi_fmul>
 800bf66:	e7e2      	b.n	800bf2e <scalbnf+0x1a>
 800bf68:	0dd2      	lsrs	r2, r2, #23
 800bf6a:	e7f1      	b.n	800bf50 <scalbnf+0x3c>
 800bf6c:	2a00      	cmp	r2, #0
 800bf6e:	dd05      	ble.n	800bf7c <scalbnf+0x68>
 800bf70:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800bf74:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800bf78:	4618      	mov	r0, r3
 800bf7a:	bd38      	pop	{r3, r4, r5, pc}
 800bf7c:	f112 0f16 	cmn.w	r2, #22
 800bf80:	da05      	bge.n	800bf8e <scalbnf+0x7a>
 800bf82:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bf86:	4295      	cmp	r5, r2
 800bf88:	dce5      	bgt.n	800bf56 <scalbnf+0x42>
 800bf8a:	4907      	ldr	r1, [pc, #28]	; (800bfa8 <scalbnf+0x94>)
 800bf8c:	e7e4      	b.n	800bf58 <scalbnf+0x44>
 800bf8e:	3219      	adds	r2, #25
 800bf90:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800bf94:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800bf98:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800bf9c:	e7e1      	b.n	800bf62 <scalbnf+0x4e>
 800bf9e:	bf00      	nop
 800bfa0:	ffff3cb0 	.word	0xffff3cb0
 800bfa4:	7149f2ca 	.word	0x7149f2ca
 800bfa8:	0da24260 	.word	0x0da24260

0800bfac <_init>:
 800bfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfae:	bf00      	nop
 800bfb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfb2:	bc08      	pop	{r3}
 800bfb4:	469e      	mov	lr, r3
 800bfb6:	4770      	bx	lr

0800bfb8 <_fini>:
 800bfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfba:	bf00      	nop
 800bfbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfbe:	bc08      	pop	{r3}
 800bfc0:	469e      	mov	lr, r3
 800bfc2:	4770      	bx	lr
